{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo • All posts by \"逆向\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/11/01/reverse/",
            "url": "http://example.com/2022/11/01/reverse/",
            "title": "逆向",
            "date_published": "2022-11-01T05:38:45.000Z",
            "content_html": "<h2 id=\"c与汇编的关系\"><a class=\"markdownIt-Anchor\" href=\"#c与汇编的关系\">#</a> C 与汇编的关系</h2>\n<h3 id=\"应用层技术栈\"><a class=\"markdownIt-Anchor\" href=\"#应用层技术栈\">#</a> 应用层技术栈：</h3>\n<ol>\n<li>加密与解密（四）看雪论坛</li>\n<li>X86/X64/arm 汇编语言</li>\n<li>windows 核心编程</li>\n<li>c 语言从入门到精通 (第三版) （清华）</li>\n</ol>\n<h3 id=\"学习逆向环境配置\"><a class=\"markdownIt-Anchor\" href=\"#学习逆向环境配置\">#</a> 学习逆向环境配置</h3>\n<p>工具类：</p>\n<ul>\n<li>吾爱破解工具类</li>\n<li>Hxd (十六进制编辑工具)</li>\n</ul>\n<p>开发类：</p>\n<ol>\n<li>VS2008 IDE</li>\n<li>VC6.0 SP6 IDE</li>\n</ol>\n<h3 id=\"进制转换\"><a class=\"markdownIt-Anchor\" href=\"#进制转换\">#</a> 进制转换</h3>\n<ol>\n<li>十进制的定义：由十个符号组成，分别是 0 1 2 3 4 5 6 7 8 9 逢十进一</li>\n<li>九进制的定义：由九个符号组成，分别是 0 1 2 3 4 5 6 7 8 逢九进一</li>\n<li>十六进制的定义：由十六个符号组成，分别是 0 1 2 3 4 5 6 7 8 9 A B C D E F</li>\n<li>N 进制的定义：由 N 个符号组成 逢 N 进一</li>\n</ol>\n<h3 id=\"数据类型与逻辑运算\"><a class=\"markdownIt-Anchor\" href=\"#数据类型与逻辑运算\">#</a> 数据类型与逻辑运算</h3>\n<p>在计算机中，由于硬件的制约，数据是有长度限制的，超过数据宽度的数据会被丢弃</p>\n<p>同一个数据，表示无符号数和有符号数则其含义不同</p>\n<ol>\n<li>无符号数：正数</li>\n<li>有符号数：正数、负数</li>\n</ol>\n<h3 id=\"常见的数据类型重要\"><a class=\"markdownIt-Anchor\" href=\"#常见的数据类型重要\">#</a> 常见的数据类型（重要）</h3>\n<ul>\n<li>BYTE                    字节          8BIT</li>\n<li>WORD                 字             16BIT 2 字节</li>\n<li>DWORD              双字          32BIT 4 字节</li>\n</ul>\n<h3 id=\"常见的运算符类型重要\"><a class=\"markdownIt-Anchor\" href=\"#常见的运算符类型重要\">#</a> <strong>常见的运算符类型（重要）</strong></h3>\n<p><strong>或运算（or |）</strong></p>\n<p>只要有一个为 1 则结果为 1</p>\n<p><strong>与运算（and &amp;）</strong></p>\n<p>两个都是 1 结果才为 1</p>\n<p><strong>异或运算（xor ^）</strong></p>\n<p>相同为 0 不同为 1</p>\n<p><strong>非运算 (not !)</strong></p>\n<p>取反 1 是 0 0 是 1</p>\n<h3 id=\"32位寄存器\"><a class=\"markdownIt-Anchor\" href=\"#32位寄存器\">#</a> 32 位寄存器</h3>\n<p>EAX</p>\n<p>EBX</p>\n<p>ECX</p>\n<p>EDX</p>\n<p>只有通用寄存器能拆成高位和低位</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mov byte [local.3+2],ah     //由于只是高位地址，因此是3+2</span><br><span class=\"line\">mov byte [local.3+3],ah     //同时注意是byte，所以是2</span><br></pre></td></tr></table></figure>\n<p>command 中</p>\n<p>?al 可以显示 al 中的值，即查看寄存器中的值</p>\n<p>dd  内存 display dword</p>\n<p>dw 内存</p>\n<p>db 内存</p>\n<h3 id=\"cpu计算23\"><a class=\"markdownIt-Anchor\" href=\"#cpu计算23\">#</a> CPU 计算 2+3</h3>\n<p>1. 先异或，得到 R</p>\n<p>2. 在与运算，将结果左移一位</p>\n<p>3. 如果 (2) 的结果为全 0，那么 R 就是最终答案，如果不是，将 R 赋值给 x，将 (2) 的结果赋值给 y</p>\n<p>4. 重复操作直至 (2) 的结果为全 0，那么此时 R 就是我们的答案</p>\n<h3 id=\"cpu计算2-3\"><a class=\"markdownIt-Anchor\" href=\"#cpu计算2-3\">#</a> CPU 计算 2-3</h3>\n<p>1. 异或，得到 R</p>\n<p>2. 在与运算，将结果再左移一位</p>\n<p>3. 如果结果为全 0，那么 R 就是结果，否则重复</p>\n<p>在 debug 的模式下是用常量来分配的 print hello world</p>\n<h3 id=\"堆栈的原理\"><a class=\"markdownIt-Anchor\" href=\"#堆栈的原理\">#</a> 堆栈的原理：</h3>\n<ol>\n<li>临时存放一些寄存器已无法存放的数据，比如超过内存对齐的数据类型</li>\n<li>存放临时数据，野指针，指针初始化时的数据</li>\n</ol>\n<p>Windows 分配栈时 是从高地址往低地址分配:</p>\n<ol>\n<li>MOV EBX,0x13FFDC        BASE</li>\n<li>MOV EDX,0x13FFDC        TOP</li>\n</ol>\n<p>EBP 和 ESP：</p>\n<p>ESP：该指针永远指向系统栈最上面一个栈帧的栈顶。</p>\n<p>EBP：该指针永远指向系统栈最上面一个栈帧的底部。</p>\n<p>栈底和栈顶原理：</p>\n<ol>\n<li>控制栈顶和栈底分别为两个固定的寄存器 (EBP 基址指针寄存器 和 ESP 堆栈指针寄存器）</li>\n</ol>\n<p>ebp = esp</p>\n<p>esp -= 0x40</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/2759285/1654236227177-d37c824f-e09f-4e3d-9a41-c4d81ee6de30.png\" alt=\"img\"></p>\n<p>ESP 和 EBP 不够的时候会相互借用，两个都用作传参</p>\n<p>初始状态下，ebp 指向高地址，ESP 指向低地址</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221105095016154.png\" alt=\"image-20221105095016154\"></p>\n<p>push eax</p>\n<blockquote>\n<p>先把 esp-4，再把 eax 中的值压栈</p>\n</blockquote>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221105095049237.png\" alt=\"image-20221105095049237\"></p>\n<p>pop eax</p>\n<blockquote>\n<p>将 esp 指向的值给 eax，esp+4</p>\n</blockquote>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221105095144317.png\" alt=\"image-20221105095144317\"></p>\n<h4 id=\"一个helloworld的main函数\"><a class=\"markdownIt-Anchor\" href=\"#一个helloworld的main函数\">#</a> 一个 helloworld 的 main 函数</h4>\n<p>一般来说，VC 6.0 的 main 函数在  <code>call 00401005</code></p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221105093859109.png\" alt=\"image-20221105093859109\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00401005  /$ /E9 06000000   jmp     main</span><br><span class=\"line\">0040100A  |  |CC            int3</span><br><span class=\"line\">0040100B  |  |CC            int3</span><br><span class=\"line\">0040100C  |  |CC            int3</span><br><span class=\"line\">0040100D  |  |CC            int3</span><br><span class=\"line\">0040100E  |  |CC            int3</span><br><span class=\"line\">0040100F  |  |CC            int3</span><br><span class=\"line\">00401010 &gt;|&gt; \\55            push    ebp</span><br><span class=\"line\">00401011  |.  8BEC          mov     ebp,esp</span><br><span class=\"line\">00401013  |.  83EC 40       sub     esp,0x40</span><br><span class=\"line\">00401016  |.  53            push    ebx</span><br><span class=\"line\">00401017  |.  56            push    esi</span><br><span class=\"line\">00401018  |.  57            push    edi</span><br><span class=\"line\">00401019  |.  8D7D C0       lea     edi,[local.16]</span><br><span class=\"line\">0040101C  |.  B9 10000000   mov     ecx,0x10</span><br><span class=\"line\">00401021  |.  B8 CCCCCCCC   mov     eax,0xCCCCCCCC</span><br><span class=\"line\">00401026  |.  F3:AB         rep     stos dword ptr es:[edi]</span><br><span class=\"line\">00401028  |.  68 1C204200   push    0042201C                         ; /format = &quot;Hello World!</span><br><span class=\"line\">&quot;</span><br><span class=\"line\">0040102D  |.  E8 2E000000   call    printf                           ; \\printf</span><br><span class=\"line\">00401032  |.  83C4 04       add     esp,0x4</span><br><span class=\"line\">00401035  |.  33C0          xor     eax,eax</span><br><span class=\"line\">00401037  |.  5F            pop     edi</span><br><span class=\"line\">00401038  |.  5E            pop     esi</span><br><span class=\"line\">00401039  |.  5B            pop     ebx</span><br><span class=\"line\">0040103A  |.  83C4 40       add     esp,0x40</span><br><span class=\"line\">0040103D  |.  3BEC          cmp     ebp,esp</span><br><span class=\"line\">0040103F  |.  E8 9C000000   call    _chkesp</span><br><span class=\"line\">00401044  |.  8BE5          mov     esp,ebp</span><br><span class=\"line\">00401046  |.  5D            pop     ebp</span><br><span class=\"line\">00401047  \\.  C3            retn</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>假设当前我们有这样一个程序</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// add_main.cpp : Defines the entry point for the console application.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a, b;</span><br><span class=\"line\">    a = m;</span><br><span class=\"line\">    b = n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> m=<span class=\"number\">3</span>,n=<span class=\"number\">4</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">func</span>(m,n);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Hello World!\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在调用 func 之前，main 的栈帧：</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221105100143457.png\" alt=\"image-20221105100143457\"></p>\n<p>从低地址 esp 到高地址 ebp 的这块区域，就是当前 main 函数的栈帧。当 main 中调用 func 时，写成汇编大致是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">push m</span><br><span class=\"line\">push n; 两个参数压入栈</span><br><span class=\"line\">call func; 调用func，将返回地址填入栈，并跳转到func</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00401078  |.  C745 FC 03000&gt;mov     dword ptr ss:[ebp-0x4],0x3</span><br><span class=\"line\">0040107F  |.  C745 F8 04000&gt;mov     dword ptr ss:[ebp-0x8],0x4</span><br><span class=\"line\">00401086  |.  8B45 F8       mov     eax,dword ptr ss:[ebp-0x8]</span><br><span class=\"line\">00401089  |.  50            push    eax</span><br><span class=\"line\">0040108A  |.  8B4D FC       mov     ecx,dword ptr ss:[ebp-0x4]</span><br><span class=\"line\">0040108D  |.  51            push    ecx</span><br><span class=\"line\">0040108E  |.  E8 72FFFFFF   call    00401005</span><br><span class=\"line\">00401093  |.  83C4 08       add     esp,0x8</span><br><span class=\"line\">00401096  |.  68 1C204200   push    0042201C                         ; /format = &quot;Hello World!</span><br><span class=\"line\">&quot;</span><br><span class=\"line\">0040109B  |.  E8 30000000   call    printf                           ; \\printf</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221105100732747.png\" alt=\"image-20221105100732747\"></p>\n<p>当跳转到了 func，来看看 func 的汇编大致的样子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00401020 &gt;/&gt; \\55            push    ebp</span><br><span class=\"line\">00401021  |.  8BEC          mov     ebp,esp</span><br><span class=\"line\">00401023  |.  83EC 48       sub     esp,0x48</span><br><span class=\"line\">00401026  |.  53            push    ebx</span><br><span class=\"line\">00401027  |.  56            push    esi</span><br><span class=\"line\">00401028  |.  57            push    edi</span><br></pre></td></tr></table></figure>\n<p>push ebp 需要保存 main 的栈底，因为现在到了一个新的函数，但栈顶不需要保存，因为上一个栈帧的顶部讲会是 func 的栈帧底部。（两栈帧相邻的）</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221105101018994.png\" alt=\"image-20221105101018994\"></p>\n<p>到这里，新的栈帧开始了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mov     eax,dword ptr ss:[ebp+0x8]</span><br><span class=\"line\">mov     dword ptr ss:[ebp-0x4],eax</span><br><span class=\"line\">mov     ecx,dword ptr ss:[ebp+0xC]</span><br><span class=\"line\">mov     dword ptr ss:[ebp-0x8],ecx</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221105101240579.png\" alt=\"image-20221105101240579\"></p>\n<p>retn   ; 返回，然后 8 是什么意思呢，就是参数占用的字节数，当返回后，esp-n，释放参数 m,n 的空间</p>\n<p>由此可见，通过 ebp，能够很容易定位到上面的参数。当从 func 函数返回时，首先 esp 移动到栈帧底部（即释放局部变量），然后把上一个函数的栈帧底部指针弹出到 ebp, 再弹出返回地址到 cs:ip 上，esp 继续移动划过参数，这样，ebp,esp 就回到了调用函数前的状态，即现在恢复了原来的 main 的栈帧</p>\n<p>大佬的文章：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1R1eGVkb0xpbnV4L2FydGljbGUvZGV0YWlscy8xMDA5MjE5OTQ=\">栈帧 ebp,esp 详解_TuxedoLinux 的博客 - CSDN 博客_ebp esp</span></p>\n<h4 id=\"提升堆栈\"><a class=\"markdownIt-Anchor\" href=\"#提升堆栈\">#</a> <strong>提升堆栈</strong></h4>\n<p>对应语句为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00401060 &gt;/&gt; \\55            push    ebp</span><br><span class=\"line\">00401061  |.  8BEC          mov     ebp,esp</span><br><span class=\"line\">00401063  |.  83EC 48       sub     esp,0x40</span><br></pre></td></tr></table></figure>\n<p>将堆栈提升了 0x40</p>\n<p>将 esp 的值减去 0x40=64，我们这里的相差的数据宽度为 4 即 16,64/4=16，因此堆栈图里多了 16 格（蓝色部分），这种操作常被叫做<strong>提升堆栈</strong>，此时堆栈图为：</p>\n<img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20210228212917496.png\" alt=\"image-20210228212917496\" style=\"zoom:50%;\" />\n<p>此时 ESP 指向新的栈顶，蓝色区域为我们 CALL 0040100A 之后新的栈，下面的区域为原来的栈</p>\n<p>此时蓝色中的数据为脏数据，因为栈中放的是临时数据，可能是之前没有清理的数据</p>\n<h4 id=\"保护现场\"><a class=\"markdownIt-Anchor\" href=\"#保护现场\">#</a> <strong>保护现场</strong></h4>\n<p>对应语句为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00401066  |.  53            push    ebx</span><br><span class=\"line\">00401067  |.  56            push    esi</span><br><span class=\"line\">00401068  |.  57            push    edi</span><br></pre></td></tr></table></figure>\n<p>将 ebx、esi、edi 三个通用寄存器保存到堆栈中，前面的 push ebp 其实也属于保护现场</p>\n<h4 id=\"初始化提升的堆栈\"><a class=\"markdownIt-Anchor\" href=\"#初始化提升的堆栈\">#</a> <strong>初始化提升的堆栈</strong></h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00401069  |.  8D7D B8       lea     edi,dword ptr ss:[ebp-0x48]  ;就是将刚开始的esp给的edi</span><br><span class=\"line\">0040106C  |.  B9 12000000   mov     ecx,0x12     ;ecx是为了之后的rep做准备的，ecx是rep循环次数</span><br><span class=\"line\">00401071  |.  B8 CCCCCCCC   mov     eax,0xCCCCCCCC     ;使用CC防止缓冲溢出</span><br><span class=\"line\">00401076  |.  F3:AB         rep     stos dword ptr es:[edi]  ;将eax的值赋值给edi所指向的内存地址里的值，并且每执行一次edi都会增加4（D标志位为0所以是增加</span><br></pre></td></tr></table></figure>\n<p>这里将我们提升的堆栈中的内容全部初始化为 CCCCCCCC</p>\n<p>为什么是初始化为 CC？防止<strong>缓冲</strong>溢出</p>\n<p>CC 的<strong>硬编码</strong>对应的指令为 int 3，即断点</p>\n<p>这么做有什么好处呢？当程序执行超过缓冲区时，遇到 int 3 就会自动停下来</p>\n<h4 id=\"执行实际的内容\"><a class=\"markdownIt-Anchor\" href=\"#执行实际的内容\">#</a> 执行实际的内容</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00401058 |. 8B45 08    mov eax,dword ptr ss:[ebp+0x8]</span><br><span class=\"line\">0040105B |. 0345 0C    add eax,dword ptr ss:[ebp+0xC]</span><br></pre></td></tr></table></figure>\n<p>就是将前面压入的参数 2 和 1 进行相加得到 3</p>\n<h4 id=\"恢复现场\"><a class=\"markdownIt-Anchor\" href=\"#恢复现场\">#</a> 恢复现场</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00401145  |.  5F            pop     edi</span><br><span class=\"line\">00401146  |.  5E            pop     esi</span><br><span class=\"line\">00401147  |.  5B            pop     ebx</span><br><span class=\"line\">00401148  |.  8BE5          mov     esp,ebp</span><br><span class=\"line\">0040114A  |.  5D            pop     ebp</span><br></pre></td></tr></table></figure>\n<p>与前面保护现场相对应</p>\n<img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20210228224826624.png\" alt=\"image-20210228224826624\" style=\"zoom:50%;\" />\n<h4 id=\"返回\"><a class=\"markdownIt-Anchor\" href=\"#返回\">#</a> 返回</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0040114B  \\.  C3            retn</span><br></pre></td></tr></table></figure>\n<h4 id=\"call返回后\"><a class=\"markdownIt-Anchor\" href=\"#call返回后\">#</a> CALL 返回后</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0040112B  |.  83C4 0C       add     esp,0xC</span><br></pre></td></tr></table></figure>\n<p>作用为平衡堆栈</p>\n<p>注意 CALL 之前和 CALL 之后，其前后环境要一致，这就是所谓的<strong>堆栈平衡</strong></p>\n<h4 id=\"堆栈平衡\"><a class=\"markdownIt-Anchor\" href=\"#堆栈平衡\">#</a> 堆栈平衡</h4>\n<p>如果通过堆栈传递参数了。那么在程序执行完毕后，要平衡因参数导致的堆栈变化</p>\n<p>当我们使用堆栈传参的时候，在程序执行完毕后这些参数应该一起被清理掉，也就是加了几条参数，就要在堆栈中加几个地址，这么做可以理解为清理垃圾。</p>\n<p>处理方法：</p>\n<p>第一种 ：在函数外部添加 ADD 处理</p>\n<p>第二种：在函数内部添加 ret8</p>\n<h4 id=\"逆推c语言代码\"><a class=\"markdownIt-Anchor\" href=\"#逆推c语言代码\">#</a> 逆推 C 语言代码</h4>\n<p>根据我们前面的分析，我们不难发现这其实就是个简单的加法函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void func(int m, int n) &#123;</span><br><span class=\"line\">    int a, b;</span><br><span class=\"line\">    a = m;</span><br><span class=\"line\">    b = n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuNTJwb2ppZS5jbi90aHJlYWQtMTM3OTk1Mi0xLTEuaHRtbA==\">逆向基础笔记七 堆栈图（重点） - 『软件调试区』 - 吾爱破解 - LCG - LSG | 安卓破解 | 病毒分析 | www.52pojie.cn</span></p>\n<p>我们最后在总结一下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00401060 &gt;/&gt; \\55            push    ebp</span><br><span class=\"line\">;现在到了一个新的函数，需要有自己的栈底，因此需要把上一个栈底保存起来，栈顶不用保存，因为栈顶是新函数的栈底</span><br><span class=\"line\">00401061  |.  8BEC          mov     ebp,esp</span><br><span class=\"line\">00401063  |.  83EC 48       sub     esp,0x48</span><br><span class=\"line\">;堆栈提升</span><br><span class=\"line\">00401066  |.  53            push    ebx</span><br><span class=\"line\">00401067  |.  56            push    esi</span><br><span class=\"line\">00401068  |.  57            push    edi</span><br><span class=\"line\">;保护现场，为了retn后回恢复</span><br><span class=\"line\">00401069  |.  8D7D B8       lea     edi,[local.18]</span><br><span class=\"line\">0040106C  |.  B9 12000000   mov     ecx,0x12</span><br><span class=\"line\">00401071  |.  B8 CCCCCCCC   mov     eax,0xCCCCCCCC</span><br><span class=\"line\">00401076  |.  F3:AB         rep     stos dword ptr es:[edi]</span><br><span class=\"line\">;初始化堆栈，防止脏数据</span><br><span class=\"line\">00401078  |.  C745 FC 03000&gt;mov     [local.1],0x3</span><br><span class=\"line\">0040107F  |.  C745 F8 04000&gt;mov     [local.2],0x4</span><br><span class=\"line\">00401086  |.  8B45 F8       mov     eax,[local.2]</span><br><span class=\"line\">00401089  |.  50            push    eax</span><br><span class=\"line\">0040108A  |.  8B4D FC       mov     ecx,[local.1]</span><br><span class=\"line\">0040108D  |.  51            push    ecx</span><br><span class=\"line\">;形参压入栈中</span><br><span class=\"line\">0040108E  |.  E8 72FFFFFF   call    00401005</span><br><span class=\"line\">;调用add函数</span><br><span class=\"line\">00401093  |.  83C4 08       add     esp,0x8</span><br><span class=\"line\">;堆栈平衡，将esp带回call以前的位置，call之前push了两次，2*4=8</span><br><span class=\"line\">00401096  |.  68 1C204200   push    0042201C                         ; /format = &quot;Hello World!</span><br><span class=\"line\">0040109B  |.  E8 30000000   call    printf                           ; \\printf</span><br><span class=\"line\">;嗲用printf函数，操作和上面调用add一样</span><br><span class=\"line\">004010A0  |.  83C4 04       add     esp,0x4</span><br><span class=\"line\">;堆栈平衡</span><br><span class=\"line\">004010A3  |.  33C0          xor     eax,eax</span><br><span class=\"line\">004010A5  |.  5F            pop     edi</span><br><span class=\"line\">004010A6  |.  5E            pop     esi</span><br><span class=\"line\">004010A7  |.  5B            pop     ebx</span><br><span class=\"line\">;恢复现场</span><br><span class=\"line\">004010A8  |.  83C4 48       add     esp,0x48</span><br><span class=\"line\">004010AB  |.  3BEC          cmp     ebp,esp</span><br><span class=\"line\">004010AD  |.  E8 9E000000   call    _chkesp</span><br><span class=\"line\">004010B2  |.  8BE5          mov     esp,ebp</span><br><span class=\"line\">004010B4  |.  5D            pop     ebp</span><br><span class=\"line\">004010B5  \\.  C3            retn</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>分配堆栈向下减少。堆栈传递参数向上相加</p>\n<h4 id=\"堆栈结构图重点\"><a class=\"markdownIt-Anchor\" href=\"#堆栈结构图重点\">#</a> 堆栈结构图（重点）</h4>\n<ol>\n<li>调用 CALL 又可以分为六个部分：</li>\n<li>提升堆栈</li>\n<li>保护现场</li>\n<li>初始化提升的堆栈</li>\n<li>执行实际内容</li>\n<li>恢复现场</li>\n<li>返回</li>\n</ol>\n<h3 id=\"如何右键启动od\"><a class=\"markdownIt-Anchor\" href=\"#如何右键启动od\">#</a> 如何右键启动 od</h3>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221108181646294.png\" alt=\"image-20221108181646294\"></p>\n<p>通过以上方式右键启动 od</p>\n<h3 id=\"标志寄存器\"><a class=\"markdownIt-Anchor\" href=\"#标志寄存器\">#</a> 标志寄存器</h3>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221108181822816.png\" alt=\"image-20221108181822816\"></p>\n<img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221108193731856.png\" alt=\"image-20221108193731856\" style=\"zoom:80%;\" />\n<ol>\n<li>进位标志 CF (Carry Flag)</li>\n<li>奇偶标志 PF (Parity  Flag)</li>\n<li>辅助进位标志 AF (Auxiliary  Carry Flag)</li>\n<li>零标志 ZF (Zero  Flag)</li>\n<li>符号标志 SF (Sign  Flag)</li>\n<li>溢出标志 OF (Overflow  Flag)</li>\n<li>方向标志 DF (Direction Flag)</li>\n</ol>\n<h4 id=\"进位标志cfcarry-flag\"><a class=\"markdownIt-Anchor\" href=\"#进位标志cfcarry-flag\">#</a> 进位标志 CF (Carry Flag)</h4>\n<p>如果运算结果的<strong>最高位</strong>产生了一个进位或借位，那么，其值为 1，否则其值为 0</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t__asm&#123;</span><br><span class=\"line\">\t\tpushad   <span class=\"comment\">//通用寄存器入栈</span></span><br><span class=\"line\">\t\tpushfd   <span class=\"comment\">//标志寄存器入栈</span></span><br><span class=\"line\">\t\tmov al,<span class=\"number\">0xff</span></span><br><span class=\"line\">\t\tadd al,<span class=\"number\">1</span> <span class=\"comment\">//C,P,A,Z = 1</span></span><br><span class=\"line\">\t\tpopad</span><br><span class=\"line\">\t\tpopfd</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"奇偶标志pfparity-flag\"><a class=\"markdownIt-Anchor\" href=\"#奇偶标志pfparity-flag\">#</a> 奇偶标志 PF (Parity Flag)</h4>\n<p>奇偶标志 PF 用于反映运算结果中<strong>最低有效字节</strong>中 “1” 的个数的奇偶性，如果 “1” 的个数为偶数，则 PF 的值为 1，否则其值为 0。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MOV AX,803</span><br><span class=\"line\">ADD AX,1</span><br><span class=\"line\">0x804: 0000 1000 0000 0100        总共2个1 ,PF应为1，但实际运行结果PF为0</span><br><span class=\"line\">因为PF是根据最低有效字节来看，即804后面04的这部分</span><br></pre></td></tr></table></figure>\n<h4 id=\"辅助进位标志afauxiliary-carry-flag\"><a class=\"markdownIt-Anchor\" href=\"#辅助进位标志afauxiliary-carry-flag\">#</a> 辅助进位标志 AF (Auxiliary Carry Flag)</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在发生下列情况时，辅助进位标志AF的值被置为1，否则其值为0：</span><br><span class=\"line\"></span><br><span class=\"line\">在字操作时，发生低字节向高字节进位或借位时</span><br><span class=\"line\">在字节操作时，发生低4位向高4位进位或借位时</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>AF 与<strong>数据宽度</strong>相关</p>\n<p>32 位时 FFFF <strong>F</strong> FFF</p>\n<p>16 位时 FF <strong>F</strong> F</p>\n<p>8 位时 F <strong>F</strong></p>\n<p>加黑的字体为 AF 标志位判断的位置，如果该位置要向前进位则 AF 为 1，否则为 0，和 CF 相似，不过判断的位置不同</p>\n</blockquote>\n<h4 id=\"零标志zfzero-flag\"><a class=\"markdownIt-Anchor\" href=\"#零标志zfzero-flag\">#</a> 零标志 ZF (Zero Flag)</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">零标志ZF用来反映运算结果是否为0</span><br><span class=\"line\">如果运算结果为0，则其值为1，否则其值为0</span><br><span class=\"line\">作用：在判断运算结果是否为0时，可使用此标志位</span><br><span class=\"line\">XOR EAX,EAX   //通过xor将eax清零，会改变zf标志位为1</span><br><span class=\"line\">MOV EAX,0     //通过MOV将EAX赋值为0，非运算，不改变zf标志位</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"符号标志sfsign-flag\"><a class=\"markdownIt-Anchor\" href=\"#符号标志sfsign-flag\">#</a> 符号标志 SF (Sign Flag)</h4>\n<blockquote>\n<p>符号标志 SF 用来反映运算结果的符号位，它与运算结果的最高位相同</p>\n</blockquote>\n<h4 id=\"溢出标志ofoverflow-flag\"><a class=\"markdownIt-Anchor\" href=\"#溢出标志ofoverflow-flag\">#</a> 溢出标志 OF (Overflow Flag)</h4>\n<blockquote>\n<p>溢出标志 OF 用于反映有符号数加减运算所得结果是否溢出</p>\n<p>进位标志表示<strong>无符号数</strong>运算结果是否超出范围.</p>\n<p>溢出标志表示<strong>有符号数</strong>运算结果是否超出范围.</p>\n<ul>\n<li>正 + 正 = 正 如果结果是负数，则说明有溢出</li>\n<li>负 + 负 = 负 如果结果是正数，则说明有溢出</li>\n<li>正 + 负 永远都不会有溢出</li>\n</ul>\n<p>CPU 如何计算 OF</p>\n<ul>\n<li>符号位有进位</li>\n<li>最高有效数值位向符号位产生的进位</li>\n</ul>\n<p>对于一个有符号数：如 0x80 和 0xC0</p>\n<p>符号位有进位</p>\n<p>0x80:<strong>1</strong> 000 0000</p>\n<p>0xC0:<strong>1</strong> 100 0000</p>\n<p>最高有效数值位向符号位产生的进位</p>\n<p>0x80:1 <strong>0</strong> 00 0000</p>\n<p>0xC0:1 <strong>1</strong> 00 0000</p>\n<p>就是运算 0x80+0xc0</p>\n<p>0x80:<strong>1</strong> <strong>0</strong> 00 0000</p>\n<p>0xC0:<strong>1</strong> <strong>1</strong> 00 0000</p>\n<p>符号位 1+1 有产生进位，于是符号位有进位为 1</p>\n<p>最高有效数值位向符号位产生的进位 0+1 没有产生进位，于是最高有效数值位向符号位产生的进位为 0</p>\n<p><strong>OF = 符号位有进位 xor 最高有效数值位向符号位产生的进位</strong></p>\n<p>OF = 1 xor 0 = 1 所以此时 OF=1</p>\n</blockquote>\n<h4 id=\"方向标志dfdirection-flag\"><a class=\"markdownIt-Anchor\" href=\"#方向标志dfdirection-flag\">#</a> 方向标志 DF (Direction Flag)</h4>\n<blockquote>\n<p>DF=1 时串操作为减地址方式 DF=0 为增地址方式</p>\n</blockquote>\n<h3 id=\"相关汇编指令\"><a class=\"markdownIt-Anchor\" href=\"#相关汇编指令\">#</a> 相关汇编指令</h3>\n<blockquote>\n<p>ADC 指令：带进位加法</p>\n<p>SBB 指令：带借位减法</p>\n<p>XCHG 指令：交换数据</p>\n<p>格式：XCHG R/M,R/M 两边不能同时为内存  <strong>数据宽度</strong>要一样</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MOV AL,1</span><br><span class=\"line\">MOV CL,2</span><br><span class=\"line\">XCHG AL,CL</span><br><span class=\"line\">执行前：AL=1 CL=2</span><br><span class=\"line\">执行后：AL=2 CL=1</span><br></pre></td></tr></table></figure>\n<p>MOVS 指令：移动数据 内存 - 内存</p>\n<p>MOVS 指令常用于复制字符串</p>\n<p>可以将不同宽度的指令简写为 movsb movsw movsd</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MOV EDI,12FFD8</span><br><span class=\"line\">MOV ESI,12FFD0</span><br><span class=\"line\">MOVS DWORD PTR ES:[EDI],DWORD PTR DS:[ESI]</span><br><span class=\"line\">EDI内存里的值被修改为ESI内存里的值，且EDI和ESI各加4,和DOWRD数据宽度相关，如果为WORD 则各加2</span><br><span class=\"line\">由DF（Direction Flag）方向标志位决定，当DF位为1时为减，当DF位为0时，则为加</span><br></pre></td></tr></table></figure>\n<p>movsx 操作数 A，操作数 B  符号扩展传送</p>\n<p>movzx 零扩展传送</p>\n<p>movsx，movzx 操作数 A 的空间必须大于操作数 b</p>\n<p>如果大的给小的，会产生截断</p>\n<p>STOS 指令</p>\n<p>将 Al/AX/EAX 的值存储到 [EDI] 指定的内存单元，和<strong>数据宽度</strong>相关</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">STOS BYTE PTR ES:[EDI]                将AL存储到[EDI]</span><br><span class=\"line\">STOS WORD PTR ES:[EDI]                将AX存储到[EDI]</span><br><span class=\"line\">STOS DWORD PTR ES:[EDI]                将EAX存储到[EDI]</span><br><span class=\"line\">注意这里使用的是ES</span><br><span class=\"line\">当后面为[EDI]时要使用ES</span><br><span class=\"line\">存储完数据后EDI地址的变化方向也受DF标志控制，1减0增</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00401019  |.  8D7D C0       lea     edi,[local.16]</span><br><span class=\"line\">0040101C  |.  B9 10000000   mov     ecx,0x10</span><br><span class=\"line\">00401021  |.  B8 CCCCCCCC   mov     eax,0xCCCCCCCC</span><br><span class=\"line\">00401026  |.  F3:AB         rep     stos dword ptr es:[edi]</span><br><span class=\"line\">现在在看看这几行代码，先把eax的值变为cccccccc，stos将其存储到es中，通过rep循环存储</span><br></pre></td></tr></table></figure>\n<p>REP 指令</p>\n<p>按计数寄存器 (ECX) 中指定的次数重复执行指令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MOV ECX,10</span><br><span class=\"line\">REP MOVS DWORD PTR ES:[EDI],DWORD PTR DS:[ESI]        也可以写成REP MOVSD</span><br><span class=\"line\">代码将会重复执行16次</span><br><span class=\"line\">因为每执行一次EDI和ESI都会变化4，变化方向由DF决定</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"跳转和比较指令\"><a class=\"markdownIt-Anchor\" href=\"#跳转和比较指令\">#</a> 跳转和比较指令</h3>\n<h4 id=\"jcc指令\"><a class=\"markdownIt-Anchor\" href=\"#jcc指令\">#</a> JCC 指令</h4>\n<blockquote>\n<p>cc 代表 condition code (状态码)</p>\n<p>Jcc 不是单个指令，它只是描述了跳转之前检查条件代码的跳转助记符</p>\n<img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221031210918994.png\" alt=\"image-20221031210918994\" style=\"zoom: 50%;\" />\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY3MucHJpbmNldG9uLmVkdS9jb3Vyc2VzL2FyY2hpdmUvZmFsbDEyL2NvczM3NS9JQTMySmNjLnBkZg==\">https://www.cs.princeton.edu/courses/archive/fall12/cos375/IA32Jcc.pdf</span></p>\n<p>JCC 指令用于改变 EIP（CPU 要读取的指令地址）</p>\n</blockquote>\n<h4 id=\"jmp指令\"><a class=\"markdownIt-Anchor\" href=\"#jmp指令\">#</a> JMP 指令</h4>\n<p>JMP 指令：修改 EIP 的值</p>\n<p>JMP 指令只影响了 EIP，不影响堆栈和其它通用寄存器</p>\n<p>JMP 寄存器 / 立即数相当于 MOV EIP, 寄存器 / 立即数</p>\n<h4 id=\"call指令\"><a class=\"markdownIt-Anchor\" href=\"#call指令\">#</a> CALL 指令</h4>\n<p>CALL 指令和 JMP 指令都会修改 EIP 的值</p>\n<p>但 CALL 指令会将返回地址（CALL 指令的下一条指令地址）压入堆栈</p>\n<p>因此也会引起 esp 的变化</p>\n<h4 id=\"ret指令\"><a class=\"markdownIt-Anchor\" href=\"#ret指令\">#</a> RET 指令</h4>\n<p>call 调用跳转后执行完相关代码完要返回到 call 的下一条指令时使用 ret 指令</p>\n<p>ret 指令相当于 pop eip</p>\n<h4 id=\"cmp指令\"><a class=\"markdownIt-Anchor\" href=\"#cmp指令\">#</a> CMP 指令</h4>\n<p>指令格式：CMP R/M,R/M/IMM</p>\n<p>CMP 指令只改变标志寄存器的值</p>\n<p>该指令是比较两个操作数，实际上，它相当于 SUB 指令，但是相减的结果并不保存到第一个操作数中</p>\n<p>只是根据相减的结果来改变 ZF 零标志位的，当两个操作数相等的时候，零标志位置 1</p>\n<h4 id=\"test指令\"><a class=\"markdownIt-Anchor\" href=\"#test指令\">#</a> TEST 指令</h4>\n<p>指令格式：TEST R/M,R/M/IMM</p>\n<p>该指令在一定程度上和 CMP 指令时类似的，两个数值进行与操作，结果不保存，但是会改变相应标志位</p>\n<p>常见用法：用这个指令，可以确定某寄存器是否等于 0</p>\n<p>观察 ZF（零标志位）就可以判断 EAX 是否为 0</p>\n<h3 id=\"if指令编译结果\"><a class=\"markdownIt-Anchor\" href=\"#if指令编译结果\">#</a> if 指令编译结果</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;stdafx.h&quot;</span><br><span class=\"line\">#include &lt;windows.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint a = 1;</span><br><span class=\"line\">\tif (a == 1) &#123;</span><br><span class=\"line\">\t\tprintf(&quot;%d\\n&quot;,11);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\telse &#123;</span><br><span class=\"line\">\t\tprintf(&quot;%d\\n&quot;,22);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0040D440 &gt;/&gt; \\55            push    ebp</span><br><span class=\"line\">0040D441  |.  8BEC          mov     ebp,esp</span><br><span class=\"line\">0040D443  |.  83EC 44       sub     esp,0x44</span><br><span class=\"line\">0040D446  |.  53            push    ebx</span><br><span class=\"line\">0040D447  |.  56            push    esi</span><br><span class=\"line\">0040D448  |.  57            push    edi</span><br><span class=\"line\">0040D449  |.  8D7D BC       lea     edi,[local.17]</span><br><span class=\"line\">0040D44C  |.  B9 11000000   mov     ecx,0x11</span><br><span class=\"line\">0040D451  |.  B8 CCCCCCCC   mov     eax,0xCCCCCCCC</span><br><span class=\"line\">0040D456  |.  F3:AB         rep     stos dword ptr es:[edi]</span><br><span class=\"line\">//上面都是堆栈提升，初始化堆栈，if从这里开始</span><br><span class=\"line\"></span><br><span class=\"line\">// a=1</span><br><span class=\"line\">0040D458  |.  C745 FC 01000&gt;mov     dword ptr ss:[ebp-0x4],0x1</span><br><span class=\"line\">// a==1?a=11:a=22</span><br><span class=\"line\">// 如果a!=1 jmp 0040D476</span><br><span class=\"line\">// 如果a!=1 printf(11) jmp(0040D485)</span><br><span class=\"line\">// jmp(0040D485)就是跳转到if判断结束的地方，继续执行下面的语句</span><br><span class=\"line\">0040D45F  |.  837D FC 01    cmp     dword ptr ss:[ebp-0x4],0x1</span><br><span class=\"line\">0040D463  |.  75 11         jnz     short 0040D476</span><br><span class=\"line\">0040D465  |.  6A 0B         push    0xB                              ; /&lt;%d&gt; = B (11.)</span><br><span class=\"line\">0040D467  |.  68 0C214200   push    0042210C                         ; |format = &quot;%d</span><br><span class=\"line\"></span><br><span class=\"line\">0040D46C  |.  E8 4F020000   call    printf                           ; \\printf</span><br><span class=\"line\">0040D471  |.  83C4 08       add     esp,0x8</span><br><span class=\"line\">0040D474  |.  EB 0F         jmp     short 0040D485</span><br><span class=\"line\">0040D476  |&gt;  6A 16         push    0x16                             ; /&lt;%d&gt; = 16 (22.)</span><br><span class=\"line\">0040D478  |.  68 0C214200   push    0042210C                         ; |format = &quot;%d</span><br><span class=\"line\"></span><br><span class=\"line\">0040D47D  |.  E8 3E020000   call    printf                           ; \\printf</span><br><span class=\"line\">0040D482  |.  83C4 08       add     esp,0x8</span><br><span class=\"line\">0040D485  |&gt;  33C0          xor     eax,eax</span><br><span class=\"line\">0040D487  |.  5F            pop     edi</span><br><span class=\"line\">0040D488  |.  5E            pop     esi</span><br><span class=\"line\">0040D489  |.  5B            pop     ebx</span><br><span class=\"line\">0040D48A  |.  83C4 44       add     esp,0x44</span><br><span class=\"line\">0040D48D  |.  3BEC          cmp     ebp,esp</span><br><span class=\"line\">0040D48F  |.  E8 BC3BFFFF   call    _chkesp</span><br><span class=\"line\">0040D494  |.  8BE5          mov     esp,ebp</span><br><span class=\"line\">0040D496  |.  5D            pop     ebp</span><br><span class=\"line\">0040D497  \\.  C3            retn</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"反汇编分析c语言\"><a class=\"markdownIt-Anchor\" href=\"#反汇编分析c语言\">#</a> 反汇编分析 C 语言</h3>\n<p>有了之前画堆栈图的经验，我们不难看出，尽管我们的函数是个空函数，但其汇编代码依然完成了以下流程：</p>\n<ol>\n<li>提升堆栈</li>\n<li>保护现场</li>\n<li>初始化提升的堆栈</li>\n<li>恢复现场</li>\n<li>返回</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">提升堆栈</span><br><span class=\"line\"> 复制代码 隐藏代码</span><br><span class=\"line\"><span class=\"number\">00401010</span>   push        ebp</span><br><span class=\"line\"><span class=\"number\">00401011</span>   mov         ebp,esp</span><br><span class=\"line\"><span class=\"number\">00401013</span>   sub         esp,<span class=\"number\">40</span>h</span><br><span class=\"line\">保护现场</span><br><span class=\"line\"> 复制代码 隐藏代码</span><br><span class=\"line\"><span class=\"number\">00401016</span>   push        ebx</span><br><span class=\"line\"><span class=\"number\">00401017</span>   push        esi</span><br><span class=\"line\"><span class=\"number\">00401018</span>   push        edi</span><br><span class=\"line\">PS：前面的push        ebp也是保护现场</span><br><span class=\"line\"></span><br><span class=\"line\">初始化提升的堆栈</span><br><span class=\"line\"> 复制代码 隐藏代码</span><br><span class=\"line\"><span class=\"number\">00401019</span>   lea         edi,[ebp<span class=\"number\">-40</span>h]</span><br><span class=\"line\"><span class=\"number\">0040101</span>C   mov         ecx,<span class=\"number\">10</span>h</span><br><span class=\"line\"><span class=\"number\">00401021</span>   mov         eax,<span class=\"number\">0</span>CCCCCCCCh</span><br><span class=\"line\"><span class=\"number\">00401026</span>   rep stos    dword ptr [edi]</span><br><span class=\"line\">恢复现场</span><br><span class=\"line\"> 复制代码 隐藏代码</span><br><span class=\"line\"><span class=\"number\">00401028</span>   pop         edi</span><br><span class=\"line\"><span class=\"number\">00401029</span>   pop         esi</span><br><span class=\"line\"><span class=\"number\">0040102</span>A   pop         ebx</span><br><span class=\"line\"><span class=\"number\">0040102</span>B   mov         esp,ebp</span><br><span class=\"line\"><span class=\"number\">0040102</span>D   pop         ebp</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221108201930358.png\" alt=\"image-20221108201930358\"></p>\n<h3 id=\"内联汇编\"><a class=\"markdownIt-Anchor\" href=\"#内联汇编\">#</a> 内联汇编</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t__asm&#123;</span><br><span class=\"line\">\t\tpushad   <span class=\"comment\">//通用寄存器入栈</span></span><br><span class=\"line\">\t\tpushfd   <span class=\"comment\">//标志寄存器入栈</span></span><br><span class=\"line\">\t\tmov al,<span class=\"number\">0xff</span></span><br><span class=\"line\">\t\tadd al,<span class=\"number\">1</span> <span class=\"comment\">//C,P,A,Z = 1</span></span><br><span class=\"line\">\t\tpopad</span><br><span class=\"line\">\t\tpopfd</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 VS2008 创建一个 win32 application</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221108192317976.png\" alt=\"image-20221108192317976\"></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/2759285/1654239398565-0af1e19d-f2a4-4772-b49a-495dcdf19dca.png\" alt=\"img\"></p>\n<p>使用多线程 /mt 之后，用户运行时不需要库既可运行，但文件会变大</p>\n<p>编译一个内联函数</p>\n<p>nake 声明一个裸函数，即堆栈的申请释放都需要我们自己进行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;stdafx.h&quot;</span><br><span class=\"line\">#include &lt;Windows.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int __declspec (naked) Plus()&#123;</span><br><span class=\"line\">                __asm&#123;</span><br><span class=\"line\">\t\t\t\t\t\tpushad</span><br><span class=\"line\">\t\t\t\t\t\txor     eax,eax</span><br><span class=\"line\">\t\t\t\t\t\tcmp     byte ptr ds:[0x4F040],al</span><br><span class=\"line\">\t\t\t\t\t\tretn</span><br><span class=\"line\">\t\t\t\t\t\tpopad</span><br><span class=\"line\">        &#125;        </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int _tmain(int argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tPlus();</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Plus () 对应的汇编代码为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00FC2240 &gt; &gt; \\60            pushad</span><br><span class=\"line\">00FC2241   .  33C0          xor     eax,eax</span><br><span class=\"line\">00FC2243      61            popad                       </span><br></pre></td></tr></table></figure>\n<p>正常的函数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;stdafx.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">int Plus()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint x=1+2;</span><br><span class=\"line\">\treturn 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int _tmain(int argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tPlus();</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">003813A0 &gt;  55              push    ebp</span><br><span class=\"line\">003813A1    8BEC            mov     ebp,esp</span><br><span class=\"line\">003813A3    81EC CC000000   sub     esp,0xCC</span><br><span class=\"line\">003813A9    53              push    ebx</span><br><span class=\"line\">003813AA    56              push    esi</span><br><span class=\"line\">003813AB    57              push    edi</span><br><span class=\"line\">003813AC    8DBD 34FFFFFF   lea     edi,dword ptr ss:[ebp-0xCC]</span><br><span class=\"line\">003813B2    B9 33000000     mov     ecx,0x33</span><br><span class=\"line\">003813B7    B8 CCCCCCCC     mov     eax,0xCCCCCCCC</span><br><span class=\"line\">003813BC    F3:AB           rep     stos dword ptr es:[edi]</span><br><span class=\"line\">003813BE    C745 F8 0300000&gt;mov     dword ptr ss:[ebp-0x8],0x3</span><br><span class=\"line\">003813C5    B8 01000000     mov     eax,0x1</span><br><span class=\"line\">003813CA    5F              pop     edi</span><br><span class=\"line\">003813CB    5E              pop     esi</span><br><span class=\"line\">003813CC    5B              pop     ebx</span><br><span class=\"line\">003813CD    8BE5            mov     esp,ebp</span><br><span class=\"line\">003813CF    5D              pop     ebp</span><br><span class=\"line\">003813D0    C3              retn</span><br></pre></td></tr></table></figure>\n<p>正常的函数系统会自动帮我们进行堆栈的操作我们只需要关系自己的代码即可</p>\n<h3 id=\"寻找c程序入口\"><a class=\"markdownIt-Anchor\" href=\"#寻找c程序入口\">#</a> 寻找 C 程序入口</h3>\n<p>为什么能看到 wmain 的名称</p>\n<p>因为有 pdb 文件，od 读取 pdb 读取 debug 信息</p>\n<p>PDB 全称为程序数据库文件，存储了被编译文件的调试信息，一般用在调式程序中</p>\n<p>1. 找到 wmainCRTStartup</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221108210348946.png\" alt=\"image-20221108210348946\"></p>\n<p>2. 找到__tmainCRTStartup</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221108210432400.png\" alt=\"image-20221108210432400\"></p>\n<p>3. 这个 call 002C108C 就是我们的 main 函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">002C260E   .  FF35 70F02D00 push    dword ptr ds:[__wargv]</span><br><span class=\"line\">002C2614   .  FF35 68F02D00 push    dword ptr ds:[__argc]</span><br><span class=\"line\">002C261A   .  E8 6DEAFFFF   call    002C108C</span><br></pre></td></tr></table></figure>\n<p>4.wmain 就是我们的 main 函数</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221108210639094.png\" alt=\"image-20221108210639094\"></p>\n<blockquote>\n<p>mainCRTStartup 和 wmainCRTStartup 是控制台环境下多字节编码和 Unicode 编码的启动函数</p>\n<p>而 WinMainCRTStartup 和 wWinMainCRTStartup 是 windows 环境下多字节编码和 Unicode 编码的启动函数</p>\n<p>mainCRTStartup 做了哪些事：</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221108210737730.png\" alt=\"image-20221108210737730\"></p>\n<ol>\n<li>前面我们已经知道了 mainCRTStartup 也就是程序入口，那么如何通过 mainCRTStartup 来找到 main 函数入口</li>\n<li>根据函数的参数来进行判断</li>\n<li>main 函数貌似只有两个参数，但实际上 main 函数一共有三个参数，只不过一般第三个参数我们并没有用到，于是在使用 main 函数时并没有加上，完整的 main 函数原型如下:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int main(int argc,char *argv[],char *envp[])&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的 argv 和 envp 对应 mainCRTStartup 里_setargv () 和_setenvp ()</p>\n<p>main 中参数</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221108210850705.png\" alt=\"image-20221108210850705\"></p>\n</blockquote>\n<p>另一种歪门邪道：</p>\n<p>找一个有标示性的断点</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221111213357060.png\" alt=\"image-20221111213357060\"></p>\n<p>下断，跳转到断点，F9 执行到断点</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221111213436905.png\" alt=\"image-20221111213436905\"></p>\n<p>在堆栈窗口中选中，enter 建进入 main</p>\n<p>或者在有 printf 或者 MessageBox 时可以 F9   CTRL+F9</p>\n<h3 id=\"调试方式\"><a class=\"markdownIt-Anchor\" href=\"#调试方式\">#</a> 调试方式</h3>\n<p>1.OD 直接打开</p>\n<p>2. 附加到已经打开的进程</p>\n<h3 id=\"od常用操作\"><a class=\"markdownIt-Anchor\" href=\"#od常用操作\">#</a> OD 常用操作</h3>\n<p>F9 程序运行到所设断点处</p>\n<p>F2 设置软件断点</p>\n<p>ALT+C 初始页面</p>\n<p>bp  指令地址    设置软件断点</p>\n<p>dd ecx / 内存地址  查看 ecx 寄存器，寄存器中值</p>\n<p>F8 单步步过</p>\n<p>F7 单步步入</p>\n<p>CTRL + F9  执行到返回</p>\n<p>ALT + F9 执行到用户代码</p>\n<h3 id=\"函数调用\"><a class=\"markdownIt-Anchor\" href=\"#函数调用\">#</a> 函数调用</h3>\n<p>注意先关闭 c/c++ 优化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;stdafx.h&quot;</span><br><span class=\"line\">#include &lt;windows.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int add(int a, int b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\treturn a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int aaa=1;</span><br><span class=\"line\"></span><br><span class=\"line\">int _tmain(int argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tMessageBox(0,NULL,NULL,MB_OK);</span><br><span class=\"line\">\taaa = add(3,4);</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"release\"><a class=\"markdownIt-Anchor\" href=\"#release\">#</a> release</h4>\n<p>优化的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00371000 &gt;/$  6A 00         push    0x0                              ; /Style = MB_OK|MB_APPLMODAL</span><br><span class=\"line\">00371002  |.  6A 00         push    0x0                              ; |Title = NULL</span><br><span class=\"line\">00371004  |.  6A 00         push    0x0                              ; |Text = NULL</span><br><span class=\"line\">00371006  |.  6A 00         push    0x0                              ; |hOwner = NULL</span><br><span class=\"line\">00371008  |.  FF15 A4203700 call    dword ptr ds:[&lt;&amp;USER32.MessageBo&gt;; \\MessageBoxW</span><br><span class=\"line\">0037100E  |.  C705 18303700&gt;mov     dword ptr ds:[aaa],0x7</span><br><span class=\"line\">00371018  |.  33C0          xor     eax,eax</span><br><span class=\"line\">0037101A  \\.  C3            retn</span><br></pre></td></tr></table></figure>\n<p>未被优化的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">012B1010 &gt;/$  55            push    ebp</span><br><span class=\"line\">012B1011  |.  8BEC          mov     ebp,esp</span><br><span class=\"line\">012B1013  |.  6A 00         push    0x0                                            ; /Style = MB_OK|MB_APPLMODAL</span><br><span class=\"line\">012B1015  |.  6A 00         push    0x0                                            ; |Title = NULL</span><br><span class=\"line\">012B1017  |.  6A 00         push    0x0                                            ; |Text = NULL</span><br><span class=\"line\">012B1019  |.  6A 00         push    0x0                                            ; |hOwner = NULL</span><br><span class=\"line\">012B101B  |.  FF15 E4802B01 call    dword ptr ds:[&lt;&amp;USER32.MessageBoxW&gt;]           ; \\MessageBoxW</span><br><span class=\"line\">012B1021  |.  6A 04         push    0x4</span><br><span class=\"line\">012B1023  |.  6A 03         push    0x3</span><br><span class=\"line\">012B1025  |.  E8 D6FFFFFF   call    add</span><br><span class=\"line\">012B102A  |.  83C4 08       add     esp,0x8</span><br><span class=\"line\">012B102D  |.  A3 40AC2B01   mov     dword ptr ds:[aaa],eax</span><br><span class=\"line\">012B1032  |.  33C0          xor     eax,eax</span><br><span class=\"line\">012B1034  |.  5D            pop     ebp</span><br><span class=\"line\">012B1035  \\.  C3            retn</span><br></pre></td></tr></table></figure>\n<p>如果我们此时将代码改为如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;stdafx.h&quot;</span><br><span class=\"line\">#include &lt;windows.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int add(int a, int b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\treturn a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int aaa=1;</span><br><span class=\"line\"></span><br><span class=\"line\">int _tmain(int argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tMessageBox(0,NULL,NULL,MB_OK);</span><br><span class=\"line\">\taaa = add(aaa,4);</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00EB13F0 &gt;  55              push    ebp</span><br><span class=\"line\">00EB13F1    8BEC            mov     ebp,esp</span><br><span class=\"line\">00EB13F3    81EC C0000000   sub     esp,0xC0</span><br><span class=\"line\">00EB13F9    53              push    ebx</span><br><span class=\"line\">00EB13FA    56              push    esi</span><br><span class=\"line\">00EB13FB    57              push    edi</span><br><span class=\"line\">00EB13FC    8DBD 40FFFFFF   lea     edi,dword ptr ss:[ebp-0xC0]</span><br><span class=\"line\">00EB1402    B9 30000000     mov     ecx,0x30</span><br><span class=\"line\">00EB1407    B8 CCCCCCCC     mov     eax,0xCCCCCCCC</span><br><span class=\"line\">00EB140C    F3:AB           rep     stos dword ptr es:[edi]</span><br><span class=\"line\">00EB140E    8BF4            mov     esi,esp</span><br><span class=\"line\">00EB1410    6A 00           push    0x0</span><br><span class=\"line\">00EB1412    6A 00           push    0x0</span><br><span class=\"line\">00EB1414    6A 00           push    0x0</span><br><span class=\"line\">00EB1416    6A 00           push    0x0</span><br><span class=\"line\">00EB1418    FF15 3883EB00   call    dword ptr ds:[&lt;&amp;USER32.MessageBoxW&gt;]    ; user32.MessageBoxW</span><br><span class=\"line\">00EB141E    3BF4            cmp     esi,esp</span><br><span class=\"line\">00EB1420    E8 25FDFFFF     call    00EB114A</span><br><span class=\"line\">00EB1425    6A 04           push    0x4</span><br><span class=\"line\">00EB1427    A1 0070EB00     mov     eax,dword ptr ds:[aaa]</span><br><span class=\"line\">00EB142C    50              push    eax</span><br><span class=\"line\">00EB142D    E8 69FCFFFF     call    00EB109B</span><br><span class=\"line\">00EB1432    83C4 08         add     esp,0x8</span><br><span class=\"line\">00EB1435    A3 0070EB00     mov     dword ptr ds:[aaa],eax</span><br><span class=\"line\">00EB143A    33C0            xor     eax,eax</span><br><span class=\"line\">00EB143C    5F              pop     edi</span><br><span class=\"line\">00EB143D    5E              pop     esi</span><br><span class=\"line\">00EB143E    5B              pop     ebx</span><br><span class=\"line\">00EB143F    81C4 C0000000   add     esp,0xC0</span><br><span class=\"line\">00EB1445    3BEC            cmp     ebp,esp</span><br><span class=\"line\">00EB1447    E8 FEFCFFFF     call    00EB114A</span><br><span class=\"line\">00EB144C    8BE5            mov     esp,ebp</span><br><span class=\"line\">00EB144E    5D              pop     ebp</span><br><span class=\"line\">00EB144F    C3              retn</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00EB13B0 &gt;  55              push    ebp</span><br><span class=\"line\">00EB13B1    8BEC            mov     ebp,esp</span><br><span class=\"line\">00EB13B3    81EC C0000000   sub     esp,0xC0</span><br><span class=\"line\">00EB13B9    53              push    ebx</span><br><span class=\"line\">00EB13BA    56              push    esi</span><br><span class=\"line\">00EB13BB    57              push    edi</span><br><span class=\"line\">00EB13BC    8DBD 40FFFFFF   lea     edi,dword ptr ss:[ebp-0xC0]</span><br><span class=\"line\">00EB13C2    B9 30000000     mov     ecx,0x30</span><br><span class=\"line\">00EB13C7    B8 CCCCCCCC     mov     eax,0xCCCCCCCC</span><br><span class=\"line\">00EB13CC    F3:AB           rep     stos dword ptr es:[edi]</span><br><span class=\"line\">00EB13CE    8B45 08         mov     eax,dword ptr ss:[ebp+0x8]</span><br><span class=\"line\">00EB13D1    0345 0C         add     eax,dword ptr ss:[ebp+0xC]</span><br><span class=\"line\">00EB13D4    5F              pop     edi                                     ; 0038FB84</span><br><span class=\"line\">00EB13D5    5E              pop     esi</span><br><span class=\"line\">00EB13D6    5B              pop     ebx</span><br><span class=\"line\">00EB13D7    8BE5            mov     esp,ebp</span><br><span class=\"line\">00EB13D9    5D              pop     ebp</span><br><span class=\"line\">00EB13DA    C3              retn</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"进制与内存单元长度修饰\"><a class=\"markdownIt-Anchor\" href=\"#进制与内存单元长度修饰\">#</a> 进制与内存单元长度修饰</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add [ebx],0x333</span><br><span class=\"line\">然在实际汇编出来： add byte ptr [ebx], 33</span><br><span class=\"line\"></span><br><span class=\"line\">eax是双字</span><br><span class=\"line\">内存单元访问，默认byte</span><br><span class=\"line\">因此会截断</span><br></pre></td></tr></table></figure>\n<h2 id=\"从逆向的角度看c\"><a class=\"markdownIt-Anchor\" href=\"#从逆向的角度看c\">#</a> 从逆向的角度看 C++</h2>\n<h3 id=\"虚函数\"><a class=\"markdownIt-Anchor\" href=\"#虚函数\">#</a> 虚函数</h3>\n<ul>\n<li><strong>虚函数地址表（虚表）</strong></li>\n</ul>\n<ol>\n<li>\n<ol>\n<li>定义：当类中定义有虚函数时，编译器会把该类中所有虚函数的首地址保存在一张地址表中，即虚函数地址表。</li>\n<li>虚表信息在编译后被链接到执行文件中，因此所获得的虚表地址是一个固定的地址。</li>\n<li>虚表中虚函数的地址排列顺序依据虚函数在类中的声明顺序而定。</li>\n</ol>\n</li>\n</ol>\n<ul>\n<li>\n<p><strong>虚表指针</strong></p>\n</li>\n<li>\n<ul>\n<li>同时编译器还会在类的每个对象添加一个隐藏数据成员，称为虚表指针，保存着虚表的首地址，用于记录和查找虚函数。</li>\n<li>虚表指针的初始化是通过编译器在构造函数中插入代码实现的。由于必须初始化虚表指针，编译器会提供默认的构造函数。</li>\n</ul>\n</li>\n<li>\n<p><strong>虚函数调用过程</strong></p>\n</li>\n<li>\n<ul>\n<li>虚表间接寻址访问：<br>\n使用对象的指针或引用调用虚函数。根据对象的首地址，取出相应的虚表指针，在虚表查找对应的虚函数的首地址，并调用执行。</li>\n<li>直接调用访问：<br>\n使用对象调用虚函数，和调用普通成员函数一样。</li>\n<li>虚函数的识别：</li>\n<li>类中隐式定义一个数据成员</li>\n<li>数据成员在首地址处，占 4 字节</li>\n<li>构造函数初始化该数据成员为某个数组的首地址</li>\n<li>地址属于数据区，相对固定的地址</li>\n<li>数组的成员是函数指针</li>\n<li>函数被调用方式是 thiscall</li>\n<li>构造函数与析构函数都会将虚表指针设置为当前对象所属类中的虚表地址。</li>\n<li>构造函数中是完成虚表指针的初始化，此时虚表指针并没有指向虚表函数。</li>\n<li>执行析构函数时，其对象的虚表指针已经指向某个虚表首地址。虚函数是在还原虚表指针，让其指向自身的虚表首地址，防止在析构函数中调用虚函数时取到非自身虚表</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/2759285/1654326102652-35f05218-3401-41f7-a10f-3e70d9aed416.png\" alt=\"img\"></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/2759285/1654326120551-f6cd8e66-fc26-40bd-8d23-a8f6b93c7805.png\" alt=\"img\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;stdafx.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;windows.h&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">class base_class</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    int m_base;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    virtual void v_func1()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; &quot;This is base_class&#x27;s v_func1()&quot; &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual void v_func2()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; &quot;This is base_class&#x27;s v_func2()&quot; &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual void v_func3()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; &quot;This is base_class&#x27;s v_func3()&quot; &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int _tmain(int argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tbase_class Myclass;</span><br><span class=\"line\">\tMyclass.v_func1();</span><br><span class=\"line\">\tMyclass.v_func2();</span><br><span class=\"line\">\tMyclass.v_func3();</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>对应的汇编为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">000A1520 &gt;  55              push    ebp</span><br><span class=\"line\">000A1521    8BEC            mov     ebp,esp</span><br><span class=\"line\">000A1523    81EC D0000000   sub     esp,0xD0</span><br><span class=\"line\">000A1529    53              push    ebx</span><br><span class=\"line\">000A152A    56              push    esi</span><br><span class=\"line\">000A152B    57              push    edi</span><br><span class=\"line\">000A152C    8DBD 30FFFFFF   lea     edi,dword ptr ss:[ebp-0xD0]</span><br><span class=\"line\">000A1532    B9 34000000     mov     ecx,0x34</span><br><span class=\"line\">000A1537    B8 CCCCCCCC     mov     eax,0xCCCCCCCC</span><br><span class=\"line\">000A153C    F3:AB           rep     stos dword ptr es:[edi]</span><br><span class=\"line\">000A153E    8D4D F4         lea     ecx,dword ptr ss:[ebp-0xC]</span><br><span class=\"line\">000A1541    E8 A4FCFFFF     call    000A11EA</span><br><span class=\"line\"></span><br><span class=\"line\">000A1546    8D4D F4         lea     ecx,dword ptr ss:[ebp-0xC]</span><br><span class=\"line\">000A1549    E8 D0FAFFFF     call    000A101E</span><br><span class=\"line\"></span><br><span class=\"line\">000A154E    8D4D F4         lea     ecx,dword ptr ss:[ebp-0xC]</span><br><span class=\"line\">000A1551    E8 62FCFFFF     call    000A11B8</span><br><span class=\"line\"></span><br><span class=\"line\">000A1556    8D4D F4         lea     ecx,dword ptr ss:[ebp-0xC]</span><br><span class=\"line\">000A1559    E8 3CFCFFFF     call    000A119A</span><br><span class=\"line\"></span><br><span class=\"line\">000A155E    33C0            xor     eax,eax</span><br><span class=\"line\">000A1560    52              push    edx</span><br><span class=\"line\">000A1561    8BCD            mov     ecx,ebp</span><br><span class=\"line\">000A1563    50              push    eax</span><br><span class=\"line\">000A1564    8D15 88150A00   lea     edx,dword ptr ds:[0xA1588]</span><br><span class=\"line\">000A156A    E8 4FFBFFFF     call    000A10BE</span><br><span class=\"line\">000A156F    58              pop     eax</span><br><span class=\"line\">000A1570    5A              pop     edx</span><br><span class=\"line\">000A1571    5F              pop     edi</span><br><span class=\"line\">000A1572    5E              pop     esi</span><br><span class=\"line\">000A1573    5B              pop     ebx</span><br><span class=\"line\">000A1574    81C4 D0000000   add     esp,0xD0</span><br><span class=\"line\">000A157A    3BEC            cmp     ebp,esp</span><br><span class=\"line\">000A157C    E8 50FCFFFF     call    000A11D1</span><br><span class=\"line\">000A1581    8BE5            mov     esp,ebp</span><br><span class=\"line\">000A1583    5D              pop     ebp</span><br><span class=\"line\">000A1584    C3              retn</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//000A11EA处的代码为</span><br><span class=\"line\">013E11EA   /E9 61050000     jmp     base_class::base_class</span><br><span class=\"line\"></span><br><span class=\"line\">013E1750 &gt;  55              push    ebp</span><br><span class=\"line\">013E1751    8BEC            mov     ebp,esp</span><br><span class=\"line\">013E1753    81EC CC000000   sub     esp,0xCC</span><br><span class=\"line\">013E1759    53              push    ebx</span><br><span class=\"line\">013E175A    56              push    esi</span><br><span class=\"line\">013E175B    57              push    edi</span><br><span class=\"line\">013E175C    51              push    ecx</span><br><span class=\"line\">013E175D    8DBD 34FFFFFF   lea     edi,dword ptr ss:[ebp-0xCC]</span><br><span class=\"line\">013E1763    B9 33000000     mov     ecx,0x33</span><br><span class=\"line\">013E1768    B8 CCCCCCCC     mov     eax,0xCCCCCCCC</span><br><span class=\"line\">013E176D    F3:AB           rep     stos dword ptr es:[edi]</span><br><span class=\"line\">013E176F    59              pop     ecx</span><br><span class=\"line\">013E1770    894D F8         mov     dword ptr ss:[ebp-0x8],ecx</span><br><span class=\"line\">013E1773    8B45 F8         mov     eax,dword ptr ss:[ebp-0x8]</span><br><span class=\"line\">013E1776    C700 7C783E01   mov     dword ptr ds:[eax],offset base_class::`vftable&#x27;</span><br><span class=\"line\">//此处为虚表的虚表指针eax中的值就是vftable的指针</span><br><span class=\"line\">013E177C    8B45 F8         mov     eax,dword ptr ss:[ebp-0x8]</span><br><span class=\"line\">013E177F    5F              pop     edi</span><br><span class=\"line\">013E1780    5E              pop     esi</span><br><span class=\"line\">013E1781    5B              pop     ebx</span><br><span class=\"line\">013E1782    8BE5            mov     esp,ebp</span><br><span class=\"line\">013E1784    5D              pop     ebp</span><br><span class=\"line\">013E1785    C3              retn</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//000A101E处的代码为</span><br><span class=\"line\">013E101E   /E9 AD050000     jmp     base_class::v_func1</span><br><span class=\"line\"></span><br><span class=\"line\">013E15D0 &gt;  55              push    ebp</span><br><span class=\"line\">013E15D1    8BEC            mov     ebp,esp</span><br><span class=\"line\">013E15D3    81EC CC000000   sub     esp,0xCC</span><br><span class=\"line\">013E15D9    53              push    ebx</span><br><span class=\"line\">013E15DA    56              push    esi</span><br><span class=\"line\">013E15DB    57              push    edi</span><br><span class=\"line\">013E15DC    51              push    ecx</span><br><span class=\"line\">013E15DD    8DBD 34FFFFFF   lea     edi,dword ptr ss:[ebp-0xCC]</span><br><span class=\"line\">013E15E3    B9 33000000     mov     ecx,0x33</span><br><span class=\"line\">013E15E8    B8 CCCCCCCC     mov     eax,0xCCCCCCCC</span><br><span class=\"line\">013E15ED    F3:AB           rep     stos dword ptr es:[edi]</span><br><span class=\"line\">013E15EF    59              pop     ecx</span><br><span class=\"line\">013E15F0    894D F8         mov     dword ptr ss:[ebp-0x8],ecx</span><br><span class=\"line\">013E15F3    8BF4            mov     esi,esp</span><br><span class=\"line\">013E15F5    A1 10B33E01     mov     eax,dword ptr ds:[&lt;&amp;MSVCP90D.std::endl&gt;]</span><br><span class=\"line\">013E15FA    50              push    eax</span><br><span class=\"line\">013E15FB    68 00783E01     push    013E7800                                                                                     ; ASCII 54,&quot;his is base_class&#x27;s v_func1()&quot;</span><br><span class=\"line\">013E1600    8B0D 0CB33E01   mov     ecx,dword ptr ds:[&lt;&amp;MSVCP90D.std::cout&gt;]                                                     ; msvcp90d.std::cout</span><br><span class=\"line\">013E1606    51              push    ecx</span><br><span class=\"line\">013E1607    E8 6BFBFFFF     call    013E1177</span><br><span class=\"line\">013E160C    83C4 08         add     esp,0x8</span><br><span class=\"line\">013E160F    8BC8            mov     ecx,eax</span><br><span class=\"line\">013E1611    FF15 08B33E01   call    dword ptr ds:[&lt;&amp;MSVCP90D.std::basic_ostream&lt;char,std::char_traits&lt;char&gt; &gt;::operator&lt;&lt;&gt;]      ; msvcp90d.std::basic_ostream&lt;wchar_t,std::char_traits&lt;wchar_t&gt; &gt;::operator&lt;&lt;</span><br><span class=\"line\">013E1617    3BF4            cmp     esi,esp</span><br><span class=\"line\">013E1619    E8 B3FBFFFF     call    013E11D1</span><br><span class=\"line\">013E161E    5F              pop     edi</span><br><span class=\"line\">013E161F    5E              pop     esi</span><br><span class=\"line\">013E1620    5B              pop     ebx</span><br><span class=\"line\">013E1621    81C4 CC000000   add     esp,0xCC</span><br><span class=\"line\">013E1627    3BEC            cmp     ebp,esp</span><br><span class=\"line\">013E1629    E8 A3FBFFFF     call    013E11D1</span><br><span class=\"line\">013E162E    8BE5            mov     esp,ebp</span><br><span class=\"line\">013E1630    5D              pop     ebp</span><br><span class=\"line\">013E1631    C3              retn</span><br><span class=\"line\"></span><br><span class=\"line\">000A11B8</span><br><span class=\"line\">000A119A</span><br><span class=\"line\">分别是func2和func3的代码</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221109211943483.png\" alt=\"image-20221109211943483\"></p>\n<h3 id=\"debug版本和release版本\"><a class=\"markdownIt-Anchor\" href=\"#debug版本和release版本\">#</a> debug 版本和 release 版本</h3>\n<p>debug 版本：</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221109212625495.png\" alt=\"image-20221109212625495\"></p>\n<p>release 版本</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221109212653171.png\" alt=\"image-20221109212653171\"></p>\n<p>debug main</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/2759285/1654330003859-a991baf8-cefe-46fb-83c2-602148a95ba5.png\" alt=\"img\"></p>\n<p>release main</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221109213010383.png\" alt=\"image-20221109213010383\"></p>\n<p>对于刚刚的虚函数</p>\n<p>debug</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221109213138880.png\" alt=\"image-20221109213138880\"></p>\n<p>release</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221109213209477.png\" alt=\"image-20221109213209477\"></p>\n<h3 id=\"c中类与继承在汇编中的关系\"><a class=\"markdownIt-Anchor\" href=\"#c中类与继承在汇编中的关系\">#</a> C++ 中类与继承在汇编中的关系</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;stdafx.h&quot;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;windows.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">class employee</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\temployee() &#123; printf(&quot;employee()!\\n&quot;);&#125;</span><br><span class=\"line\">\t~employee() &#123; printf(&quot;~employee()!\\n&quot;);&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">class manager : public employee</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tmanager() &#123; printf(&quot;manager()!\\n&quot;);&#125;</span><br><span class=\"line\">\t~manager() &#123;  printf(&quot;~maneger()!\\n&quot;);&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int _tmain(int argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tmanager my;</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">010D13D0 &gt;  55              push    ebp</span><br><span class=\"line\">010D13D1    8BEC            mov     ebp,esp</span><br><span class=\"line\">010D13D3    81EC D8000000   sub     esp,0xD8</span><br><span class=\"line\">010D13D9    53              push    ebx</span><br><span class=\"line\">010D13DA    56              push    esi</span><br><span class=\"line\">010D13DB    57              push    edi</span><br><span class=\"line\">010D13DC    8DBD 28FFFFFF   lea     edi,dword ptr ss:[ebp-0xD8]</span><br><span class=\"line\">010D13E2    B9 36000000     mov     ecx,0x36</span><br><span class=\"line\">010D13E7    B8 CCCCCCCC     mov     eax,0xCCCCCCCC</span><br><span class=\"line\">010D13EC    F3:AB           rep     stos dword ptr es:[edi]</span><br><span class=\"line\">//堆栈操作</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">010D13EE    8D4D FB         lea     ecx,dword ptr ss:[ebp-0x5]</span><br><span class=\"line\">010D13F1    E8 22FDFFFF     call    010D1118</span><br><span class=\"line\">//010D1118   /E9 63030000     jmp     manager::manager</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">010D13F6    8BF4            mov     esi,esp</span><br><span class=\"line\">010D13F8    FF15 C4820D01   call    dword ptr ds:[&lt;&amp;MSVCR90D.getchar&gt;]        ; msvcr90d.getchar</span><br><span class=\"line\">010D13FE    3BF4            cmp     esi,esp</span><br><span class=\"line\">010D1400    E8 54FDFFFF     call    010D1159</span><br><span class=\"line\">010D1405    C785 2CFFFFFF 0&gt;mov     dword ptr ss:[ebp-0xD4],0x0</span><br><span class=\"line\">010D140F    8D4D FB         lea     ecx,dword ptr ss:[ebp-0x5]</span><br><span class=\"line\">010D1412    E8 11FCFFFF     call    010D1028</span><br><span class=\"line\">//010D1028   /E9 33050000     jmp     manager::~manager</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">010D1417    8B85 2CFFFFFF   mov     eax,dword ptr ss:[ebp-0xD4]</span><br><span class=\"line\">010D141D    52              push    edx</span><br><span class=\"line\">010D141E    8BCD            mov     ecx,ebp</span><br><span class=\"line\">010D1420    50              push    eax</span><br><span class=\"line\">010D1421    8D15 44140D01   lea     edx,dword ptr ds:[0x10D1444]</span><br><span class=\"line\">010D1427    E8 6AFCFFFF     call    010D1096</span><br><span class=\"line\">010D142C    58              pop     eax</span><br><span class=\"line\">010D142D    5A              pop     edx</span><br><span class=\"line\">010D142E    5F              pop     edi</span><br><span class=\"line\">010D142F    5E              pop     esi</span><br><span class=\"line\">010D1430    5B              pop     ebx</span><br><span class=\"line\">010D1431    81C4 D8000000   add     esp,0xD8</span><br><span class=\"line\">010D1437    3BEC            cmp     ebp,esp</span><br><span class=\"line\">010D1439    E8 1BFDFFFF     call    010D1159</span><br><span class=\"line\">010D143E    8BE5            mov     esp,ebp</span><br><span class=\"line\">010D1440    5D              pop     ebp</span><br><span class=\"line\">010D1441    C3              retn</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">010D1118</span><br><span class=\"line\">010D1118   /E9 63030000     jmp     manager::manager</span><br><span class=\"line\"></span><br><span class=\"line\">010D1480 &gt;  55              push    ebp</span><br><span class=\"line\">010D1481    8BEC            mov     ebp,esp</span><br><span class=\"line\">010D1483    81EC CC000000   sub     esp,0xCC</span><br><span class=\"line\">010D1489    53              push    ebx</span><br><span class=\"line\">010D148A    56              push    esi</span><br><span class=\"line\">010D148B    57              push    edi</span><br><span class=\"line\">010D148C    51              push    ecx</span><br><span class=\"line\">010D148D    8DBD 34FFFFFF   lea     edi,dword ptr ss:[ebp-0xCC]</span><br><span class=\"line\">010D1493    B9 33000000     mov     ecx,0x33</span><br><span class=\"line\">010D1498    B8 CCCCCCCC     mov     eax,0xCCCCCCCC</span><br><span class=\"line\">010D149D    F3:AB           rep     stos dword ptr es:[edi]</span><br><span class=\"line\">010D149F    59              pop     ecx</span><br><span class=\"line\">010D14A0    894D F8         mov     dword ptr ss:[ebp-0x8],ecx</span><br><span class=\"line\">010D14A3    8B4D F8         mov     ecx,dword ptr ss:[ebp-0x8]</span><br><span class=\"line\">010D14A6    E8 FAFBFFFF     call    010D10A5</span><br><span class=\"line\">//010D10A5   /E9 46040000     jmp     employee::employee</span><br><span class=\"line\"></span><br><span class=\"line\">-</span><br><span class=\"line\">010D14AB    8BF4            mov     esi,esp</span><br><span class=\"line\">010D14AD    68 3C570D01     push    010D573C                              ; ASCII &quot;manager()!\\n&quot;</span><br><span class=\"line\">010D14B2    FF15 BC820D01   call    dword ptr ds:[&lt;&amp;MSVCR90D.printf&gt;]     ; msvcr90d.printf</span><br><span class=\"line\">010D14B8    83C4 04         add     esp,0x4</span><br><span class=\"line\">010D14BB    3BF4            cmp     esi,esp</span><br><span class=\"line\">010D14BD    E8 97FCFFFF     call    010D1159</span><br><span class=\"line\">010D14C2    8B45 F8         mov     eax,dword ptr ss:[ebp-0x8]</span><br><span class=\"line\">010D14C5    5F              pop     edi</span><br><span class=\"line\">010D14C6    5E              pop     esi</span><br><span class=\"line\">010D14C7    5B              pop     ebx</span><br><span class=\"line\">010D14C8    81C4 CC000000   add     esp,0xCC</span><br><span class=\"line\">010D14CE    3BEC            cmp     ebp,esp</span><br><span class=\"line\">010D14D0    E8 84FCFFFF     call    010D1159</span><br><span class=\"line\">010D14D5    8BE5            mov     esp,ebp</span><br><span class=\"line\">010D14D7    5D              pop     ebp</span><br><span class=\"line\">010D14D8    C3              retn</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">010D1412    E8 11FCFFFF     call    010D1028</span><br><span class=\"line\">010D1028   /E9 33050000     jmp     manager::~manager</span><br><span class=\"line\"></span><br><span class=\"line\">010D1560 &gt;  55              push    ebp</span><br><span class=\"line\">010D1561    8BEC            mov     ebp,esp</span><br><span class=\"line\">010D1563    81EC CC000000   sub     esp,0xCC</span><br><span class=\"line\">010D1569    53              push    ebx</span><br><span class=\"line\">010D156A    56              push    esi</span><br><span class=\"line\">010D156B    57              push    edi</span><br><span class=\"line\">010D156C    51              push    ecx</span><br><span class=\"line\">010D156D    8DBD 34FFFFFF   lea     edi,dword ptr ss:[ebp-0xCC]</span><br><span class=\"line\">010D1573    B9 33000000     mov     ecx,0x33</span><br><span class=\"line\">010D1578    B8 CCCCCCCC     mov     eax,0xCCCCCCCC</span><br><span class=\"line\">010D157D    F3:AB           rep     stos dword ptr es:[edi]</span><br><span class=\"line\">010D157F    59              pop     ecx</span><br><span class=\"line\">010D1580    894D F8         mov     dword ptr ss:[ebp-0x8],ecx</span><br><span class=\"line\">010D1583    8BF4            mov     esi,esp</span><br><span class=\"line\">010D1585    68 5C570D01     push    010D575C                                  ; ASCII &quot;~maneger()!\\n&quot;</span><br><span class=\"line\">010D158A    FF15 BC820D01   call    dword ptr ds:[&lt;&amp;MSVCR90D.printf&gt;]         ; msvcr90d.printf</span><br><span class=\"line\">010D1590    83C4 04         add     esp,0x4</span><br><span class=\"line\">010D1593    3BF4            cmp     esi,esp</span><br><span class=\"line\">010D1595    E8 BFFBFFFF     call    010D1159</span><br><span class=\"line\">010D159A    8B4D F8         mov     ecx,dword ptr ss:[ebp-0x8]</span><br><span class=\"line\">010D159D    E8 8BFAFFFF     call    010D102D</span><br><span class=\"line\">//010D102D   /E9 9E050000     jmp     employee::~employee</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">010D15A2    5F              pop     edi</span><br><span class=\"line\">010D15A3    5E              pop     esi</span><br><span class=\"line\">010D15A4    5B              pop     ebx</span><br><span class=\"line\">010D15A5    81C4 CC000000   add     esp,0xCC</span><br><span class=\"line\">010D15AB    3BEC            cmp     ebp,esp</span><br><span class=\"line\">010D15AD    E8 A7FBFFFF     call    010D1159</span><br><span class=\"line\">010D15B2    8BE5            mov     esp,ebp</span><br><span class=\"line\">010D15B4    5D              pop     ebp</span><br><span class=\"line\">010D15B5    C3              retn</span><br></pre></td></tr></table></figure>\n<p>private</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;stdafx.h&quot;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;windows.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">class employee</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">private:</span><br><span class=\"line\">\temployee() &#123; printf(&quot;employee()!\\n&quot;);&#125;</span><br><span class=\"line\">\t~employee() &#123; printf(&quot;~employee()!\\n&quot;);&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">class manager : public employee</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">private:</span><br><span class=\"line\">\tmanager() &#123; printf(&quot;manager()!\\n&quot;);&#125;</span><br><span class=\"line\">\t~manager() &#123;  printf(&quot;~maneger()!\\n&quot;);&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int _tmain(int argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tmanager my;</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"从反汇编角度看this指针\"><a class=\"markdownIt-Anchor\" href=\"#从反汇编角度看this指针\">#</a> 从反汇编角度看 this 指针</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;stdafx.h&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">struct MyStruct</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int x ;</span><br><span class=\"line\">    int y ;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">//函数在结构体外部</span><br><span class=\"line\">void Max(MyStruct* str)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (str-&gt;x &gt; str-&gt;y)</span><br><span class=\"line\">        printf(&quot;%d&quot;,str-&gt;x);</span><br><span class=\"line\">    else</span><br><span class=\"line\">        printf(&quot;%d&quot;,str-&gt;y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int _tmain(int argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    MyStruct haha ;</span><br><span class=\"line\">    haha.x = 1 ;</span><br><span class=\"line\">    haha.y = 2 ;</span><br><span class=\"line\">    Max(&amp;haha);</span><br><span class=\"line\">    printf(&quot;%d\\n&quot;,sizeof(haha));</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">012A1450 &gt;  55              push    ebp</span><br><span class=\"line\">012A1451    8BEC            mov     ebp,esp</span><br><span class=\"line\">012A1453    81EC D0000000   sub     esp,0xD0</span><br><span class=\"line\">012A1459    53              push    ebx</span><br><span class=\"line\">012A145A    56              push    esi</span><br><span class=\"line\">012A145B    57              push    edi</span><br><span class=\"line\">012A145C    8DBD 30FFFFFF   lea     edi,dword ptr ss:[ebp-0xD0]</span><br><span class=\"line\">012A1462    B9 34000000     mov     ecx,0x34</span><br><span class=\"line\">012A1467    B8 CCCCCCCC     mov     eax,0xCCCCCCCC</span><br><span class=\"line\">012A146C    F3:AB           rep     stos dword ptr es:[edi]</span><br><span class=\"line\">012A146E    C745 F4 0100000&gt;mov     dword ptr ss:[ebp-0xC],0x1</span><br><span class=\"line\">012A1475    C745 F8 0200000&gt;mov     dword ptr ss:[ebp-0x8],0x2</span><br><span class=\"line\">012A147C    8D45 F4         lea     eax,dword ptr ss:[ebp-0xC]</span><br><span class=\"line\">012A147F    50              push    eax</span><br><span class=\"line\">012A1480    E8 CAFCFFFF     call    012A114F</span><br><span class=\"line\">//012A114F   /E9 5C020000     jmp     Max</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">012A1485    83C4 04         add     esp,0x4</span><br><span class=\"line\">012A1488    8BF4            mov     esi,esp</span><br><span class=\"line\">012A148A    6A 08           push    0x8</span><br><span class=\"line\">012A148C    68 40572A01     push    012A5740                         ; ASCII &quot;%d\\n&quot;</span><br><span class=\"line\">012A1491    FF15 BC822A01   call    dword ptr ds:[&lt;&amp;MSVCR90D.printf&gt;&gt;; msvcr90d.printf</span><br><span class=\"line\">012A1497    83C4 08         add     esp,0x8</span><br><span class=\"line\">012A149A    3BF4            cmp     esi,esp</span><br><span class=\"line\">012A149C    E8 A4FCFFFF     call    012A1145</span><br><span class=\"line\">012A14A1    33C0            xor     eax,eax</span><br><span class=\"line\">012A14A3    52              push    edx</span><br><span class=\"line\">012A14A4    8BCD            mov     ecx,ebp</span><br><span class=\"line\">012A14A6    50              push    eax</span><br><span class=\"line\">012A14A7    8D15 C8142A01   lea     edx,dword ptr ds:[0x12A14C8]</span><br><span class=\"line\">012A14AD    E8 DAFBFFFF     call    012A108C</span><br><span class=\"line\">012A14B2    58              pop     eax</span><br><span class=\"line\">012A14B3    5A              pop     edx</span><br><span class=\"line\">012A14B4    5F              pop     edi</span><br><span class=\"line\">012A14B5    5E              pop     esi</span><br><span class=\"line\">012A14B6    5B              pop     ebx</span><br><span class=\"line\">012A14B7    81C4 D0000000   add     esp,0xD0</span><br><span class=\"line\">012A14BD    3BEC            cmp     ebp,esp</span><br><span class=\"line\">012A14BF    E8 81FCFFFF     call    012A1145</span><br><span class=\"line\">012A14C4    8BE5            mov     esp,ebp</span><br><span class=\"line\">012A14C6    5D              pop     ebp</span><br><span class=\"line\">012A14C7    C3              retn</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>当 haha.x-&gt; 1 和 haha.x -&gt; 2</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221110101344910.png\" alt=\"image-20221110101344910\"></p>\n<p>Max:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">012A13B0 &gt;  55              push    ebp</span><br><span class=\"line\">012A13B1    8BEC            mov     ebp,esp</span><br><span class=\"line\">012A13B3    81EC C0000000   sub     esp,0xC0</span><br><span class=\"line\">012A13B9    53              push    ebx</span><br><span class=\"line\">012A13BA    56              push    esi</span><br><span class=\"line\">012A13BB    57              push    edi</span><br><span class=\"line\">012A13BC    8DBD 40FFFFFF   lea     edi,dword ptr ss:[ebp-0xC0]</span><br><span class=\"line\">012A13C2    B9 30000000     mov     ecx,0x30</span><br><span class=\"line\">012A13C7    B8 CCCCCCCC     mov     eax,0xCCCCCCCC</span><br><span class=\"line\">012A13CC    F3:AB           rep     stos dword ptr es:[edi]</span><br><span class=\"line\">012A13CE    8B45 08         mov     eax,dword ptr ss:[ebp+0x8]</span><br><span class=\"line\">012A13D1    8B4D 08         mov     ecx,dword ptr ss:[ebp+0x8]</span><br><span class=\"line\">012A13D4    8B10            mov     edx,dword ptr ds:[eax]</span><br><span class=\"line\">012A13D6    3B51 04         cmp     edx,dword ptr ds:[ecx+0x4]</span><br><span class=\"line\">012A13D9    7E 1F           jle     short 012A13FA</span><br><span class=\"line\">012A13DB    8BF4            mov     esi,esp</span><br><span class=\"line\">012A13DD    8B45 08         mov     eax,dword ptr ss:[ebp+0x8]</span><br><span class=\"line\">012A13E0    8B08            mov     ecx,dword ptr ds:[eax]</span><br><span class=\"line\">012A13E2    51              push    ecx</span><br><span class=\"line\">012A13E3    68 3C572A01     push    012A573C                               ; ASCII &quot;%d&quot;</span><br><span class=\"line\">012A13E8    FF15 BC822A01   call    dword ptr ds:[&lt;&amp;MSVCR90D.printf&gt;]      ; msvcr90d.printf</span><br><span class=\"line\">012A13EE    83C4 08         add     esp,0x8</span><br><span class=\"line\">012A13F1    3BF4            cmp     esi,esp</span><br><span class=\"line\">012A13F3    E8 4DFDFFFF     call    012A1145</span><br><span class=\"line\">012A13F8    EB 1E           jmp     short 012A1418</span><br><span class=\"line\">012A13FA    8BF4            mov     esi,esp</span><br><span class=\"line\">012A13FC    8B45 08         mov     eax,dword ptr ss:[ebp+0x8]</span><br><span class=\"line\">012A13FF    8B48 04         mov     ecx,dword ptr ds:[eax+0x4]</span><br><span class=\"line\">012A1402    51              push    ecx</span><br><span class=\"line\">012A1403    68 3C572A01     push    012A573C                               ; ASCII &quot;%d&quot;</span><br><span class=\"line\">012A1408    FF15 BC822A01   call    dword ptr ds:[&lt;&amp;MSVCR90D.printf&gt;]      ; msvcr90d.printf</span><br><span class=\"line\">012A140E    83C4 08         add     esp,0x8</span><br><span class=\"line\">012A1411    3BF4            cmp     esi,esp</span><br><span class=\"line\">012A1413    E8 2DFDFFFF     call    012A1145</span><br><span class=\"line\">012A1418    5F              pop     edi</span><br><span class=\"line\">012A1419    5E              pop     esi</span><br><span class=\"line\">012A141A    5B              pop     ebx</span><br><span class=\"line\">012A141B    81C4 C0000000   add     esp,0xC0</span><br><span class=\"line\">012A1421    3BEC            cmp     ebp,esp</span><br><span class=\"line\">012A1423    E8 1DFDFFFF     call    012A1145</span><br><span class=\"line\">012A1428    8BE5            mov     esp,ebp</span><br><span class=\"line\">012A142A    5D              pop     ebp</span><br><span class=\"line\">012A142B    C3              retn</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>this 看 ecx</p>\n<p>ecx 在内存中为：<br>\n<img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221110101730211.png\" alt=\"image-20221110101730211\"></p>\n<h3 id=\"反汇编中构造函数和析构函数的识别\"><a class=\"markdownIt-Anchor\" href=\"#反汇编中构造函数和析构函数的识别\">#</a> 反汇编中构造函数和析构函数的识别</h3>\n<p>代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;stdafx.h&quot;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;windows.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">class MyTest</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    MyTest();</span><br><span class=\"line\">    ~MyTest();</span><br><span class=\"line\">    void SetTest(DWORD dwTest);</span><br><span class=\"line\">    DWORD GetTest();</span><br><span class=\"line\">public:</span><br><span class=\"line\">    DWORD m_dwTest;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"> MyTest::MyTest()</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">     printf(&quot;1111\\n&quot;);</span><br><span class=\"line\">     </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> MyTest::~MyTest()</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">    printf(&quot;2222\\n&quot;);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">void MyTest::SetTest(DWORD dwTest)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    this-&gt;m_dwTest = dwTest;   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">DWORD MyTest::GetTest()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return this-&gt;m_dwTest;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int _tmain(int argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tMyTest Test;</span><br><span class=\"line\">\tTest.SetTest(1);</span><br><span class=\"line\">\tint Number = Test.GetTest();</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对应的汇编代码为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00D11550 &gt;  55              push    ebp</span><br><span class=\"line\">00D11551    8BEC            mov     ebp,esp</span><br><span class=\"line\">00D11553    6A FF           push    -0x1</span><br><span class=\"line\">00D11555    68 E846D100     push    00D146E8</span><br><span class=\"line\">00D1155A    64:A1 00000000  mov     eax,dword ptr fs:[0]</span><br><span class=\"line\">00D11560    50              push    eax</span><br><span class=\"line\">00D11561    81EC E4000000   sub     esp,0xE4</span><br><span class=\"line\">00D11567    53              push    ebx</span><br><span class=\"line\">00D11568    56              push    esi</span><br><span class=\"line\">00D11569    57              push    edi</span><br><span class=\"line\">00D1156A    8DBD 10FFFFFF   lea     edi,dword ptr ss:[ebp-0xF0]</span><br><span class=\"line\">00D11570    B9 39000000     mov     ecx,0x39</span><br><span class=\"line\">00D11575    B8 CCCCCCCC     mov     eax,0xCCCCCCCC</span><br><span class=\"line\">00D1157A    F3:AB           rep     stos dword ptr es:[edi]</span><br><span class=\"line\">00D1157C    A1 0080D100     mov     eax,dword ptr ds:[__security_coo&gt;</span><br><span class=\"line\">00D11581    33C5            xor     eax,ebp</span><br><span class=\"line\">00D11583    50              push    eax</span><br><span class=\"line\">00D11584    8D45 F4         lea     eax,dword ptr ss:[ebp-0xC]</span><br><span class=\"line\">00D11587    64:A3 00000000  mov     dword ptr fs:[0],eax</span><br><span class=\"line\">00D1158D    8D4D EC         lea     ecx,dword ptr ss:[ebp-0x14]</span><br><span class=\"line\">00D11590    E8 D3FBFFFF     call    00D11168</span><br><span class=\"line\">//00D11168   /E9 73020000     jmp     MyTest::MyTest</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">00D11595    C745 FC 0000000&gt;mov     dword ptr ss:[ebp-0x4],0x0</span><br><span class=\"line\">00D1159C    6A 01           push    0x1</span><br><span class=\"line\">00D1159E    8D4D EC         lea     ecx,dword ptr ss:[ebp-0x14]</span><br><span class=\"line\">00D115A1    E8 CCFBFFFF     call    00D11172</span><br><span class=\"line\">00D11172   /E9 49030000     jmp     MyTest::SetTest</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">00D115A6    8D4D EC         lea     ecx,dword ptr ss:[ebp-0x14]</span><br><span class=\"line\">00D115A9    E8 3CFCFFFF     call    00D111EA</span><br><span class=\"line\">00D111EA   /E9 21030000     jmp     MyTest::GetTest</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">00D115AE    8945 E0         mov     dword ptr ss:[ebp-0x20],eax</span><br><span class=\"line\">00D115B1    8BF4            mov     esi,esp</span><br><span class=\"line\">00D115B3    FF15 C492D100   call    dword ptr ds:[&lt;&amp;MSVCR90D.getchar&gt;; msvcr90d.getchar</span><br><span class=\"line\">00D115B9    3BF4            cmp     esi,esp</span><br><span class=\"line\">00D115BB    E8 8AFBFFFF     call    00D1114A</span><br><span class=\"line\">00D115C0    C785 14FFFFFF 0&gt;mov     dword ptr ss:[ebp-0xEC],0x0</span><br><span class=\"line\">00D115CA    C745 FC FFFFFFF&gt;mov     dword ptr ss:[ebp-0x4],-0x1</span><br><span class=\"line\">00D115D1    8D4D EC         lea     ecx,dword ptr ss:[ebp-0x14]</span><br><span class=\"line\">00D115D4    E8 4FFAFFFF     call    00D11028</span><br><span class=\"line\">00D115D9    8B85 14FFFFFF   mov     eax,dword ptr ss:[ebp-0xEC]</span><br><span class=\"line\">00D115DF    52              push    edx</span><br><span class=\"line\">00D115E0    8BCD            mov     ecx,ebp</span><br><span class=\"line\">00D115E2    50              push    eax</span><br><span class=\"line\">00D115E3    8D15 1016D100   lea     edx,dword ptr ds:[0xD11610]</span><br><span class=\"line\">00D115E9    E8 A3FAFFFF     call    00D11091</span><br><span class=\"line\">00D115EE    58              pop     eax</span><br><span class=\"line\">00D115EF    5A              pop     edx</span><br><span class=\"line\">00D115F0    8B4D F4         mov     ecx,dword ptr ss:[ebp-0xC]</span><br><span class=\"line\">00D115F3    64:890D 0000000&gt;mov     dword ptr fs:[0],ecx</span><br><span class=\"line\">00D115FA    59              pop     ecx</span><br><span class=\"line\">00D115FB    5F              pop     edi</span><br><span class=\"line\">00D115FC    5E              pop     esi</span><br><span class=\"line\">00D115FD    5B              pop     ebx</span><br><span class=\"line\">00D115FE    81C4 F0000000   add     esp,0xF0</span><br><span class=\"line\">00D11604    3BEC            cmp     ebp,esp</span><br><span class=\"line\">00D11606    E8 3FFBFFFF     call    00D1114A</span><br><span class=\"line\">00D1160B    8BE5            mov     esp,ebp</span><br><span class=\"line\">00D1160D    5D              pop     ebp</span><br><span class=\"line\">00D1160E    C3              retn</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00D11590    E8 D3FBFFFF     call    00D11168</span><br><span class=\"line\">//00D11168   /E9 73020000     jmp     MyTest::MyTest</span><br><span class=\"line\"></span><br><span class=\"line\">00D113E0 &gt;  55              push    ebp</span><br><span class=\"line\">00D113E1    8BEC            mov     ebp,esp</span><br><span class=\"line\">00D113E3    81EC CC000000   sub     esp,0xCC</span><br><span class=\"line\">00D113E9    53              push    ebx</span><br><span class=\"line\">00D113EA    56              push    esi</span><br><span class=\"line\">00D113EB    57              push    edi</span><br><span class=\"line\">00D113EC    51              push    ecx</span><br><span class=\"line\">00D113ED    8DBD 34FFFFFF   lea     edi,dword ptr ss:[ebp-0xCC]</span><br><span class=\"line\">00D113F3    B9 33000000     mov     ecx,0x33</span><br><span class=\"line\">00D113F8    B8 CCCCCCCC     mov     eax,0xCCCCCCCC</span><br><span class=\"line\">00D113FD    F3:AB           rep     stos dword ptr es:[edi]</span><br><span class=\"line\">00D113FF    59              pop     ecx</span><br><span class=\"line\">00D11400    894D F8         mov     dword ptr ss:[ebp-0x8],ecx</span><br><span class=\"line\">00D11403    8BF4            mov     esi,esp</span><br><span class=\"line\">00D11405    68 3C67D100     push    00D1673C                                 ; ASCII &quot;1111\\n&quot;</span><br><span class=\"line\">00D1140A    FF15 CC92D100   call    dword ptr ds:[&lt;&amp;MSVCR90D.printf&gt;]        ; msvcr90d.printf</span><br><span class=\"line\">00D11410    83C4 04         add     esp,0x4</span><br><span class=\"line\">00D11413    3BF4            cmp     esi,esp</span><br><span class=\"line\">00D11415    E8 30FDFFFF     call    00D1114A</span><br><span class=\"line\">00D1141A    8B45 F8         mov     eax,dword ptr ss:[ebp-0x8]</span><br><span class=\"line\">00D1141D    5F              pop     edi</span><br><span class=\"line\">00D1141E    5E              pop     esi</span><br><span class=\"line\">00D1141F    5B              pop     ebx</span><br><span class=\"line\">00D11420    81C4 CC000000   add     esp,0xCC</span><br><span class=\"line\">00D11426    3BEC            cmp     ebp,esp</span><br><span class=\"line\">00D11428    E8 1DFDFFFF     call    00D1114A</span><br><span class=\"line\">00D1142D    8BE5            mov     esp,ebp</span><br><span class=\"line\">00D1142F    5D              pop     ebp</span><br><span class=\"line\">00D11430    C3              retn</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00D115A1    E8 CCFBFFFF     call    00D11172</span><br><span class=\"line\">00D11172   /E9 49030000     jmp     MyTest::SetTest</span><br><span class=\"line\"></span><br><span class=\"line\">00D114C0 &gt;  55              push    ebp</span><br><span class=\"line\">00D114C1    8BEC            mov     ebp,esp</span><br><span class=\"line\">00D114C3    81EC CC000000   sub     esp,0xCC</span><br><span class=\"line\">00D114C9    53              push    ebx</span><br><span class=\"line\">00D114CA    56              push    esi</span><br><span class=\"line\">00D114CB    57              push    edi</span><br><span class=\"line\">00D114CC    51              push    ecx</span><br><span class=\"line\">00D114CD    8DBD 34FFFFFF   lea     edi,dword ptr ss:[ebp-0xCC]</span><br><span class=\"line\">00D114D3    B9 33000000     mov     ecx,0x33</span><br><span class=\"line\">00D114D8    B8 CCCCCCCC     mov     eax,0xCCCCCCCC</span><br><span class=\"line\">00D114DD    F3:AB           rep     stos dword ptr es:[edi]</span><br><span class=\"line\">00D114DF    59              pop     ecx</span><br><span class=\"line\"></span><br><span class=\"line\">//以下四句为\tTest.SetTest(1);的关键代码</span><br><span class=\"line\">00D114E0    894D F8         mov     dword ptr ss:[ebp-0x8],ecx    ;ecx此时为this, i = this </span><br><span class=\"line\">00D114E3    8B45 F8         mov     eax,dword ptr ss:[ebp-0x8]\t  ;ebp-8是this, eax=this</span><br><span class=\"line\">00D114E6    8B4D 08         mov     ecx,dword ptr ss:[ebp+0x8]    ;ecx = 1 ,ebp+8是从外面传来的1</span><br><span class=\"line\">00D114E9    8908            mov     dword ptr ds:[eax],ecx        ;this-&gt;m = 1</span><br><span class=\"line\">//</span><br><span class=\"line\"></span><br><span class=\"line\">00D114EB    5F              pop     edi</span><br><span class=\"line\">00D114EC    5E              pop     esi</span><br><span class=\"line\">00D114ED    5B              pop     ebx</span><br><span class=\"line\">00D114EE    8BE5            mov     esp,ebp</span><br><span class=\"line\">00D114F0    5D              pop     ebp</span><br><span class=\"line\">00D114F1    C2 0400         retn    0x4</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00D115A9    E8 3CFCFFFF     call    00D111EA</span><br><span class=\"line\">00D111EA   /E9 21030000     jmp     MyTest::GetTest</span><br><span class=\"line\"></span><br><span class=\"line\">00D11510 &gt;  55              push    ebp</span><br><span class=\"line\">00D11511    8BEC            mov     ebp,esp</span><br><span class=\"line\">00D11513    81EC CC000000   sub     esp,0xCC</span><br><span class=\"line\">00D11519    53              push    ebx</span><br><span class=\"line\">00D1151A    56              push    esi</span><br><span class=\"line\">00D1151B    57              push    edi</span><br><span class=\"line\">00D1151C    51              push    ecx</span><br><span class=\"line\">00D1151D    8DBD 34FFFFFF   lea     edi,dword ptr ss:[ebp-0xCC]</span><br><span class=\"line\">00D11523    B9 33000000     mov     ecx,0x33</span><br><span class=\"line\">00D11528    B8 CCCCCCCC     mov     eax,0xCCCCCCCC</span><br><span class=\"line\">00D1152D    F3:AB           rep     stos dword ptr es:[edi]</span><br><span class=\"line\">00D1152F    59              pop     ecx</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//以下三句为int Number = Test.GetTest();的关键代码</span><br><span class=\"line\">00D11530    894D F8         mov     dword ptr ss:[ebp-0x8],ecx</span><br><span class=\"line\">00D11533    8B45 F8         mov     eax,dword ptr ss:[ebp-0x8]</span><br><span class=\"line\">00D11536    8B00            mov     eax,dword ptr ds:[eax]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">00D11538    5F              pop     edi</span><br><span class=\"line\">00D11539    5E              pop     esi</span><br><span class=\"line\">00D1153A    5B              pop     ebx</span><br><span class=\"line\">00D1153B    8BE5            mov     esp,ebp</span><br><span class=\"line\">00D1153D    5D              pop     ebp</span><br><span class=\"line\">00D1153E    C3              retn</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"动态调试基础\"><a class=\"markdownIt-Anchor\" href=\"#动态调试基础\">#</a> 动态调试基础</h2>\n<h3 id=\"断点\"><a class=\"markdownIt-Anchor\" href=\"#断点\">#</a> 断点</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DR0~DR3这四个寄存器是断点地址存储器,用于保存断点的地址</span><br><span class=\"line\">DR6是调试状态寄存器用于指明DR0~DR3寄存器中哪一个产生了调试异常</span><br><span class=\"line\">DR6寄存器使用比特位B0~B3来指明DR0~DR3中哪个产生了调试异常</span><br><span class=\"line\">DR7是断点属性控制器</span><br><span class=\"line\">DR7寄存器分别保存着DR0~DR3的断点地址对应的断点的属性,属性有如下几种:</span><br><span class=\"line\">L0~L3:这个比特位等于1,则断点为本地断点.</span><br><span class=\"line\">G0~G3:这个比特位等于1,则断点为全局断点.</span><br><span class=\"line\">R/W0-R/W3:</span><br><span class=\"line\">00：执行断点</span><br><span class=\"line\">01：数据写入断点</span><br><span class=\"line\">10：I/0读写断点</span><br><span class=\"line\">11：读写断点()读取指令不算)</span><br></pre></td></tr></table></figure>\n<p>DR0-DR3 硬件断点</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/2759285/1655191812086-b457e0fc-6a04-403f-a7f4-848fd2617c6e.png\" alt=\"img\"></p>\n<p>删除硬件断点 调试 -&gt; 硬件断点</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/2759285/1655191872090-b8599c55-b435-459d-9cbc-ec378d651497.png\" alt=\"img\"></p>\n<p>设置硬件断点  右键 -&gt; 断点 -&gt; 硬件执行</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221112211213663.png\" alt=\"image-20221112211213663\"></p>\n<p>取消硬件断点：  hd 基址</p>\n<p>对当前地址做中断，即添加硬件断点： hr 基址</p>\n<p>常用断点：软件断点，内存写入，内存访问，硬件执行</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/2759285/1655192756712-0636b463-746a-4c86-8b38-44b2bb9597c5.png\" alt=\"img\"></p>\n<p>ALT+M 内存镜像</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/2759285/1655192833816-1b08c4ac-e51c-419e-906d-f288dd1d9a22.png\" alt=\"img\"></p>\n<h3 id=\"常用调试器\"><a class=\"markdownIt-Anchor\" href=\"#常用调试器\">#</a> 常用调试器</h3>\n<h4 id=\"ollyice\"><a class=\"markdownIt-Anchor\" href=\"#ollyice\">#</a> OllyICE</h4>\n<p>查看在内存在对应的字节码，即指令在内存中的机器码</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/2759285/1655194426316-532565d9-fa78-44e2-b792-c1d4f47c3c65.png\" alt=\"img\"></p>\n<p>一般来说程序映射到内存中基址从 0040 开始，即 PE 文件头</p>\n<p>映射到代码段需要 + 1000，前 1000 是 PE 头信息</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/2759285/1655194544858-688f3db0-11f9-4a14-b509-46464ef0c7e3.png\" alt=\"img\"></p>\n<p>8087 中浮点运行，反调试会用到</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221112214201466.png\" alt=\"image-20221112214201466\"></p>\n<p>用于轴坐标，准心，多用于游戏分析</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221112214252305.png\" alt=\"image-20221112214252305\"></p>\n<h4 id=\"xdbg\"><a class=\"markdownIt-Anchor\" href=\"#xdbg\">#</a> xdbg</h4>\n<p>1. 线程</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221112214836603.png\" alt=\"image-20221112214836603\"></p>\n<p>stdcall 一般在函数内部做 ret 做堆栈平衡</p>\n<p>windbg</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0:004&gt; g</span><br><span class=\"line\">(a5c.9dc): Break instruction exception - code 80000003 (first chance)</span><br><span class=\"line\">eax=7efda000 ebx=00000000 ecx=00000000 edx=77a4f7ea esi=00000000 edi=00000000</span><br><span class=\"line\">eip=779c000c esp=02adff5c ebp=02adff88 iopl=0         nv up ei pl zr na pe nc</span><br><span class=\"line\">cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246</span><br><span class=\"line\">ntdll!DbgBreakPoint:</span><br><span class=\"line\">779c000c cc              int     3</span><br><span class=\"line\">0:004&gt; bp kernel32!OpenProcess</span><br><span class=\"line\">0:004&gt; u kernel32!OpenProcess</span><br><span class=\"line\">kernel32!OpenProcess:</span><br><span class=\"line\">76831986 8bff            mov     edi,edi</span><br><span class=\"line\">76831988 55              push    ebp</span><br><span class=\"line\">76831989 8bec            mov     ebp,esp</span><br><span class=\"line\">7683198b 5d              pop     ebp</span><br><span class=\"line\">7683198c eb05            jmp     kernel32!OpenProcess+0xd (76831993)</span><br><span class=\"line\">7683198e 90              nop</span><br><span class=\"line\">7683198f 90              nop</span><br><span class=\"line\">76831990 90              nop</span><br><span class=\"line\">0:004&gt; u 76831993</span><br><span class=\"line\">kernel32!OpenProcess+0xd:</span><br><span class=\"line\">76831993 ff2554098376    jmp     dword ptr [kernel32+0x10954 (76830954)]</span><br><span class=\"line\">76831999 90              nop</span><br><span class=\"line\">7683199a 90              nop</span><br><span class=\"line\">7683199b 90              nop</span><br><span class=\"line\">7683199c 90              nop</span><br><span class=\"line\">7683199d 90              nop</span><br><span class=\"line\">kernel32!WaitForMultipleObjectsEx:</span><br><span class=\"line\">7683199e 8bff            mov     edi,edi</span><br><span class=\"line\">768319a0 55              push    ebp</span><br></pre></td></tr></table></figure>\n<p>VT</p>\n<p>需要开启</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221113204110511.png\" alt=\"image-20221113204110511\"></p>\n",
            "tags": [
                "逆向"
            ]
        }
    ]
}